{
  "version": 3,
  "sources": ["../../../../../../node_modules/base64-js/index.js", "../../../../../../node_modules/ieee754/index.js", "../../../../../../node_modules/buffer/index.js", "../../../../../../node_modules/bignumber.js/bignumber.js", "../../../../../../node_modules/borc/src/decoder.asm.js", "../../../../../../node_modules/borc/src/constants.js", "../../../../../../node_modules/borc/src/utils.js", "../../../../../../node_modules/borc/src/simple.js", "../../../../../../node_modules/borc/src/tagged.js", "../../../../../../node_modules/iso-url/src/url-browser.js", "../../../../../../node_modules/iso-url/src/relative.js", "../../../../../../node_modules/iso-url/index.js", "../../../../../../node_modules/borc/src/decoder.js", "../../../../../../node_modules/borc/src/diagnose.js", "../../../../../../node_modules/borc/src/encoder.js", "../../../../../../node_modules/borc/src/index.js", "../../../../../../node_modules/simple-cbor/src/value.js", "../../../../../../node_modules/simple-cbor/src/serializer.js", "../../../../../../node_modules/simple-cbor/src/index.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js", "../../../../../../node_modules/@dfinity/principal/lib/esm/utils/base32.js", "../../../../../../node_modules/@dfinity/principal/lib/esm/utils/getCrc.js", "../../../../../../node_modules/@noble/hashes/esm/_assert.js", "../../../../../../node_modules/@noble/hashes/esm/crypto.js", "../../../../../../node_modules/@noble/hashes/esm/utils.js", "../../../../../../node_modules/@noble/hashes/esm/_md.js", "../../../../../../node_modules/@noble/hashes/esm/sha256.js", "../../../../../../node_modules/@dfinity/principal/lib/esm/utils/sha224.js", "../../../../../../node_modules/@dfinity/principal/lib/esm/index.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/api.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/errors.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js", "../../../../../../node_modules/@dfinity/candid/lib/esm/idl.js", "../../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js", "../../../../../../node_modules/@dfinity/candid/lib/esm/utils/hash.js", "../../../../../../node_modules/@dfinity/candid/lib/esm/utils/leb128.js", "../../../../../../node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js", "../../../../../../node_modules/@noble/curves/esm/abstract/utils.js", "../../../../../../node_modules/@noble/curves/esm/abstract/modular.js", "../../../../../../node_modules/@noble/curves/esm/abstract/hash-to-curve.js", "../../../../../../node_modules/@noble/curves/esm/abstract/curve.js", "../../../../../../node_modules/@noble/curves/esm/abstract/weierstrass.js", "../../../../../../node_modules/@noble/curves/esm/abstract/bls.js", "../../../../../../node_modules/@noble/curves/esm/abstract/tower.js", "../../../../../../node_modules/@noble/curves/esm/bls12-381.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/utils/bls.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/auth.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/utils/random.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/errors.js", "../../../../../../node_modules/@noble/hashes/esm/_u64.js", "../../../../../../node_modules/@noble/hashes/esm/sha512.js", "../../../../../../node_modules/@noble/curves/esm/abstract/edwards.js", "../../../../../../node_modules/@noble/curves/esm/abstract/montgomery.js", "../../../../../../node_modules/@noble/curves/esm/ed25519.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/der.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/public_key.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/observable.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/polling/backoff.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/index.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/proxy.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js", "../../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js"],
  "sourcesContent": ["'use strict';\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\nfunction getLens(b64) {\n  var len = b64.length;\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0;\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  return arr;\n}\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('');\n}\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n  return parts.join('');\n}", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n  buffer[offset + i - d] |= s * 128;\n};", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict';\n\nvar base64 = require('base64-js');\nvar ieee754 = require('ieee754');\nvar customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation\n? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n: null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nvar K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {\n  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');\n}\nfunction typedArraySupport() {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1);\n    var proto = {\n      foo: function () {\n        return 42;\n      }\n    };\n    Object.setPrototypeOf(proto, Uint8Array.prototype);\n    Object.setPrototypeOf(arr, proto);\n    return arr.foo() === 42;\n  } catch (e) {\n    return false;\n  }\n}\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined;\n    return this.buffer;\n  }\n});\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined;\n    return this.byteOffset;\n  }\n});\nfunction createBuffer(length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length);\n  Object.setPrototypeOf(buf, Buffer.prototype);\n  return buf;\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError('The \"string\" argument must be of type string. Received type number');\n    }\n    return allocUnsafe(arg);\n  }\n  return from(arg, encodingOrOffset, length);\n}\nBuffer.poolSize = 8192; // not used by this implementation\n\nfunction from(value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset);\n  }\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value);\n  }\n  if (value == null) {\n    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n  }\n  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n  }\n  var valueOf = value.valueOf && value.valueOf();\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length);\n  }\n  var b = fromObject(value);\n  if (b) return b;\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n  }\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length);\n};\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number');\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n  }\n}\nfunction alloc(size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(size);\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n  }\n  return createBuffer(size);\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding);\n};\nfunction allocUnsafe(size) {\n  assertSize(size);\n  return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size);\n};\nfunction fromString(string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding);\n  }\n  var length = byteLength(string, encoding) | 0;\n  var buf = createBuffer(length);\n  var actual = buf.write(string, encoding);\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n  }\n  return buf;\n}\nfunction fromArrayLike(array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  var buf = createBuffer(length);\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255;\n  }\n  return buf;\n}\nfunction fromArrayView(arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView);\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n  }\n  return fromArrayLike(arrayView);\n}\nfunction fromArrayBuffer(array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds');\n  }\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds');\n  }\n  var buf;\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array);\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset);\n  } else {\n    buf = new Uint8Array(array, byteOffset, length);\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype);\n  return buf;\n}\nfunction fromObject(obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    var buf = createBuffer(len);\n    if (buf.length === 0) {\n      return buf;\n    }\n    obj.copy(buf, 0, 0, len);\n    return buf;\n  }\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0);\n    }\n    return fromArrayLike(obj);\n  }\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data);\n  }\n}\nfunction checked(length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n  }\n  return length | 0;\n}\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n  return Buffer.alloc(+length);\n}\nBuffer.isBuffer = function isBuffer(b) {\n  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n};\nBuffer.compare = function compare(a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n  }\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n    default:\n      return false;\n  }\n};\nBuffer.concat = function concat(list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos);\n      } else {\n        Uint8Array.prototype.set.call(buffer, buf, pos);\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    } else {\n      buf.copy(buffer, pos);\n    }\n    pos += buf.length;\n  }\n  return buffer;\n};\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength;\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);\n  }\n  var len = string.length;\n  var mustMatch = arguments.length > 2 && arguments[2] === true;\n  if (!mustMatch && len === 0) return 0;\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length;\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n      case 'hex':\n        return len >>> 1;\n      case 'base64':\n        return base64ToBytes(string).length;\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return '';\n  }\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n  if (end <= 0) {\n    return '';\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n  if (end <= start) {\n    return '';\n  }\n  if (!encoding) encoding = 'utf8';\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n      case 'ascii':\n        return asciiSlice(this, start, end);\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n      case 'base64':\n        return base64Slice(this, start, end);\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true;\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this;\n};\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this;\n};\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this;\n};\nBuffer.prototype.toString = function toString() {\n  var length = this.length;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n  if (this.length > max) str += ' ... ';\n  return '<Buffer ' + str + '>';\n};\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n}\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength);\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);\n  }\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n  if (start >= end) {\n    return 1;\n  }\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1;\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset; // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n  throw new TypeError('val must be string, number or Buffer');\n}\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n      if (found) return i;\n    }\n  }\n  return -1;\n}\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n  var strLen = string.length;\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (numberIsNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n  return i;\n}\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n    // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0;\n    if (isFinite(length)) {\n      length = length >>> 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length);\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break;\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n  return decodeCodePointsArray(res);\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n  return res;\n}\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret;\n}\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret;\n}\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]];\n  }\n  return out;\n}\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res;\n}\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n  if (end < start) end = start;\n  var newBuf = this.subarray(start, end);\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype);\n  return newBuf;\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  return val;\n};\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n  return val;\n};\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  return offset + 2;\n};\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  this[offset] = value >>> 8;\n  this[offset + 1] = value & 0xff;\n  return offset + 2;\n};\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset + 3] = value >>> 24;\n  this[offset + 2] = value >>> 16;\n  this[offset + 1] = value >>> 8;\n  this[offset] = value & 0xff;\n  return offset + 4;\n};\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset] = value >>> 24;\n  this[offset + 1] = value >>> 16;\n  this[offset + 2] = value >>> 8;\n  this[offset + 3] = value & 0xff;\n  return offset + 4;\n};\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  return offset + 2;\n};\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  this[offset] = value >>> 8;\n  this[offset + 1] = value & 0xff;\n  return offset + 2;\n};\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  this[offset + 2] = value >>> 16;\n  this[offset + 3] = value >>> 24;\n  return offset + 4;\n};\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  this[offset] = value >>> 24;\n  this[offset + 1] = value >>> 16;\n  this[offset + 2] = value >>> 8;\n  this[offset + 3] = value & 0xff;\n  return offset + 4;\n};\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0;\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n  var len = end - start;\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end);\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n  }\n  return len;\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code;\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } else if (typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n  if (end <= start) {\n    return this;\n  }\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n    var len = bytes.length;\n    if (len === 0) {\n      throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n  return this;\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction base64clean(str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0];\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return '';\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str;\n}\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n  return bytes;\n}\nfunction asciiToBytes(str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray;\n}\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n  return byteArray;\n}\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n  return i;\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance(obj, type) {\n  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction numberIsNaN(obj) {\n  // For IE11 support\n  return obj !== obj; // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = function () {\n  var alphabet = '0123456789abcdef';\n  var table = new Array(256);\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16;\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j];\n    }\n  }\n  return table;\n}();", ";\n(function (globalObject) {\n  'use strict';\n\n  /*\r\n   *      bignumber.js v9.1.2\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n  var BigNumber,\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n    bignumberError = '[BigNumber Error] ',\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,\n    // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n    // EDITABLE\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n    MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n  function clone(configObject) {\n    var div,\n      convertBase,\n      parseNumeric,\n      P = BigNumber.prototype = {\n        constructor: BigNumber,\n        toString: null,\n        valueOf: null\n      },\n      ONE = new BigNumber(1),\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n      // The default values below must be integers within the inclusive ranges stated.\n      // The values can also be changed at run-time using BigNumber.set.\n\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n      // 0 to MAX\n\n      // The rounding mode used when rounding to the above decimal places, and when using\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n      // UP         0 Away from zero.\n      // DOWN       1 Towards zero.\n      // CEIL       2 Towards +Infinity.\n      // FLOOR      3 Towards -Infinity.\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      ROUNDING_MODE = 4,\n      // 0 to 8\n\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n      // 0 to -MAX\n\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n      // 0 to MAX\n\n      // RANGE : [MIN_EXP, MAX_EXP]\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n      // -1 to -MAX\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n      // 1 to MAX\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n      // true or false\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN      1 The remainder has the same sign as the dividend.\n      //             This modulo mode is commonly known as 'truncated division' and is\n      //             equivalent to (a % n) in JavaScript.\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n      //             The remainder is always positive.\n      //\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n      // modes are commonly used for the modulus operation.\n      // Although the other rounding modes can also be used, they may not give useful results.\n      MODULO_MODE = 1,\n      // 0 to 9\n\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,\n      // 0 to MAX\n\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        prefix: '',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: ',',\n        decimalSeparator: '.',\n        fractionGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        suffix: ''\n      },\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n      // '-', '.', whitespace, or repeated character.\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\n      alphabetHasNormalDecimalDigits = true;\n\n    //------------------------------------------------------------------------------------------\n\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n    function BigNumber(v, b) {\n      var alphabet,\n        c,\n        caseChanged,\n        e,\n        i,\n        isNum,\n        len,\n        str,\n        x = this;\n\n      // Enable constructor call without `new`.\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n      if (b == null) {\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n          return;\n        }\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\n\n          // Fast path for integers, where n < 2147483648 (2**31).\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n            return;\n          }\n          str = String(v);\n        } else {\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base');\n\n        // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n        str = String(v);\n        if (isNum = typeof v == 'number') {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\n\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0;\n\n        // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        }\n\n        // Prevent later check for length on converted number.\n        isNum = false;\n        str = convertBase(str, b, 10, x.s);\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      }\n\n      // Determine leading zeros.\n      for (i = 0; str.charCodeAt(i) === 48; i++);\n\n      // Determine trailing zeros.\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n      if (str = str.slice(i, ++len)) {\n        len -= i;\n\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        }\n\n        // Overflow?\n        if ((e = e - i - 1) > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null;\n\n          // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = [];\n\n          // Transform base\n\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n          for (; i--; str += '0');\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    }\n\n    // CONSTRUCTOR PROPERTIES\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n      if (obj != null) {\n        if (typeof obj == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          }\n\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          }\n\n          // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          }\n\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          }\n\n          // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          }\n\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          }\n\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          }\n\n          // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          }\n\n          // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p];\n\n            // Disallow if less than two characters,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n      var i,\n        n,\n        c = v.c,\n        e = v.e,\n        s = v.s;\n      out: if ({}.toString.call(c) == '[object Array]') {\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          }\n\n          // Calculate number of digits that c[0] should have, based on the exponent.\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE;\n\n          // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n          if (String(c[0]).length == i) {\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            }\n\n            // Last element cannot be zero, unless it is the only element.\n            if (n !== 0) return true;\n          }\n        }\n\n        // Infinity/NaN\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, -1);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, 1);\n    };\n\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000;\n\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n          b,\n          e,\n          k,\n          v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n              // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n            i = k / 2;\n\n            // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        }\n\n        // Use Math.random.\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n        k = c[--i];\n        dp %= LOG_BASE;\n\n        // Convert trailing digits to zeros according to dp.\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        }\n\n        // Remove trailing elements which are zero.\n        for (; c[i] === 0; c.pop(), i--);\n\n        // Zero?\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n          // Count the digits of the first element of c to determine leading zeros, and...\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n          // adjust the exponent accordingly.\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.sum = function () {\n      var i = 1,\n        args = arguments,\n        sum = new BigNumber(args[0]);\n      for (; i < args.length;) sum = sum.plus(args[i++]);\n      return sum;\n    };\n\n    // PRIVATE FUNCTIONS\n\n    // Called by BigNumber and BigNumber.prototype.toString.\n    convertBase = function () {\n      var decimal = '0123456789';\n\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n          arr = [0],\n          arrL,\n          i = 0,\n          len = str.length;\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n        return arr.reverse();\n      }\n\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n          d,\n          e,\n          k,\n          r,\n          x,\n          xc,\n          y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE;\n\n        // Non-integer.\n        if (i >= 0) {\n          k = POW_PRECISION;\n\n          // Unlimited precision.\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k;\n\n          // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        }\n\n        // Convert the number as integer.\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));\n\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\n        e = k = xc.length;\n\n        // Remove trailing zeros.\n        for (; xc[--k] == 0; xc.pop());\n\n        // Zero?\n        if (!xc[0]) return alphabet.charAt(0);\n\n        // Does str represent an integer? If so, no need for the division.\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e;\n\n          // The sign is needed for correct rounding.\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        }\n\n        // xc now represents str converted to baseOut.\n\n        // THe index of the rounding digit.\n        d = e + dp + 1;\n\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\n        i = xc[d];\n\n        // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n        // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d;\n\n          // Round up?\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          }\n\n          // Determine trailing zeros.\n          for (k = xc.length; !xc[--k];);\n\n          // E.g. [4, 11, 15] becomes 4bf.\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n          // Add leading zeros, decimal point and trailing zeros as required.\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        }\n\n        // The caller will add the sign.\n        return str;\n      };\n    }();\n\n    // Perform division in the specified base. Called by div and convertBase.\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n          temp,\n          xlo,\n          xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n        return cmp;\n      }\n      function subtract(a, b, aL, base) {\n        var i = 0;\n\n        // Subtract b from a.\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n\n        // Remove leading zeros.\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      }\n\n      // x: dividend, y: divisor.\n      return function (x, y, dp, rm, base) {\n        var cmp,\n          e,\n          i,\n          more,\n          n,\n          prod,\n          prodL,\n          q,\n          qc,\n          rem,\n          remL,\n          rem0,\n          xi,\n          xL,\n          yc0,\n          yL,\n          yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c;\n\n        // Either NaN, Infinity or 0?\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber(\n          // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        }\n\n        // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n        if (yc[i] > (xc[i] || 0)) e--;\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2;\n\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1));\n\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL; rem[remL++] = 0);\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++;\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yc, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // n is how many times the divisor goes into the current remainder.\n              n = mathfloor(rem0 / yc0);\n\n              //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                }\n\n                // product = divisor\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n              if (prodL < remL) prod = [0].concat(prod);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n              remL = rem.length;\n\n              // If product was < remainder.\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n\n            // Add the next digit, n, to the result array.\n            qc[i++] = n;\n\n            // Update the remainder.\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n          more = rem[0] != null;\n\n          // Leading zero?\n          if (!qc[0]) qc.splice(0, 1);\n        }\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n          // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n        return q;\n      };\n    }();\n\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm);\n\n        // n.e may have changed if the value was rounded up.\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length;\n\n        // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n\n        // Exponential notation.\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n          str = toExponential(str, e);\n\n          // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0');\n\n          // Append zeros?\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n      return n.s < 0 && c0 ? '-' + str : str;\n    }\n\n    // Handle BigNumber.max and BigNumber.min.\n    // If any number is NaN, return NaN.\n    function maxOrMin(args, n) {\n      var k,\n        y,\n        i = 1,\n        x = new BigNumber(args[0]);\n      for (; i < args.length; i++) {\n        y = new BigNumber(args[i]);\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\n          x = y;\n        }\n      }\n      return x;\n    }\n\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n    function normalise(n, c, e) {\n      var i = 1,\n        j = c.length;\n\n      // Remove trailing zeros.\n      for (; !c[--j]; c.pop());\n\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\n      for (j = c[0]; j >= 10; j /= 10, i++);\n\n      // Overflow?\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null;\n\n        // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n      return n;\n    }\n\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n        // No exception on ±Infinity or NaN.\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n            if (b) {\n              base = b;\n\n              // E.g. '1.' to '1', '.1' to '0.1'\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n            if (str != s) return new BigNumber(s, base);\n          }\n\n          // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          }\n\n          // NaN\n          x.s = null;\n        }\n        x.c = x.e = null;\n      };\n    }();\n\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n    function round(x, sd, rm, r) {\n      var d,\n        i,\n        j,\n        k,\n        n,\n        ni,\n        rd,\n        xc = x.c,\n        pows10 = POWS_TEN;\n\n      // if x is not Infinity or NaN...\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n          i = sd - d;\n\n          // If the rounding digit is in the first element of xc...\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0];\n\n            // Get the rounding digit at index j of n.\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni];\n\n              // Get the number of digits of n.\n              for (d = 1; k >= 10; k /= 10, d++);\n\n              // Get the index of rd within n.\n              i %= LOG_BASE;\n\n              // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n              j = i - LOG_BASE + d;\n\n              // Get the rounding digit at index j of n.\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\n            }\n          }\n          r = r || sd < 0 ||\n          // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n          // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1;\n\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n            return x;\n          }\n\n          // Remove excess digits.\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i];\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          }\n\n          // Round up?\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                j = xc[0] += k;\n                for (k = 1; j >= 10; j /= 10, k++);\n\n                // if i != k the length has increased.\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          }\n\n          // Remove trailing zeros.\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        }\n\n        // Overflow? Infinity.\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null;\n\n          // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n      return x;\n    }\n    function valueOf(n) {\n      var str,\n        e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    }\n\n    // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n        n,\n        v,\n        x = this;\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last number.\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n        isModExp,\n        i,\n        k,\n        more,\n        nIsBig,\n        nIsNeg,\n        nIsOdd,\n        y,\n        x = this;\n      n = new BigNumber(n);\n\n      // Allow NaN and ±Infinity, but not other non-integers.\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n      if (m != null) m = new BigNumber(m);\n\n      // Exponent of MAX_SAFE_INTEGER is 15.\n      nIsBig = n.e > 14;\n\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n      nIsNeg = n.s < 0;\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m);\n\n        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n      // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n      // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n        // If x >= 1, k = ±Infinity.\n        if (x.e > -1) k = 1 / k;\n\n        // If n is negative return ±0, else return ±Infinity.\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n      y = new BigNumber(ONE);\n\n      // Performs 54 loop iterations for n of 9007199254740991.\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n        x = x.times(x);\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n    P.isFinite = function () {\n      return !!this.c;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n    P.isNaN = function () {\n      return !this.s;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.minus = function (y, b) {\n      var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Determine which is the bigger number.\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n        t.reverse();\n\n        // Prepend zeros to equalise exponents.\n        for (b = a; b--; t.push(0));\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      }\n\n      // x < y? Point xc to the array of the bigger number.\n      if (xLTy) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n      }\n      b = (j = yc.length) - (i = xc.length);\n\n      // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1;\n\n      // Subtract yc from xc.\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n          --xc[i];\n          xc[j] += BASE;\n        }\n        xc[j] -= yc[j];\n      }\n\n      // Remove leading zeros and adjust exponent accordingly.\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n      // Zero?\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      }\n\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n    P.modulo = P.mod = function (y, b) {\n      var q,\n        s,\n        x = this;\n      y = new BigNumber(y, b);\n\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN);\n\n        // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n      y = x.minus(q.times(y));\n\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n        e,\n        i,\n        j,\n        k,\n        m,\n        xcL,\n        xlo,\n        xhi,\n        ycL,\n        ylo,\n        yhi,\n        zc,\n        base,\n        sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (y = new BigNumber(y, b)).c;\n\n      // Either NaN, ±Infinity or ±0?\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s;\n\n          // Return ±Infinity if either is ±Infinity.\n          if (!xc || !yc) {\n            y.c = y.e = null;\n\n            // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n        return y;\n      }\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length;\n\n      // Ensure xc points to longer array and xcL to its length.\n      if (xcL < ycL) {\n        zc = xc;\n        xc = yc;\n        yc = zc;\n        i = xcL;\n        xcL = ycL;\n        ycL = i;\n      }\n\n      // Initialise the result array with zeros.\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n        zc[j] = c;\n      }\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n      return normalise(y, zc, e);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.plus = function (y, b) {\n      var t,\n        x = this,\n        a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0);\n\n        // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n        t.reverse();\n        for (; a--; t.push(0));\n        t.reverse();\n      }\n      a = xc.length;\n      b = yc.length;\n\n      // Point xc to the longer array, and b to the shorter length.\n      if (a - b < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n        b = a;\n      }\n\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      }\n\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n        n,\n        v,\n        x = this;\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--);\n\n        // Add the number of digits of the first element.\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.squareRoot = P.sqrt = function () {\n      var m,\n        n,\n        r,\n        rep,\n        t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5');\n\n      // Negative/NaN/Infinity/zero?\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      }\n\n      // Initial estimate.\n      s = Math.sqrt(+valueOf(x));\n\n      // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n          n = '5e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      }\n\n      // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0;\n\n        // Newton-Raphson iteration.\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1);\n\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n              break;\n            }\n          }\n        }\n      }\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n      return format(this, dp, rm, 1);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n      return format(this, dp, rm);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n    P.toFormat = function (dp, rm, format) {\n      var str,\n        x = this;\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n      str = x.toFixed(dp, rm);\n      if (x.c) {\n        var i,\n          arr = str.split('.'),\n          g1 = +format.groupSize,\n          g2 = +format.secondaryGroupSize,\n          groupSeparator = format.groupSeparator || '',\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = x.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n        if (g2) {\n          i = g1;\n          g1 = g2;\n          g2 = i;\n          len -= i;\n        }\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n    P.toFraction = function (md) {\n      var d,\n        d0,\n        d1,\n        d2,\n        e,\n        exp,\n        n,\n        n0,\n        n1,\n        q,\n        r,\n        s,\n        x = this,\n        xc = x.c;\n      if (md != null) {\n        n = new BigNumber(md);\n\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc);\n\n      // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s);\n\n      // n0 = d1 = 0\n      n0.c[0] = 0;\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2;\n\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n    P.toString = function (b) {\n      var str,\n        n = this,\n        s = n.s,\n        e = n.e;\n\n      // Infinity or NaN?\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n      return str;\n    };\n\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n    P._isBigNumber = true;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  }\n\n  // PRIVATE HELPER FUNCTIONS\n\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  }\n\n  // Return a coefficient array as a string of base 10 digits.\n  function coeffToString(a) {\n    var s,\n      z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n      for (; z--; s = '0' + s);\n      r += s;\n    }\n\n    // Determine trailing zeros.\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n    return r.slice(0, j + 1 || 1);\n  }\n\n  // Compare the value of BigNumbers x and y.\n  function compare(x, y) {\n    var a,\n      b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either NaN?\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l;\n\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  }\n\n  // Assumes finite n.\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n  function toFixedPoint(str, e, z) {\n    var len, zs;\n\n    // Negative exponent?\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z);\n      str = zs + str;\n\n      // Positive exponent\n    } else {\n      len = str.length;\n\n      // Append zeros.\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z);\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n    return str;\n  }\n\n  // EXPORT\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    });\n\n    // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n\n    // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n    globalObject.BigNumber = BigNumber;\n  }\n})(this);", "/* eslint-disable */\n\nmodule.exports = function decodeAsm(stdlib, foreign, buffer) {\n  'use asm';\n\n  // -- Imports\n  var heap = new stdlib.Uint8Array(buffer);\n  // var log = foreign.log\n  var pushInt = foreign.pushInt;\n  var pushInt32 = foreign.pushInt32;\n  var pushInt32Neg = foreign.pushInt32Neg;\n  var pushInt64 = foreign.pushInt64;\n  var pushInt64Neg = foreign.pushInt64Neg;\n  var pushFloat = foreign.pushFloat;\n  var pushFloatSingle = foreign.pushFloatSingle;\n  var pushFloatDouble = foreign.pushFloatDouble;\n  var pushTrue = foreign.pushTrue;\n  var pushFalse = foreign.pushFalse;\n  var pushUndefined = foreign.pushUndefined;\n  var pushNull = foreign.pushNull;\n  var pushInfinity = foreign.pushInfinity;\n  var pushInfinityNeg = foreign.pushInfinityNeg;\n  var pushNaN = foreign.pushNaN;\n  var pushNaNNeg = foreign.pushNaNNeg;\n  var pushArrayStart = foreign.pushArrayStart;\n  var pushArrayStartFixed = foreign.pushArrayStartFixed;\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;\n  var pushObjectStart = foreign.pushObjectStart;\n  var pushObjectStartFixed = foreign.pushObjectStartFixed;\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;\n  var pushByteString = foreign.pushByteString;\n  var pushByteStringStart = foreign.pushByteStringStart;\n  var pushUtf8String = foreign.pushUtf8String;\n  var pushUtf8StringStart = foreign.pushUtf8StringStart;\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;\n  var pushTagStart = foreign.pushTagStart;\n  var pushTagStart4 = foreign.pushTagStart4;\n  var pushTagStart8 = foreign.pushTagStart8;\n  var pushTagUnassigned = foreign.pushTagUnassigned;\n  var pushBreak = foreign.pushBreak;\n  var pow = stdlib.Math.pow;\n\n  // -- Constants\n\n  // -- Mutable Variables\n\n  var offset = 0;\n  var inputLength = 0;\n  var code = 0;\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse(input) {\n    input = input | 0;\n    offset = 0;\n    inputLength = input;\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;\n      if ((code | 0) > 0) {\n        break;\n      }\n    }\n    return code | 0;\n  }\n\n  // -- Helper Function\n\n  function checkOffset(n) {\n    n = n | 0;\n    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {\n      return 0;\n    }\n    return 1;\n  }\n  function readUInt16(n) {\n    n = n | 0;\n    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;\n  }\n  function readUInt32(n) {\n    n = n | 0;\n    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P(octet) {\n    octet = octet | 0;\n    pushInt(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function UINT_P_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushInt(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function UINT_P_16(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushInt(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function UINT_P_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function UINT_P_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function INT_N(octet) {\n    octet = octet | 0;\n    pushInt(-1 - (octet - 32 | 0) | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function UINT_N_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function UINT_N_16(octet) {\n    octet = octet | 0;\n    var val = 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    val = readUInt16(offset + 1 | 0) | 0;\n    pushInt(-1 - (val | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function UINT_N_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function UINT_N_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function BYTE_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 64 | 0;\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n  function BYTE_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushByteStringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function UTF8_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 96 | 0;\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n  function UTF8_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushUtf8StringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function ARRAY(octet) {\n    octet = octet | 0;\n    pushArrayStartFixed(octet - 128 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function ARRAY_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function ARRAY_16(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function ARRAY_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function ARRAY_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function ARRAY_BREAK(octet) {\n    octet = octet | 0;\n    pushArrayStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function MAP(octet) {\n    octet = octet | 0;\n    var step = 0;\n    step = octet - 160 | 0;\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed(step | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function MAP_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function MAP_16(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function MAP_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function MAP_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function MAP_BREAK(octet) {\n    octet = octet | 0;\n    pushObjectStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_KNOWN(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BIGNUM_POS(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BIGNUM_NEG(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_FRAC(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BIGNUM_FLOAT(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BASE64_URL(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BASE64(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BASE16(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_MORE_1(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushTagStart(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function TAG_MORE_2(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushTagStart(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function TAG_MORE_4(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function TAG_MORE_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function SIMPLE_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushSimpleUnassigned((octet | 0) - 224 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_FALSE(octet) {\n    octet = octet | 0;\n    pushFalse();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_TRUE(octet) {\n    octet = octet | 0;\n    pushTrue();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_NULL(octet) {\n    octet = octet | 0;\n    pushNull();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_UNDEFINED(octet) {\n    octet = octet | 0;\n    pushUndefined();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_BYTE(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function SIMPLE_FLOAT_HALF(octet) {\n    octet = octet | 0;\n    var f = 0;\n    var g = 0;\n    var sign = 1.0;\n    var exp = 0.0;\n    var mant = 0.0;\n    var r = 0.0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    f = heap[offset + 1 | 0] | 0;\n    g = heap[offset + 2 | 0] | 0;\n    if ((f | 0) & 0x80) {\n      sign = -1.0;\n    }\n    exp = +(((f | 0) & 0x7C) >> 2);\n    mant = +(((f | 0) & 0x03) << 8 | g);\n    if (+exp == 0.0) {\n      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN();\n        } else {\n          pushInfinity();\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg();\n        } else {\n          pushInfinityNeg();\n        }\n      }\n    } else {\n      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));\n    }\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function SIMPLE_FLOAT_SINGLE(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function SIMPLE_FLOAT_DOUBLE(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function ERROR(octet) {\n    octet = octet | 0;\n    return 1;\n  }\n  function BREAK(octet) {\n    octet = octet | 0;\n    pushBreak();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n  // Integer 0x00..0x17 (0..23)\n  INT_P,\n  // 0x00\n  INT_P,\n  // 0x01\n  INT_P,\n  // 0x02\n  INT_P,\n  // 0x03\n  INT_P,\n  // 0x04\n  INT_P,\n  // 0x05\n  INT_P,\n  // 0x06\n  INT_P,\n  // 0x07\n  INT_P,\n  // 0x08\n  INT_P,\n  // 0x09\n  INT_P,\n  // 0x0A\n  INT_P,\n  // 0x0B\n  INT_P,\n  // 0x0C\n  INT_P,\n  // 0x0D\n  INT_P,\n  // 0x0E\n  INT_P,\n  // 0x0F\n  INT_P,\n  // 0x10\n  INT_P,\n  // 0x11\n  INT_P,\n  // 0x12\n  INT_P,\n  // 0x13\n  INT_P,\n  // 0x14\n  INT_P,\n  // 0x15\n  INT_P,\n  // 0x16\n  INT_P,\n  // 0x17\n  // Unsigned integer (one-byte uint8_t follows)\n  UINT_P_8,\n  // 0x18\n  // Unsigned integer (two-byte uint16_t follows)\n  UINT_P_16,\n  // 0x19\n  // Unsigned integer (four-byte uint32_t follows)\n  UINT_P_32,\n  // 0x1a\n  // Unsigned integer (eight-byte uint64_t follows)\n  UINT_P_64,\n  // 0x1b\n  ERROR,\n  // 0x1c\n  ERROR,\n  // 0x1d\n  ERROR,\n  // 0x1e\n  ERROR,\n  // 0x1f\n  // Negative integer -1-0x00..-1-0x17 (-1..-24)\n  INT_N,\n  // 0x20\n  INT_N,\n  // 0x21\n  INT_N,\n  // 0x22\n  INT_N,\n  // 0x23\n  INT_N,\n  // 0x24\n  INT_N,\n  // 0x25\n  INT_N,\n  // 0x26\n  INT_N,\n  // 0x27\n  INT_N,\n  // 0x28\n  INT_N,\n  // 0x29\n  INT_N,\n  // 0x2A\n  INT_N,\n  // 0x2B\n  INT_N,\n  // 0x2C\n  INT_N,\n  // 0x2D\n  INT_N,\n  // 0x2E\n  INT_N,\n  // 0x2F\n  INT_N,\n  // 0x30\n  INT_N,\n  // 0x31\n  INT_N,\n  // 0x32\n  INT_N,\n  // 0x33\n  INT_N,\n  // 0x34\n  INT_N,\n  // 0x35\n  INT_N,\n  // 0x36\n  INT_N,\n  // 0x37\n  // Negative integer -1-n (one-byte uint8_t for n follows)\n  UINT_N_8,\n  // 0x38\n  // Negative integer -1-n (two-byte uint16_t for n follows)\n  UINT_N_16,\n  // 0x39\n  // Negative integer -1-n (four-byte uint32_t for nfollows)\n  UINT_N_32,\n  // 0x3a\n  // Negative integer -1-n (eight-byte uint64_t for n follows)\n  UINT_N_64,\n  // 0x3b\n  ERROR,\n  // 0x3c\n  ERROR,\n  // 0x3d\n  ERROR,\n  // 0x3e\n  ERROR,\n  // 0x3f\n  // byte string (0x00..0x17 bytes follow)\n  BYTE_STRING,\n  // 0x40\n  BYTE_STRING,\n  // 0x41\n  BYTE_STRING,\n  // 0x42\n  BYTE_STRING,\n  // 0x43\n  BYTE_STRING,\n  // 0x44\n  BYTE_STRING,\n  // 0x45\n  BYTE_STRING,\n  // 0x46\n  BYTE_STRING,\n  // 0x47\n  BYTE_STRING,\n  // 0x48\n  BYTE_STRING,\n  // 0x49\n  BYTE_STRING,\n  // 0x4A\n  BYTE_STRING,\n  // 0x4B\n  BYTE_STRING,\n  // 0x4C\n  BYTE_STRING,\n  // 0x4D\n  BYTE_STRING,\n  // 0x4E\n  BYTE_STRING,\n  // 0x4F\n  BYTE_STRING,\n  // 0x50\n  BYTE_STRING,\n  // 0x51\n  BYTE_STRING,\n  // 0x52\n  BYTE_STRING,\n  // 0x53\n  BYTE_STRING,\n  // 0x54\n  BYTE_STRING,\n  // 0x55\n  BYTE_STRING,\n  // 0x56\n  BYTE_STRING,\n  // 0x57\n  // byte string (one-byte uint8_t for n, and then n bytes follow)\n  BYTE_STRING_8,\n  // 0x58\n  // byte string (two-byte uint16_t for n, and then n bytes follow)\n  BYTE_STRING_16,\n  // 0x59\n  // byte string (four-byte uint32_t for n, and then n bytes follow)\n  BYTE_STRING_32,\n  // 0x5a\n  // byte string (eight-byte uint64_t for n, and then n bytes follow)\n  BYTE_STRING_64,\n  // 0x5b\n  ERROR,\n  // 0x5c\n  ERROR,\n  // 0x5d\n  ERROR,\n  // 0x5e\n  // byte string, byte strings follow, terminated by \"break\"\n  BYTE_STRING_BREAK,\n  // 0x5f\n  // UTF-8 string (0x00..0x17 bytes follow)\n  UTF8_STRING,\n  // 0x60\n  UTF8_STRING,\n  // 0x61\n  UTF8_STRING,\n  // 0x62\n  UTF8_STRING,\n  // 0x63\n  UTF8_STRING,\n  // 0x64\n  UTF8_STRING,\n  // 0x65\n  UTF8_STRING,\n  // 0x66\n  UTF8_STRING,\n  // 0x67\n  UTF8_STRING,\n  // 0x68\n  UTF8_STRING,\n  // 0x69\n  UTF8_STRING,\n  // 0x6A\n  UTF8_STRING,\n  // 0x6B\n  UTF8_STRING,\n  // 0x6C\n  UTF8_STRING,\n  // 0x6D\n  UTF8_STRING,\n  // 0x6E\n  UTF8_STRING,\n  // 0x6F\n  UTF8_STRING,\n  // 0x70\n  UTF8_STRING,\n  // 0x71\n  UTF8_STRING,\n  // 0x72\n  UTF8_STRING,\n  // 0x73\n  UTF8_STRING,\n  // 0x74\n  UTF8_STRING,\n  // 0x75\n  UTF8_STRING,\n  // 0x76\n  UTF8_STRING,\n  // 0x77\n  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n  UTF8_STRING_8,\n  // 0x78\n  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n  UTF8_STRING_16,\n  // 0x79\n  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n  UTF8_STRING_32,\n  // 0x7a\n  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n  UTF8_STRING_64,\n  // 0x7b\n  // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n  ERROR,\n  // 0x7c\n  ERROR,\n  // 0x7d\n  ERROR,\n  // 0x7e\n  UTF8_STRING_BREAK,\n  // 0x7f\n  // array (0x00..0x17 data items follow)\n  ARRAY,\n  // 0x80\n  ARRAY,\n  // 0x81\n  ARRAY,\n  // 0x82\n  ARRAY,\n  // 0x83\n  ARRAY,\n  // 0x84\n  ARRAY,\n  // 0x85\n  ARRAY,\n  // 0x86\n  ARRAY,\n  // 0x87\n  ARRAY,\n  // 0x88\n  ARRAY,\n  // 0x89\n  ARRAY,\n  // 0x8A\n  ARRAY,\n  // 0x8B\n  ARRAY,\n  // 0x8C\n  ARRAY,\n  // 0x8D\n  ARRAY,\n  // 0x8E\n  ARRAY,\n  // 0x8F\n  ARRAY,\n  // 0x90\n  ARRAY,\n  // 0x91\n  ARRAY,\n  // 0x92\n  ARRAY,\n  // 0x93\n  ARRAY,\n  // 0x94\n  ARRAY,\n  // 0x95\n  ARRAY,\n  // 0x96\n  ARRAY,\n  // 0x97\n  // array (one-byte uint8_t fo, and then n data items follow)\n  ARRAY_8,\n  // 0x98\n  // array (two-byte uint16_t for n, and then n data items follow)\n  ARRAY_16,\n  // 0x99\n  // array (four-byte uint32_t for n, and then n data items follow)\n  ARRAY_32,\n  // 0x9a\n  // array (eight-byte uint64_t for n, and then n data items follow)\n  ARRAY_64,\n  // 0x9b\n  // array, data items follow, terminated by \"break\"\n  ERROR,\n  // 0x9c\n  ERROR,\n  // 0x9d\n  ERROR,\n  // 0x9e\n  ARRAY_BREAK,\n  // 0x9f\n  // map (0x00..0x17 pairs of data items follow)\n  MAP,\n  // 0xa0\n  MAP,\n  // 0xa1\n  MAP,\n  // 0xa2\n  MAP,\n  // 0xa3\n  MAP,\n  // 0xa4\n  MAP,\n  // 0xa5\n  MAP,\n  // 0xa6\n  MAP,\n  // 0xa7\n  MAP,\n  // 0xa8\n  MAP,\n  // 0xa9\n  MAP,\n  // 0xaA\n  MAP,\n  // 0xaB\n  MAP,\n  // 0xaC\n  MAP,\n  // 0xaD\n  MAP,\n  // 0xaE\n  MAP,\n  // 0xaF\n  MAP,\n  // 0xb0\n  MAP,\n  // 0xb1\n  MAP,\n  // 0xb2\n  MAP,\n  // 0xb3\n  MAP,\n  // 0xb4\n  MAP,\n  // 0xb5\n  MAP,\n  // 0xb6\n  MAP,\n  // 0xb7\n  // map (one-byte uint8_t for n, and then n pairs of data items follow)\n  MAP_8,\n  // 0xb8\n  // map (two-byte uint16_t for n, and then n pairs of data items follow)\n  MAP_16,\n  // 0xb9\n  // map (four-byte uint32_t for n, and then n pairs of data items follow)\n  MAP_32,\n  // 0xba\n  // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n  MAP_64,\n  // 0xbb\n  ERROR,\n  // 0xbc\n  ERROR,\n  // 0xbd\n  ERROR,\n  // 0xbe\n  // map, pairs of data items follow, terminated by \"break\"\n  MAP_BREAK,\n  // 0xbf\n  // Text-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN,\n  // 0xc0\n  // Epoch-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN,\n  // 0xc1\n  // Positive bignum (data item \"byte string\" follows)\n  TAG_KNOWN,\n  // 0xc2\n  // Negative bignum (data item \"byte string\" follows)\n  TAG_KNOWN,\n  // 0xc3\n  // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN,\n  // 0xc4\n  // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN,\n  // 0xc5\n  // (tagged item)\n  TAG_UNASSIGNED,\n  // 0xc6\n  TAG_UNASSIGNED,\n  // 0xc7\n  TAG_UNASSIGNED,\n  // 0xc8\n  TAG_UNASSIGNED,\n  // 0xc9\n  TAG_UNASSIGNED,\n  // 0xca\n  TAG_UNASSIGNED,\n  // 0xcb\n  TAG_UNASSIGNED,\n  // 0xcc\n  TAG_UNASSIGNED,\n  // 0xcd\n  TAG_UNASSIGNED,\n  // 0xce\n  TAG_UNASSIGNED,\n  // 0xcf\n  TAG_UNASSIGNED,\n  // 0xd0\n  TAG_UNASSIGNED,\n  // 0xd1\n  TAG_UNASSIGNED,\n  // 0xd2\n  TAG_UNASSIGNED,\n  // 0xd3\n  TAG_UNASSIGNED,\n  // 0xd4\n  // Expected Conversion (data item follows; see Section 2.4.4.2)\n  TAG_UNASSIGNED,\n  // 0xd5\n  TAG_UNASSIGNED,\n  // 0xd6\n  TAG_UNASSIGNED,\n  // 0xd7\n  // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n  TAG_MORE_1,\n  // 0xd8\n  TAG_MORE_2,\n  // 0xd9\n  TAG_MORE_4,\n  // 0xda\n  TAG_MORE_8,\n  // 0xdb\n  ERROR,\n  // 0xdc\n  ERROR,\n  // 0xdd\n  ERROR,\n  // 0xde\n  ERROR,\n  // 0xdf\n  // (simple value)\n  SIMPLE_UNASSIGNED,\n  // 0xe0\n  SIMPLE_UNASSIGNED,\n  // 0xe1\n  SIMPLE_UNASSIGNED,\n  // 0xe2\n  SIMPLE_UNASSIGNED,\n  // 0xe3\n  SIMPLE_UNASSIGNED,\n  // 0xe4\n  SIMPLE_UNASSIGNED,\n  // 0xe5\n  SIMPLE_UNASSIGNED,\n  // 0xe6\n  SIMPLE_UNASSIGNED,\n  // 0xe7\n  SIMPLE_UNASSIGNED,\n  // 0xe8\n  SIMPLE_UNASSIGNED,\n  // 0xe9\n  SIMPLE_UNASSIGNED,\n  // 0xea\n  SIMPLE_UNASSIGNED,\n  // 0xeb\n  SIMPLE_UNASSIGNED,\n  // 0xec\n  SIMPLE_UNASSIGNED,\n  // 0xed\n  SIMPLE_UNASSIGNED,\n  // 0xee\n  SIMPLE_UNASSIGNED,\n  // 0xef\n  SIMPLE_UNASSIGNED,\n  // 0xf0\n  SIMPLE_UNASSIGNED,\n  // 0xf1\n  SIMPLE_UNASSIGNED,\n  // 0xf2\n  SIMPLE_UNASSIGNED,\n  // 0xf3\n  // False\n  SIMPLE_FALSE,\n  // 0xf4\n  // True\n  SIMPLE_TRUE,\n  // 0xf5\n  // Null\n  SIMPLE_NULL,\n  // 0xf6\n  // Undefined\n  SIMPLE_UNDEFINED,\n  // 0xf7\n  // (simple value, one byte follows)\n  SIMPLE_BYTE,\n  // 0xf8\n  // Half-Precision Float (two-byte IEEE 754)\n  SIMPLE_FLOAT_HALF,\n  // 0xf9\n  // Single-Precision Float (four-byte IEEE 754)\n  SIMPLE_FLOAT_SINGLE,\n  // 0xfa\n  // Double-Precision Float (eight-byte IEEE 754)\n  SIMPLE_FLOAT_DOUBLE,\n  // 0xfb\n  ERROR,\n  // 0xfc\n  ERROR,\n  // 0xfd\n  ERROR,\n  // 0xfe\n  // \"break\" stop code\n  BREAK // 0xff\n  ];\n\n  // --\n\n  return {\n    parse: parse\n  };\n};", "'use strict';\n\nconst Bignumber = require('bignumber.js').BigNumber;\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n};\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n};\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n};\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n};\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n};\nexports.SHIFT32 = Math.pow(2, 32);\nexports.SHIFT16 = Math.pow(2, 16);\nexports.MAX_SAFE_HIGH = 0x1fffff;\nexports.NEG_ONE = new Bignumber(-1);\nexports.TEN = new Bignumber(10);\nexports.TWO = new Bignumber(2);\nexports.PARENT = {\n  ARRAY: 0,\n  OBJECT: 1,\n  MAP: 2,\n  TAG: 3,\n  BYTE_STRING: 4,\n  UTF8_STRING: 5\n};", "'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst Bignumber = require('bignumber.js').BigNumber;\nconst constants = require('./constants');\nconst SHIFT32 = constants.SHIFT32;\nconst SHIFT16 = constants.SHIFT16;\nconst MAX_SAFE_HIGH = 0x1fffff;\nexports.parseHalf = function parseHalf(buf) {\n  var exp, mant, sign;\n  sign = buf[0] & 0x80 ? -1 : 1;\n  exp = (buf[0] & 0x7C) >> 2;\n  mant = (buf[0] & 0x03) << 8 | buf[1];\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant;\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308);\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant);\n  }\n};\nfunction toHex(n) {\n  if (n < 16) {\n    return '0' + n.toString(16);\n  }\n  return n.toString(16);\n}\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i]);\n  }\n  return new Bignumber(res, 16);\n};\n\n// convert an Object into a Map\nexports.buildMap = obj => {\n  const res = new Map();\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]]);\n  }\n  return res;\n};\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g;\n};\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2);\n  const g = exports.buildInt32(g1, g2);\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g);\n  } else {\n    return f * SHIFT32 + g;\n  }\n};\nexports.writeHalf = function writeHalf(buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4);\n  u32.writeFloatBE(half, 0);\n  const u = u32.readUInt32BE(0);\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false;\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = u >> 16 & 0x8000; // top bit is sign\n  const exp = u >> 23 & 0xff; // then 5 bits of exponent\n  const mant = u & 0x7fffff;\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if (exp >= 113 && exp <= 142) {\n    s16 += (exp - 112 << 10) + (mant >> 13);\n\n    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n    //     if (mant & ((1 << (126 - exp)) - 1))\n    //       goto float32;         /* loss of precision */\n    //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if (exp >= 103 && exp < 113) {\n    if (mant & (1 << 126 - exp) - 1) {\n      return false;\n    }\n    s16 += mant + 0x800000 >> 126 - exp;\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n    //   } else\n    //     goto float32;           /* loss of range */\n  } else {\n    return false;\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0);\n  return true;\n};\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength;\n  var lenB = b[0].byteLength;\n  if (lenA > lenB) {\n    return 1;\n  }\n  if (lenB > lenA) {\n    return -1;\n  }\n  return a[0].compare(b[0]);\n};\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = x => {\n  return x === 0 && 1 / x < 0;\n};\nexports.nextPowerOf2 = n => {\n  let count = 0;\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & n - 1)) {\n    return n;\n  }\n  while (n !== 0) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n};", "'use strict';\n\nconst constants = require('./constants');\nconst MT = constants.MT;\nconst SIMPLE = constants.SIMPLE;\nconst SYMS = constants.SYMS;\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor(value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n    this.value = value;\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString() {\n    return 'simple(' + this.value + ')';\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect() {\n    return 'simple(' + this.value + ')';\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR(gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple(obj) {\n    return obj instanceof Simple;\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode(val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true;\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false;\n      case SIMPLE.TRUE:\n        return true;\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null;\n        } else {\n          return SYMS.NULL;\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined;\n        } else {\n          return SYMS.UNDEFINED;\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK');\n        }\n        return SYMS.BREAK;\n      default:\n        return new Simple(val);\n    }\n  }\n}\nmodule.exports = Simple;", "'use strict';\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor(tag, value, err) {\n    this.tag = tag;\n    this.value = value;\n    this.err = err;\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + typeof this.tag + ')');\n    }\n    if (this.tag < 0 || (this.tag | 0) !== this.tag) {\n      throw new Error('Tag must be a positive integer: ' + this.tag);\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString() {\n    return `${this.tag}(${JSON.stringify(this.value)})`;\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR(gen) {\n    gen._pushTag(this.tag);\n    return gen.pushAny(this.value);\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert(converters) {\n    var er, f;\n    f = converters != null ? converters[this.tag] : undefined;\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag];\n      if (typeof f !== 'function') {\n        return this;\n      }\n    }\n    try {\n      return f.call(Tagged, this.value);\n    } catch (error) {\n      er = error;\n      this.err = er;\n      return this;\n    }\n  }\n}\nmodule.exports = Tagged;", "'use strict';\n\nconst defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';\nconst URL = self.URL;\nclass URLWithLegacySupport {\n  constructor(url = '', base = defaultBase) {\n    this.super = new URL(url, base);\n    this.path = this.pathname + this.search;\n    this.auth = this.username && this.password ? this.username + ':' + this.password : null;\n    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;\n  }\n  get hash() {\n    return this.super.hash;\n  }\n  get host() {\n    return this.super.host;\n  }\n  get hostname() {\n    return this.super.hostname;\n  }\n  get href() {\n    return this.super.href;\n  }\n  get origin() {\n    return this.super.origin;\n  }\n  get password() {\n    return this.super.password;\n  }\n  get pathname() {\n    return this.super.pathname;\n  }\n  get port() {\n    return this.super.port;\n  }\n  get protocol() {\n    return this.super.protocol;\n  }\n  get search() {\n    return this.super.search;\n  }\n  get searchParams() {\n    return this.super.searchParams;\n  }\n  get username() {\n    return this.super.username;\n  }\n  set hash(hash) {\n    this.super.hash = hash;\n  }\n  set host(host) {\n    this.super.host = host;\n  }\n  set hostname(hostname) {\n    this.super.hostname = hostname;\n  }\n  set href(href) {\n    this.super.href = href;\n  }\n  set origin(origin) {\n    this.super.origin = origin;\n  }\n  set password(password) {\n    this.super.password = password;\n  }\n  set pathname(pathname) {\n    this.super.pathname = pathname;\n  }\n  set port(port) {\n    this.super.port = port;\n  }\n  set protocol(protocol) {\n    this.super.protocol = protocol;\n  }\n  set search(search) {\n    this.super.search = search;\n  }\n  set searchParams(searchParams) {\n    this.super.searchParams = searchParams;\n  }\n  set username(username) {\n    this.super.username = username;\n  }\n  createObjectURL(o) {\n    return this.super.createObjectURL(o);\n  }\n  revokeObjectURL(o) {\n    this.super.revokeObjectURL(o);\n  }\n  toJSON() {\n    return this.super.toJSON();\n  }\n  toString() {\n    return this.super.toString();\n  }\n  format() {\n    return this.toString();\n  }\n}\nfunction format(obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj);\n    return url.toString();\n  }\n  if (!(obj instanceof URL)) {\n    const userPass = obj.username && obj.password ? `${obj.username}:${obj.password}@` : '';\n    const auth = obj.auth ? obj.auth + '@' : '';\n    const port = obj.port ? ':' + obj.port : '';\n    const protocol = obj.protocol ? obj.protocol + '//' : '';\n    const host = obj.host || '';\n    const hostname = obj.hostname || '';\n    const search = obj.search || (obj.query ? '?' + obj.query : '');\n    const hash = obj.hash || '';\n    const pathname = obj.pathname || '';\n    const path = obj.path || pathname + search;\n    return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;\n  }\n}\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n};", "'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format\n} = require('./url');\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http';\n\n  // Check protocol map\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n  let urlParsed;\n  try {\n    urlParsed = new URLWithLegacySupport(url);\n  } catch (err) {\n    urlParsed = {};\n  }\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  });\n  return new URLWithLegacySupport(url, format(base)).toString();\n};", "'use strict';\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url');\nconst relative = require('./src/relative');\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n};", "'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst ieee754 = require('ieee754');\nconst Bignumber = require('bignumber.js').BigNumber;\nconst parser = require('./decoder.asm');\nconst utils = require('./utils');\nconst c = require('./constants');\nconst Simple = require('./simple');\nconst Tagged = require('./tagged');\nconst {\n  URL\n} = require('iso-url');\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000;\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size);\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size);\n    this._heap8 = new Uint8Array(this._heap);\n    this._buffer = Buffer.from(this._heap);\n    this._reset();\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: val => new Date(val),\n      1: val => new Date(val * 1000),\n      2: val => utils.arrayBufferToBignumber(val),\n      3: val => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: v => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1]);\n      },\n      5: v => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1]);\n      },\n      32: val => new URL(val),\n      35: val => new RegExp(val)\n    }, opts.tags);\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      // eslint-disable-next-line no-console\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap);\n  }\n  get _depth() {\n    return this._parents.length;\n  }\n  get _currentParent() {\n    return this._parents[this._depth - 1];\n  }\n  get _ref() {\n    return this._currentParent.ref;\n  }\n\n  // Finish the current parent\n  _closeParent() {\n    var p = this._parents.pop();\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`);\n    }\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(this.createTag(p.ref[0], p.ref[1]));\n        break;\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length));\n        break;\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length));\n        break;\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map');\n        }\n        this._push(this.createMap(p.ref, p.length));\n        break;\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map');\n        }\n        this._push(this.createObject(p.ref, p.length));\n        break;\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length));\n        break;\n      default:\n        break;\n    }\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec();\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec() {\n    const p = this._currentParent;\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return;\n    }\n    p.length--;\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent();\n    }\n  }\n\n  // Push any value to the current parent\n  _push(val, hasChildren) {\n    const p = this._currentParent;\n    p.values++;\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val;\n        } else {\n          this._ref.push(val);\n        }\n        this._dec();\n        break;\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val;\n          p.tmpKey = null;\n          this._dec();\n        } else {\n          p.tmpKey = val;\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP;\n            p.ref = utils.buildMap(p.ref);\n          }\n        }\n        break;\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val);\n          p.tmpKey = null;\n          this._dec();\n        } else {\n          p.tmpKey = val;\n        }\n        break;\n      case c.PARENT.TAG:\n        this._ref.push(val);\n        if (!hasChildren) {\n          this._dec();\n        }\n        break;\n      default:\n        throw new Error('Unknown parent type');\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent(obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    };\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset() {\n    this._res = [];\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }];\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag(tagNumber, value) {\n    const typ = this._knownTags[tagNumber];\n    if (!typ) {\n      return new Tagged(tagNumber, value);\n    }\n    return typ(value);\n  }\n  createMap(obj, len) {\n    return obj;\n  }\n  createObject(obj, len) {\n    return obj;\n  }\n  createArray(arr, len) {\n    return arr;\n  }\n  createByteString(raw, len) {\n    return Buffer.concat(raw);\n  }\n  createByteStringFromHeap(start, end) {\n    if (start === end) {\n      return Buffer.alloc(0);\n    }\n    return Buffer.from(this._heap.slice(start, end));\n  }\n  createInt(val) {\n    return val;\n  }\n  createInt32(f, g) {\n    return utils.buildInt32(f, g);\n  }\n  createInt64(f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2);\n  }\n  createFloat(val) {\n    return val;\n  }\n  createFloatSingle(a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4);\n  }\n  createFloatDouble(a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8);\n  }\n  createInt32Neg(f, g) {\n    return -1 - utils.buildInt32(f, g);\n  }\n  createInt64Neg(f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2);\n    const g = utils.buildInt32(g1, g2);\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g));\n    }\n    return -1 - (f * c.SHIFT32 + g);\n  }\n  createTrue() {\n    return true;\n  }\n  createFalse() {\n    return false;\n  }\n  createNull() {\n    return null;\n  }\n  createUndefined() {\n    return undefined;\n  }\n  createInfinity() {\n    return Infinity;\n  }\n  createInfinityNeg() {\n    return -Infinity;\n  }\n  createNaN() {\n    return NaN;\n  }\n  createNaNNeg() {\n    return -NaN;\n  }\n  createUtf8String(raw, len) {\n    return raw.join('');\n  }\n  createUtf8StringFromHeap(start, end) {\n    if (start === end) {\n      return '';\n    }\n    return this._buffer.toString('utf8', start, end);\n  }\n  createSimpleUnassigned(val) {\n    return new Simple(val);\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt(val) {\n    this._push(this.createInt(val));\n  }\n  pushInt32(f, g) {\n    this._push(this.createInt32(f, g));\n  }\n  pushInt64(f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2));\n  }\n  pushFloat(val) {\n    this._push(this.createFloat(val));\n  }\n  pushFloatSingle(a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d));\n  }\n  pushFloatDouble(a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));\n  }\n  pushInt32Neg(f, g) {\n    this._push(this.createInt32Neg(f, g));\n  }\n  pushInt64Neg(f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2));\n  }\n  pushTrue() {\n    this._push(this.createTrue());\n  }\n  pushFalse() {\n    this._push(this.createFalse());\n  }\n  pushNull() {\n    this._push(this.createNull());\n  }\n  pushUndefined() {\n    this._push(this.createUndefined());\n  }\n  pushInfinity() {\n    this._push(this.createInfinity());\n  }\n  pushInfinityNeg() {\n    this._push(this.createInfinityNeg());\n  }\n  pushNaN() {\n    this._push(this.createNaN());\n  }\n  pushNaNNeg() {\n    this._push(this.createNaNNeg());\n  }\n  pushArrayStart() {\n    this._createParent([], c.PARENT.ARRAY, -1);\n  }\n  pushArrayStartFixed(len) {\n    this._createArrayStartFixed(len);\n  }\n  pushArrayStartFixed32(len1, len2) {\n    const len = utils.buildInt32(len1, len2);\n    this._createArrayStartFixed(len);\n  }\n  pushArrayStartFixed64(len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4);\n    this._createArrayStartFixed(len);\n  }\n  pushObjectStart() {\n    this._createObjectStartFixed(-1);\n  }\n  pushObjectStartFixed(len) {\n    this._createObjectStartFixed(len);\n  }\n  pushObjectStartFixed32(len1, len2) {\n    const len = utils.buildInt32(len1, len2);\n    this._createObjectStartFixed(len);\n  }\n  pushObjectStartFixed64(len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4);\n    this._createObjectStartFixed(len);\n  }\n  pushByteStringStart() {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    };\n  }\n  pushByteString(start, end) {\n    this._push(this.createByteStringFromHeap(start, end));\n  }\n  pushUtf8StringStart() {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    };\n  }\n  pushUtf8String(start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end));\n  }\n  pushSimpleUnassigned(val) {\n    this._push(this.createSimpleUnassigned(val));\n  }\n  pushTagStart(tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    };\n  }\n  pushTagStart4(f, g) {\n    this.pushTagStart(utils.buildInt32(f, g));\n  }\n  pushTagStart8(f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2));\n  }\n  pushTagUnassigned(tagNumber) {\n    this._push(this.createTag(tagNumber));\n  }\n  pushBreak() {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break');\n    }\n    this._closeParent();\n  }\n  _createObjectStartFixed(len) {\n    if (len === 0) {\n      this._push(this.createObject({}));\n      return;\n    }\n    this._createParent({}, c.PARENT.OBJECT, len);\n  }\n  _createArrayStartFixed(len) {\n    if (len === 0) {\n      this._push(this.createArray([]));\n      return;\n    }\n    this._createParent(new Array(len), c.PARENT.ARRAY, len);\n  }\n  _decode(input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short');\n    }\n    this._reset();\n    this._heap8.set(input);\n    const code = this.parser.parse(input.byteLength);\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent();\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting');\n      }\n    }\n    if (code > 0) {\n      throw new Error('Failed to parse');\n    }\n    if (this._res.length === 0) {\n      throw new Error('No valid result');\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst(input) {\n    this._decode(input);\n    return this._res[0];\n  }\n  decodeAll(input) {\n    this._decode(input);\n    return this._res;\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode(input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex');\n    }\n    const dec = new Decoder({\n      size: input.length\n    });\n    return dec.decodeFirst(input);\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll(input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex');\n    }\n    const dec = new Decoder({\n      size: input.length\n    });\n    return dec.decodeAll(input);\n  }\n}\nDecoder.decodeFirst = Decoder.decode;\nmodule.exports = Decoder;", "'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst Decoder = require('./decoder');\nconst utils = require('./utils');\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag(tagNumber, value) {\n    return `${tagNumber}(${value})`;\n  }\n  createInt(val) {\n    return super.createInt(val).toString();\n  }\n  createInt32(f, g) {\n    return super.createInt32(f, g).toString();\n  }\n  createInt64(f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString();\n  }\n  createInt32Neg(f, g) {\n    return super.createInt32Neg(f, g).toString();\n  }\n  createInt64Neg(f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString();\n  }\n  createTrue() {\n    return 'true';\n  }\n  createFalse() {\n    return 'false';\n  }\n  createFloat(val) {\n    const fl = super.createFloat(val);\n    if (utils.isNegativeZero(val)) {\n      return '-0_1';\n    }\n    return `${fl}_1`;\n  }\n  createFloatSingle(a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d);\n    return `${fl}_2`;\n  }\n  createFloatDouble(a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);\n    return `${fl}_3`;\n  }\n  createByteString(raw, len) {\n    const val = raw.join(', ');\n    if (len === -1) {\n      return `(_ ${val})`;\n    }\n    return `h'${val}`;\n  }\n  createByteStringFromHeap(start, end) {\n    const val = Buffer.from(super.createByteStringFromHeap(start, end)).toString('hex');\n    return `h'${val}'`;\n  }\n  createInfinity() {\n    return 'Infinity_1';\n  }\n  createInfinityNeg() {\n    return '-Infinity_1';\n  }\n  createNaN() {\n    return 'NaN_1';\n  }\n  createNaNNeg() {\n    return '-NaN_1';\n  }\n  createNull() {\n    return 'null';\n  }\n  createUndefined() {\n    return 'undefined';\n  }\n  createSimpleUnassigned(val) {\n    return `simple(${val})`;\n  }\n  createArray(arr, len) {\n    const val = super.createArray(arr, len);\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`;\n    }\n    return `[${val.join(', ')}]`;\n  }\n  createMap(map, len) {\n    const val = super.createMap(map);\n    const list = Array.from(val.keys()).reduce(collectObject(val), '');\n    if (len === -1) {\n      return `{_ ${list}}`;\n    }\n    return `{${list}}`;\n  }\n  createObject(obj, len) {\n    const val = super.createObject(obj);\n    const map = Object.keys(val).reduce(collectObject(val), '');\n    if (len === -1) {\n      return `{_ ${map}}`;\n    }\n    return `{${map}}`;\n  }\n  createUtf8String(raw, len) {\n    const val = raw.join(', ');\n    if (len === -1) {\n      return `(_ ${val})`;\n    }\n    return `\"${val}\"`;\n  }\n  createUtf8StringFromHeap(start, end) {\n    const val = Buffer.from(super.createUtf8StringFromHeap(start, end)).toString('utf8');\n    return `\"${val}\"`;\n  }\n  static diagnose(input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex');\n    }\n    const dec = new Diagnose();\n    return dec.decodeFirst(input);\n  }\n}\nmodule.exports = Diagnose;\nfunction collectObject(val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`;\n    }\n    return `${key}: ${val[key]}`;\n  };\n}", "'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst {\n  URL\n} = require('iso-url');\nconst Bignumber = require('bignumber.js').BigNumber;\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SHIFT32 = constants.SHIFT32;\nconst SYMS = constants.SYMS;\nconst TAG = constants.TAG;\nconst HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;\nconst FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;\nconst DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;\nconst TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;\nconst FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;\nconst UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;\nconst NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;\nconst MAXINT_BN = new Bignumber('0x20000000000000');\nconst BUF_NAN = Buffer.from('f97e00', 'hex');\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex');\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex');\nfunction toType(obj) {\n  // [object Type]\n  // --------8---1\n  return {}.toString.call(obj).slice(8, -1);\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor(options) {\n    options = options || {};\n    this.streaming = typeof options.stream === 'function';\n    this.onData = options.stream;\n    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];\n    const addTypes = options.genTypes || [];\n    const len = addTypes.length;\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(addTypes[i][0], addTypes[i][1]);\n    }\n    this._reset();\n  }\n  addSemanticType(type, fun) {\n    const len = this.semanticTypes.length;\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0];\n      if (typ === type) {\n        const old = this.semanticTypes[i][1];\n        this.semanticTypes[i][1] = fun;\n        return old;\n      }\n    }\n    this.semanticTypes.push([type, fun]);\n    return null;\n  }\n  push(val) {\n    if (!val) {\n      return true;\n    }\n    this.result[this.offset] = val;\n    this.resultMethod[this.offset] = 0;\n    this.resultLength[this.offset] = val.length;\n    this.offset++;\n    if (this.streaming) {\n      this.onData(this.finalize());\n    }\n    return true;\n  }\n  pushWrite(val, method, len) {\n    this.result[this.offset] = val;\n    this.resultMethod[this.offset] = method;\n    this.resultLength[this.offset] = len;\n    this.offset++;\n    if (this.streaming) {\n      this.onData(this.finalize());\n    }\n    return true;\n  }\n  _pushUInt8(val) {\n    return this.pushWrite(val, 1, 1);\n  }\n  _pushUInt16BE(val) {\n    return this.pushWrite(val, 2, 2);\n  }\n  _pushUInt32BE(val) {\n    return this.pushWrite(val, 3, 4);\n  }\n  _pushDoubleBE(val) {\n    return this.pushWrite(val, 4, 8);\n  }\n  _pushNaN() {\n    return this.push(BUF_NAN);\n  }\n  _pushInfinity(obj) {\n    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;\n    return this.push(half);\n  }\n  _pushFloat(obj) {\n    const b2 = Buffer.allocUnsafe(2);\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2);\n      }\n    }\n    const b4 = Buffer.allocUnsafe(4);\n    b4.writeFloatBE(obj, 0);\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4);\n    }\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);\n  }\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5;\n    if (obj < 24) {\n      return this._pushUInt8(m | obj);\n    }\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);\n    }\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);\n    }\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);\n    }\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);\n    }\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig);\n    }\n    return this._pushFloat(obj);\n  }\n  _pushIntNum(obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj);\n    } else {\n      return this._pushInt(obj, MT.POS_INT);\n    }\n  }\n  _pushNumber(obj) {\n    switch (false) {\n      case obj === obj:\n        // eslint-disable-line\n        return this._pushNaN(obj);\n      case isFinite(obj):\n        return this._pushInfinity(obj);\n      case obj % 1 !== 0:\n        return this._pushIntNum(obj);\n      default:\n        return this._pushFloat(obj);\n    }\n  }\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8');\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);\n  }\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE);\n  }\n  _pushUndefined(obj) {\n    return this._pushUInt8(UNDEFINED);\n  }\n  _pushArray(gen, obj) {\n    const len = obj.length;\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG);\n  }\n  _pushDate(gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));\n  }\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);\n  }\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice());\n  }\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);\n  }\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false;\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());\n  }\n  _pushBigint(obj) {\n    let tag = TAG.POS_BIGINT;\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1);\n      tag = TAG.NEG_BIGINT;\n    }\n    let str = obj.toString(16);\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN();\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj);\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {\n      return false;\n    }\n    const dec = obj.decimalPlaces();\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));\n    if (!gen._pushIntNum(-dec)) {\n      return false;\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber());\n    } else {\n      return gen._pushBigint(slide);\n    }\n  }\n  _pushMap(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false;\n    }\n    return this._pushRawMap(obj.size, Array.from(obj));\n  }\n  _pushObject(obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL);\n    }\n    var len = this.semanticTypes.length;\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj);\n      }\n    }\n    var f = obj.encodeCBOR;\n    if (typeof f === 'function') {\n      return f.call(obj, this);\n    }\n    var keys = Object.keys(obj);\n    var keyLength = keys.length;\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false;\n    }\n    return this._pushRawMap(keyLength, keys.map(k => [k, obj[k]]));\n  }\n  _pushRawMap(len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0]);\n      return a;\n    }).sort(utils.keySorter);\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false;\n      }\n      if (!this.pushAny(map[j][1])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write(obj) {\n    return this.pushAny(obj);\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny(obj) {\n    var typ = toType(obj);\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj);\n      case 'String':\n        return this._pushString(obj);\n      case 'Boolean':\n        return this._pushBoolean(obj);\n      case 'Object':\n        return this._pushObject(obj);\n      case 'Array':\n        return this._pushArray(this, obj);\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));\n      case 'Null':\n        return this._pushUInt8(NULL);\n      case 'Undefined':\n        return this._pushUndefined(obj);\n      case 'Map':\n        return this._pushMap(this, obj);\n      case 'Set':\n        return this._pushSet(this, obj);\n      case 'URL':\n        return this._pushUrl(this, obj);\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj);\n      case 'Date':\n        return this._pushDate(this, obj);\n      case 'RegExp':\n        return this._pushRegexp(this, obj);\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null);\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined);\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString());\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));\n    }\n  }\n  finalize() {\n    if (this.offset === 0) {\n      return null;\n    }\n    var result = this.result;\n    var resultLength = this.resultLength;\n    var resultMethod = this.resultMethod;\n    var offset = this.offset;\n\n    // Determine the size of the buffer\n    var size = 0;\n    var i = 0;\n    for (; i < offset; i++) {\n      size += resultLength[i];\n    }\n    var res = Buffer.allocUnsafe(size);\n    var index = 0;\n    var length = 0;\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i];\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index);\n          break;\n        case 1:\n          res.writeUInt8(result[i], index, true);\n          break;\n        case 2:\n          res.writeUInt16BE(result[i], index, true);\n          break;\n        case 3:\n          res.writeUInt32BE(result[i], index, true);\n          break;\n        case 4:\n          res.writeDoubleBE(result[i], index, true);\n          break;\n        case 5:\n          res.write(result[i], index, length, 'utf8');\n          break;\n        default:\n          throw new Error('unkown method');\n      }\n      index += length;\n    }\n    var tmp = res;\n    this._reset();\n    return tmp;\n  }\n  _reset() {\n    this.result = [];\n    this.resultMethod = [];\n    this.resultLength = [];\n    this.offset = 0;\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode(o) {\n    const enc = new Encoder();\n    const ret = enc.pushAny(o);\n    if (!ret) {\n      throw new Error('Failed to encode input');\n    }\n    return enc.finalize();\n  }\n}\nmodule.exports = Encoder;", "'use strict';\n\n// exports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose');\nexports.Decoder = require('./decoder');\nexports.Encoder = require('./encoder');\nexports.Simple = require('./simple');\nexports.Tagged = require('./tagged');\n\n// exports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll;\nexports.decodeFirst = exports.Decoder.decodeFirst;\nexports.diagnose = exports.Diagnose.diagnose;\nexports.encode = exports.Encoder.encode;\nexports.decode = exports.Decoder.decode;\nexports.leveldb = {\n  decode: exports.Decoder.decodeAll,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n};", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst MAX_U64_NUMBER = 0x20000000000000;\nfunction _concat(a, ...args) {\n  const newBuffer = new Uint8Array(a.byteLength + args.reduce((acc, b) => acc + b.byteLength, 0));\n  newBuffer.set(new Uint8Array(a), 0);\n  let i = a.byteLength;\n  for (const b of args) {\n    newBuffer.set(new Uint8Array(b), i);\n    i += b.byteLength;\n  }\n  return newBuffer.buffer;\n}\nfunction _serializeValue(major, minor, value) {\n  // Remove everything that's not an hexadecimal character. These are not\n  // considered errors since the value was already validated and they might\n  // be number decimals or sign.\n  value = value.replace(/[^0-9a-fA-F]/g, \"\");\n  // Create the buffer from the value with left padding with 0.\n  const length = 2 ** (minor - 24 /* Int8 */);\n  value = value.slice(-length * 2).padStart(length * 2, \"0\");\n  const bytes = [(major << 5) + minor].concat(value.match(/../g).map(byte => parseInt(byte, 16)));\n  return new Uint8Array(bytes).buffer;\n}\nfunction _serializeNumber(major, value) {\n  if (value < 24) {\n    return new Uint8Array([(major << 5) + value]).buffer;\n  } else {\n    const minor = value <= 0xff ? 24 /* Int8 */ : value <= 0xffff ? 25 /* Int16 */ : value <= 0xffffffff ? 26 /* Int32 */ : 27 /* Int64 */;\n    return _serializeValue(major, minor, value.toString(16));\n  }\n}\nfunction _serializeString(str) {\n  const utf8 = [];\n  for (let i = 0; i < str.length; i++) {\n    let charcode = str.charCodeAt(i);\n    if (charcode < 0x80) {\n      utf8.push(charcode);\n    } else if (charcode < 0x800) {\n      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    } else {\n      // Surrogate pair\n      i++;\n      charcode = (charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff;\n      utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    }\n  }\n  return _concat(new Uint8Array(_serializeNumber(3 /* TextString */, str.length)), new Uint8Array(utf8));\n}\n/**\n * Tag a value.\n */\nfunction tagged(tag, value) {\n  if (tag == 0xd9d9f7) {\n    return _concat(new Uint8Array([0xd9, 0xd9, 0xf7]), value);\n  }\n  if (tag < 24) {\n    return _concat(new Uint8Array([(6 /* Tag */ << 5) + tag]), value);\n  } else {\n    const minor = tag <= 0xff ? 24 /* Int8 */ : tag <= 0xffff ? 25 /* Int16 */ : tag <= 0xffffffff ? 26 /* Int32 */ : 27 /* Int64 */;\n    const length = 2 ** (minor - 24 /* Int8 */);\n    const value = tag.toString(16).slice(-length * 2).padStart(length * 2, \"0\");\n    const bytes = [(6 /* Tag */ << 5) + minor].concat(value.match(/../g).map(byte => parseInt(byte, 16)));\n    return new Uint8Array(bytes).buffer;\n  }\n}\nexports.tagged = tagged;\n/**\n * Set the raw bytes contained by this value. This should only be used with another\n * CborValue, or if you are implementing extensions to CBOR.\n * @param bytes A buffer containing the value.\n */\nfunction raw(bytes) {\n  return new Uint8Array(bytes).buffer;\n}\nexports.raw = raw;\n/**\n * Encode a number that is between [0, 23].\n * @param n\n */\nfunction uSmall(n) {\n  if (isNaN(n)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  n = Math.min(Math.max(0, n), 23); // Clamp it.\n  const bytes = [(0 /* UnsignedInteger */ << 5) + n];\n  return new Uint8Array(bytes).buffer;\n}\nexports.uSmall = uSmall;\nfunction u8(u8, radix) {\n  // Force u8 into a number, and validate it.\n  u8 = parseInt(\"\" + u8, radix);\n  if (isNaN(u8)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u8 = Math.min(Math.max(0, u8), 0xff); // Clamp it.\n  u8 = u8.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 24 /* Int8 */, u8);\n}\nexports.u8 = u8;\nfunction u16(u16, radix) {\n  // Force u16 into a number, and validate it.\n  u16 = parseInt(\"\" + u16, radix);\n  if (isNaN(u16)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u16 = Math.min(Math.max(0, u16), 0xffff); // Clamp it.\n  u16 = u16.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 25 /* Int16 */, u16);\n}\nexports.u16 = u16;\nfunction u32(u32, radix) {\n  // Force u32 into a number, and validate it.\n  u32 = parseInt(\"\" + u32, radix);\n  if (isNaN(u32)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u32 = Math.min(Math.max(0, u32), 0xffffffff); // Clamp it.\n  u32 = u32.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 26 /* Int32 */, u32);\n}\nexports.u32 = u32;\nfunction u64(u64, radix) {\n  // Special consideration for numbers that might be larger than expected.\n  if (typeof u64 == \"string\" && radix == 16) {\n    // This is the only case where we guarantee we'll encode the number directly.\n    // Validate it's all hexadecimal first.\n    if (u64.match(/[^0-9a-fA-F]/)) {\n      throw new RangeError(\"Invalid number.\");\n    }\n    return _serializeValue(0 /* UnsignedInteger */, 27 /* Int64 */, u64);\n  }\n  // Force u64 into a number, and validate it.\n  u64 = parseInt(\"\" + u64, radix);\n  if (isNaN(u64)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u64 = Math.min(Math.max(0, u64), MAX_U64_NUMBER); // Clamp it to actual limit.\n  u64 = u64.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 27 /* Int64 */, u64);\n}\nexports.u64 = u64;\n/**\n * Encode a negative number that is between [-24, -1].\n */\nfunction iSmall(n) {\n  if (isNaN(n)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  if (n === 0) {\n    return uSmall(0);\n  }\n  // Negative n, clamped to [1, 24], minus 1 (there's no negative 0).\n  n = Math.min(Math.max(0, -n), 24) - 1;\n  const bytes = [(1 /* SignedInteger */ << 5) + n];\n  return new Uint8Array(bytes).buffer;\n}\nexports.iSmall = iSmall;\nfunction i8(i8, radix) {\n  // Force i8 into a number, and validate it.\n  i8 = parseInt(\"\" + i8, radix);\n  if (isNaN(i8)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  // Negative n, clamped, minus 1 (there's no negative 0).\n  i8 = Math.min(Math.max(0, -i8 - 1), 0xff);\n  i8 = i8.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 24 /* Int8 */, i8);\n}\nexports.i8 = i8;\nfunction i16(i16, radix) {\n  // Force i16 into a number, and validate it.\n  i16 = parseInt(\"\" + i16, radix);\n  if (isNaN(i16)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  // Negative n, clamped, minus 1 (there's no negative 0).\n  i16 = Math.min(Math.max(0, -i16 - 1), 0xffff);\n  i16 = i16.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 25 /* Int16 */, i16);\n}\nexports.i16 = i16;\nfunction i32(i32, radix) {\n  // Force i32 into a number, and validate it.\n  i32 = parseInt(\"\" + i32, radix);\n  if (isNaN(i32)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  // Negative n, clamped, minus 1 (there's no negative 0).\n  i32 = Math.min(Math.max(0, -i32 - 1), 0xffffffff);\n  i32 = i32.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 26 /* Int32 */, i32);\n}\nexports.i32 = i32;\nfunction i64(i64, radix) {\n  // Special consideration for numbers that might be larger than expected.\n  if (typeof i64 == \"string\" && radix == 16) {\n    if (i64.startsWith(\"-\")) {\n      i64 = i64.slice(1);\n    } else {\n      // Clamp it.\n      i64 = \"0\";\n    }\n    // This is the only case where we guarantee we'll encode the number directly.\n    // Validate it's all hexadecimal first.\n    if (i64.match(/[^0-9a-fA-F]/) || i64.length > 16) {\n      throw new RangeError(\"Invalid number.\");\n    }\n    // We need to do -1 to the number.\n    let done = false;\n    let newI64 = i64.split(\"\").reduceRight((acc, x) => {\n      if (done) {\n        return x + acc;\n      }\n      let n = parseInt(x, 16) - 1;\n      if (n >= 0) {\n        done = true;\n        return n.toString(16) + acc;\n      } else {\n        return \"f\" + acc;\n      }\n    }, \"\");\n    if (!done) {\n      // This number was 0.\n      return u64(0);\n    }\n    return _serializeValue(1 /* SignedInteger */, 27 /* Int64 */, newI64);\n  }\n  // Force i64 into a number, and validate it.\n  i64 = parseInt(\"\" + i64, radix);\n  if (isNaN(i64)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  i64 = Math.min(Math.max(0, -i64 - 1), 0x20000000000000); // Clamp it to actual.\n  i64 = i64.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 27 /* Int64 */, i64);\n}\nexports.i64 = i64;\n/**\n * Encode a number using the smallest amount of bytes, by calling the methods\n * above. e.g. If the number fits in a u8, it will use that.\n */\nfunction number(n) {\n  if (n >= 0) {\n    if (n < 24) {\n      return uSmall(n);\n    } else if (n <= 0xff) {\n      return u8(n);\n    } else if (n <= 0xffff) {\n      return u16(n);\n    } else if (n <= 0xffffffff) {\n      return u32(n);\n    } else {\n      return u64(n);\n    }\n  } else {\n    if (n >= -24) {\n      return iSmall(n);\n    } else if (n >= -0xff) {\n      return i8(n);\n    } else if (n >= -0xffff) {\n      return i16(n);\n    } else if (n >= -0xffffffff) {\n      return i32(n);\n    } else {\n      return i64(n);\n    }\n  }\n}\nexports.number = number;\n/**\n * Encode a byte array. This is different than the `raw()` method.\n */\nfunction bytes(bytes) {\n  return _concat(_serializeNumber(2 /* ByteString */, bytes.byteLength), bytes);\n}\nexports.bytes = bytes;\n/**\n * Encode a JavaScript string.\n */\nfunction string(str) {\n  return _serializeString(str);\n}\nexports.string = string;\n/**\n * Encode an array of cbor values.\n */\nfunction array(items) {\n  return _concat(_serializeNumber(4 /* Array */, items.length), ...items);\n}\nexports.array = array;\n/**\n * Encode a map of key-value pairs. The keys are string, and the values are CBOR\n * encoded.\n */\nfunction map(items, stable = false) {\n  if (!(items instanceof Map)) {\n    items = new Map(Object.entries(items));\n  }\n  let entries = Array.from(items.entries());\n  if (stable) {\n    entries = entries.sort(([keyA], [keyB]) => keyA.localeCompare(keyB));\n  }\n  return _concat(_serializeNumber(5 /* Map */, items.size), ...entries.map(([k, v]) => _concat(_serializeString(k), v)));\n}\nexports.map = map;\n/**\n * Encode a single (32 bits) precision floating point number.\n */\nfunction singleFloat(f) {\n  const single = new Float32Array([f]);\n  return _concat(new Uint8Array([(7 /* SimpleValue */ << 5) + 26]), new Uint8Array(single.buffer));\n}\nexports.singleFloat = singleFloat;\n/**\n * Encode a double (64 bits) precision floating point number.\n */\nfunction doubleFloat(f) {\n  const single = new Float64Array([f]);\n  return _concat(new Uint8Array([(7 /* SimpleValue */ << 5) + 27]), new Uint8Array(single.buffer));\n}\nexports.doubleFloat = doubleFloat;\nfunction bool(v) {\n  return v ? true_() : false_();\n}\nexports.bool = bool;\n/**\n * Encode the boolean true.\n */\nfunction true_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 21]));\n}\nexports.true_ = true_;\n/**\n * Encode the boolean false.\n */\nfunction false_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 20]));\n}\nexports.false_ = false_;\n/**\n * Encode the constant null.\n */\nfunction null_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 22]));\n}\nexports.null_ = null_;\n/**\n * Encode the constant undefined.\n */\nfunction undefined_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 23]));\n}\nexports.undefined_ = undefined_;\n", "\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst cbor = __importStar(require(\"./value\"));\nconst BufferClasses = [ArrayBuffer, Uint8Array, Uint16Array, Uint32Array, Int8Array, Int16Array, Int32Array, Float32Array, Float64Array];\nclass JsonDefaultCborEncoder {\n  // @param _serializer The CBOR Serializer to use.\n  // @param _stable Whether or not keys from objects should be sorted (stable). This is\n  //     particularly useful when testing encodings between JSON objects.\n  constructor(_serializer, _stable = false) {\n    this._serializer = _serializer;\n    this._stable = _stable;\n    this.name = \"jsonDefault\";\n    this.priority = -100;\n  }\n  match(value) {\n    return [\"undefined\", \"boolean\", \"number\", \"string\", \"object\"].indexOf(typeof value) != -1;\n  }\n  encode(value) {\n    switch (typeof value) {\n      case \"undefined\":\n        return cbor.undefined_();\n      case \"boolean\":\n        return cbor.bool(value);\n      case \"number\":\n        if (Math.floor(value) === value) {\n          return cbor.number(value);\n        } else {\n          return cbor.doubleFloat(value);\n        }\n      case \"string\":\n        return cbor.string(value);\n      case \"object\":\n        if (value === null) {\n          return cbor.null_();\n        } else if (Array.isArray(value)) {\n          return cbor.array(value.map(x => this._serializer.serializeValue(x)));\n        } else if (BufferClasses.find(x => value instanceof x)) {\n          return cbor.bytes(value.buffer);\n        } else if (Object.getOwnPropertyNames(value).indexOf(\"toJSON\") !== -1) {\n          return this.encode(value.toJSON());\n        } else if (value instanceof Map) {\n          const m = new Map();\n          for (const [key, item] of value.entries()) {\n            m.set(key, this._serializer.serializeValue(item));\n          }\n          return cbor.map(m, this._stable);\n        } else {\n          const m = new Map();\n          for (const [key, item] of Object.entries(value)) {\n            m.set(key, this._serializer.serializeValue(item));\n          }\n          return cbor.map(m, this._stable);\n        }\n      default:\n        throw new Error(\"Invalid value.\");\n    }\n  }\n}\nexports.JsonDefaultCborEncoder = JsonDefaultCborEncoder;\nclass ToCborEncoder {\n  constructor() {\n    this.name = \"cborEncoder\";\n    this.priority = -90;\n  }\n  match(value) {\n    return typeof value == \"object\" && typeof value[\"toCBOR\"] == \"function\";\n  }\n  encode(value) {\n    return value.toCBOR();\n  }\n}\nexports.ToCborEncoder = ToCborEncoder;\nclass CborSerializer {\n  constructor() {\n    this._encoders = new Set();\n  }\n  static withDefaultEncoders(stable = false) {\n    const s = new this();\n    s.addEncoder(new JsonDefaultCborEncoder(s, stable));\n    s.addEncoder(new ToCborEncoder());\n    return s;\n  }\n  removeEncoder(name) {\n    // Has to make an extra call to values() to ensure it doesn't break on iteration.\n    for (const encoder of this._encoders.values()) {\n      if (encoder.name == name) {\n        this._encoders.delete(encoder);\n      }\n    }\n  }\n  addEncoder(encoder) {\n    this._encoders.add(encoder);\n  }\n  getEncoderFor(value) {\n    let chosenEncoder = null;\n    for (const encoder of this._encoders) {\n      if (!chosenEncoder || encoder.priority > chosenEncoder.priority) {\n        if (encoder.match(value)) {\n          chosenEncoder = encoder;\n        }\n      }\n    }\n    if (chosenEncoder === null) {\n      throw new Error(\"Could not find an encoder for value.\");\n    }\n    return chosenEncoder;\n  }\n  serializeValue(value) {\n    return this.getEncoderFor(value).encode(value);\n  }\n  serialize(value) {\n    return this.serializeValue(value);\n  }\n}\nexports.CborSerializer = CborSerializer;\nclass SelfDescribeCborSerializer extends CborSerializer {\n  serialize(value) {\n    return cbor.raw(new Uint8Array([\n    // Self describe CBOR.\n    ...new Uint8Array([0xd9, 0xd9, 0xf7]), ...new Uint8Array(super.serializeValue(value))]));\n  }\n}\nexports.SelfDescribeCborSerializer = SelfDescribeCborSerializer;\n", "\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n__export(require(\"./serializer\"));\nconst value = __importStar(require(\"./value\"));\nexports.value = value;\n", "/** @module CanisterStatus */\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { Certificate, flatten_forks, check_canister_ranges, LookupStatus, lookup_path, lookupResultToBuffer } from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\nimport { decodeLeb128, decodeTime } from '../utils/leb';\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {ArrayBuffer[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport class CustomPath {\n  constructor(key, path, decodeStrategy) {\n    this.key = key;\n    this.path = path;\n    this.decodeStrategy = decodeStrategy;\n  }\n}\n/**\n * Request information in the request_status state tree for a given canister.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async options => {\n  const {\n    agent,\n    paths\n  } = options;\n  const canisterId = Principal.from(options.canisterId);\n  const uniquePaths = [...new Set(paths)];\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map();\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      var _a;\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]]\n        });\n        if (agent.rootKey == null) {\n          throw new Error('Agent is missing root key');\n        }\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId,\n          disableTimeVerification: true\n        });\n        const lookup = (cert, path) => {\n          if (path === 'subnet') {\n            if (agent.rootKey == null) {\n              throw new Error('Agent is missing root key');\n            }\n            const data = fetchNodeKeys(response.certificate, canisterId, agent.rootKey);\n            return {\n              path: path,\n              data\n            };\n          } else {\n            return {\n              path: path,\n              data: lookupResultToBuffer(cert.lookup(encodePath(path, canisterId)))\n            };\n          }\n        };\n        // must pass in the rootKey if we have no delegation\n        const {\n          path,\n          data\n        } = lookup(cert, uniquePaths[index]);\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time':\n              {\n                status.set(path, decodeTime(data));\n                break;\n              }\n            case 'controllers':\n              {\n                status.set(path, decodeControllers(data));\n                break;\n              }\n            case 'module_hash':\n              {\n                status.set(path, decodeHex(data));\n                break;\n              }\n            case 'subnet':\n              {\n                status.set(path, data);\n                break;\n              }\n            case 'candid':\n              {\n                status.set(path, new TextDecoder().decode(data));\n                break;\n              }\n            default:\n              {\n                // Check for CustomPath signature\n                if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                  switch (path.decodeStrategy) {\n                    case 'raw':\n                      status.set(path.key, data);\n                      break;\n                    case 'leb128':\n                      {\n                        status.set(path.key, decodeLeb128(data));\n                        break;\n                      }\n                    case 'cbor':\n                      {\n                        status.set(path.key, decodeCbor(data));\n                        break;\n                      }\n                    case 'hex':\n                      {\n                        status.set(path.key, decodeHex(data));\n                        break;\n                      }\n                    case 'utf-8':\n                      {\n                        status.set(path.key, decodeUtf8(data));\n                      }\n                  }\n                }\n              }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes('Invalid certificate')) {\n          throw new AgentError(error.message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n  return status;\n};\nexport const fetchNodeKeys = (certificate, canisterId, root_key) => {\n  if (!canisterId._isPrincipal) {\n    throw new Error('Invalid canisterId');\n  }\n  const cert = Cbor.decode(new Uint8Array(certificate));\n  const tree = cert.tree;\n  let delegation = cert.delegation;\n  let subnetId;\n  if (delegation && delegation.subnet_id) {\n    subnetId = Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n  }\n  // On local replica, with System type subnet, there is no delegation\n  else if (!delegation && typeof root_key !== 'undefined') {\n    subnetId = Principal.selfAuthenticating(new Uint8Array(root_key));\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0)\n    };\n  }\n  // otherwise use default NNS subnet id\n  else {\n    subnetId = Principal.selfAuthenticating(Principal.fromText('tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe').toUint8Array());\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0)\n    };\n  }\n  const canisterInRange = check_canister_ranges({\n    canisterId,\n    subnetId,\n    tree\n  });\n  if (!canisterInRange) {\n    throw new Error('Canister not in range');\n  }\n  const subnetLookupResult = lookup_path(['subnet', delegation.subnet_id, 'node'], tree);\n  if (subnetLookupResult.status !== LookupStatus.Found) {\n    throw new Error('Node not found');\n  }\n  if (subnetLookupResult.value instanceof ArrayBuffer) {\n    throw new Error('Invalid node tree');\n  }\n  const nodeForks = flatten_forks(subnetLookupResult.value);\n  const nodeKeys = new Map();\n  nodeForks.forEach(fork => {\n    const node_id = Principal.from(new Uint8Array(fork[1])).toText();\n    const publicKeyLookupResult = lookup_path(['public_key'], fork[2]);\n    if (publicKeyLookupResult.status !== LookupStatus.Found) {\n      throw new Error('Public key not found');\n    }\n    const derEncodedPublicKey = publicKeyLookupResult.value;\n    if (derEncodedPublicKey.byteLength !== 44) {\n      throw new Error('Invalid public key length');\n    } else {\n      nodeKeys.set(node_id, derEncodedPublicKey);\n    }\n  });\n  return {\n    subnetId: Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n    nodeKeys\n  };\n};\nexport const encodePath = (path, canisterId) => {\n  const encoder = new TextEncoder();\n  const encode = arg => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default:\n      {\n        // Check for CustomPath signature\n        if ('key' in path && 'path' in path) {\n          // For simplified metadata queries\n          if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n            const metaPath = path.path;\n            const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n            return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n            // For non-metadata, return the provided custompath\n          } else {\n            return path['path'];\n          }\n        }\n      }\n  }\n  throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`);\n};\nconst decodeHex = buf => {\n  return toHex(buf);\n};\nconst decodeCbor = buf => {\n  return Cbor.decode(buf);\n};\nconst decodeUtf8 = buf => {\n  return new TextDecoder().decode(buf);\n};\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = buf => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const controllersRaw = decodeCbor(buf);\n  return controllersRaw.map(buf => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};\n", "const alphabet = 'abcdefghijklmnopqrstuvwxyz234567';\n// Build a lookup table for decoding.\nconst lookupTable = Object.create(null);\nfor (let i = 0; i < alphabet.length; i++) {\n  lookupTable[alphabet[i]] = i;\n}\n// Add aliases for rfc4648.\nlookupTable['0'] = lookupTable.o;\nlookupTable['1'] = lookupTable.i;\n/**\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nexport function encode(input) {\n  // How many bits will we skip from the first byte.\n  let skip = 0;\n  // 5 high bits, carry from one byte to the next.\n  let bits = 0;\n  // The output string in base32.\n  let output = '';\n  function encodeByte(byte) {\n    if (skip < 0) {\n      // we have a carry from the previous byte\n      bits |= byte >> -skip;\n    } else {\n      // no carry\n      bits = byte << skip & 248;\n    }\n    if (skip > 3) {\n      // Not enough data to produce a character, get us another one\n      skip -= 8;\n      return 1;\n    }\n    if (skip < 4) {\n      // produce a character\n      output += alphabet[bits >> 3];\n      skip += 5;\n    }\n    return 0;\n  }\n  for (let i = 0; i < input.length;) {\n    i += encodeByte(input[i]);\n  }\n  return output + (skip < 0 ? alphabet[bits >> 3] : '');\n}\n/**\n * @param input The base32 encoded string to decode.\n */\nexport function decode(input) {\n  // how many bits we have from the previous character.\n  let skip = 0;\n  // current byte we're producing.\n  let byte = 0;\n  const output = new Uint8Array(input.length * 4 / 3 | 0);\n  let o = 0;\n  function decodeChar(char) {\n    // Consume a character from the stream, store\n    // the output in this.output. As before, better\n    // to use update().\n    let val = lookupTable[char.toLowerCase()];\n    if (val === undefined) {\n      throw new Error(`Invalid character: ${JSON.stringify(char)}`);\n    }\n    // move to the high bits\n    val <<= 3;\n    byte |= val >>> skip;\n    skip += 5;\n    if (skip >= 8) {\n      // We have enough bytes to produce an output\n      output[o++] = byte;\n      skip -= 8;\n      if (skip > 0) {\n        byte = val << 5 - skip & 255;\n      } else {\n        byte = 0;\n      }\n    }\n  }\n  for (const c of input) {\n    decodeChar(c);\n  }\n  return output.slice(0, o);\n}\n", "// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable = new Uint32Array([0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d]);\n/**\n * Calculate the CRC32 of an ArrayBufferLike.\n * @param buf The BufferLike to calculate the CRC32 of.\n */\nexport function getCrc32(buf) {\n  const b = new Uint8Array(buf);\n  let crc = -1;\n  for (let i = 0; i < b.length; i++) {\n    const byte = b[i];\n    const t = (byte ^ crc) & 0xff;\n    crc = lookUpTable[t] ^ crc >>> 8;\n  }\n  return (crc ^ -1) >>> 0;\n}\n", "/**\n * Internal assertion helpers.\n * @module\n */\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a) {\n  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n  if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\nexport { anumber, abytes, ahash, aexists, aoutput };\n", "export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\n// Cast array to different type\nexport function u8(arr) {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr) {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nexport function createView(arr) {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n  return word << 32 - shift | word >>> shift;\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n  return word << shift | word >>> 32 - shift >>> 0;\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */(() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word) {\n  return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE = isLE ? n => n : n => byteSwap(n);\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */Array.from({\n  length: 256\n}, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n  _0: 48,\n  _9: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102\n};\nfunction asciiToBase16(ch) {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => {};\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n  // Safe version that clones internal state\n  clone() {\n    return this._cloneInto();\n  }\n}\nexport function checkOpts(defaults, opts) {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged;\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor(hashCons) {\n  const hashC = msg => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = opts => hashCons(opts);\n  return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = opts => hashCons(opts);\n  return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n  return a & b ^ ~a & c;\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n  return a & b ^ a & c ^ b & c;\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data) {\n    aexists(this);\n    const {\n      view,\n      buffer,\n      blockLen\n    } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */new Uint32Array(64);\nexport class SHA256 extends HashMD {\n  constructor() {\n    super(64, 32, 8, false);\n    // We cannot use array here since array allows indexing by variable\n    // which means optimizer/compiler cannot use registers.\n    this.A = SHA256_IV[0] | 0;\n    this.B = SHA256_IV[1] | 0;\n    this.C = SHA256_IV[2] | 0;\n    this.D = SHA256_IV[3] | 0;\n    this.E = SHA256_IV[4] | 0;\n    this.F = SHA256_IV[5] | 0;\n    this.G = SHA256_IV[6] | 0;\n    this.H = SHA256_IV[7] | 0;\n  }\n  get() {\n    const {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  set(A, B, C, D, E, F, G, H) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\n      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = sigma0 + Maj(A, B, C) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = D + T1 | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = T1 + T2 | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = A + this.A | 0;\n    B = B + this.B | 0;\n    C = C + this.C | 0;\n    D = D + this.D | 0;\n    E = E + this.E | 0;\n    F = F + this.F | 0;\n    G = G + this.G | 0;\n    H = H + this.H | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  constructor() {\n    super();\n    this.A = 0xc1059ed8 | 0;\n    this.B = 0x367cd507 | 0;\n    this.C = 0x3070dd17 | 0;\n    this.D = 0xf70e5939 | 0;\n    this.E = 0xffc00b31 | 0;\n    this.F = 0x68581511 | 0;\n    this.G = 0x64f98fa7 | 0;\n    this.H = 0xbefa4fa4 | 0;\n    this.outputLen = 28;\n  }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */wrapConstructor(() => new SHA224());\n", "import { sha224 as jsSha224 } from '@noble/hashes/sha256';\n/**\n * Returns the SHA224 hash of the buffer.\n * @param data Arraybuffer to encode\n */\nexport function sha224(data) {\n  return jsSha224.create().update(new Uint8Array(data)).digest();\n}\n", "import { decode, encode } from './utils/base32';\nimport { getCrc32 } from './utils/getCrc';\nimport { sha224 } from './utils/sha224';\nexport const JSON_KEY_PRINCIPAL = '__principal__';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\nconst MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = 'aaaaa-aa';\nconst fromHexString = hexString => {\n  var _a;\n  return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16)));\n};\nconst toHexString = bytes => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nexport class Principal {\n  constructor(_arr) {\n    this._arr = _arr;\n    this._isPrincipal = true;\n  }\n  static anonymous() {\n    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n  }\n  /**\n   * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n   * @returns {Principal} principal of the management canister\n   */\n  static managementCanister() {\n    return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);\n  }\n  static selfAuthenticating(publicKey) {\n    const sha = sha224(publicKey);\n    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n  }\n  static from(other) {\n    if (typeof other === 'string') {\n      return Principal.fromText(other);\n    } else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {\n      return new Principal(other);\n    } else if (typeof other === 'object' && other !== null && other._isPrincipal === true) {\n      return new Principal(other._arr);\n    }\n    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n  }\n  static fromHex(hex) {\n    return new this(fromHexString(hex));\n  }\n  static fromText(text) {\n    let maybePrincipal = text;\n    // If formatted as JSON string, parse it first\n    if (text.includes(JSON_KEY_PRINCIPAL)) {\n      const obj = JSON.parse(text);\n      if (JSON_KEY_PRINCIPAL in obj) {\n        maybePrincipal = obj[JSON_KEY_PRINCIPAL];\n      }\n    }\n    const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');\n    let arr = decode(canisterIdNoDash);\n    arr = arr.slice(4, arr.length);\n    const principal = new this(arr);\n    if (principal.toText() !== maybePrincipal) {\n      throw new Error(`Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${maybePrincipal}\" may not be a valid Principal ID).`);\n    }\n    return principal;\n  }\n  static fromUint8Array(arr) {\n    return new this(arr);\n  }\n  isAnonymous() {\n    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n  }\n  toUint8Array() {\n    return this._arr;\n  }\n  toHex() {\n    return toHexString(this._arr).toUpperCase();\n  }\n  toText() {\n    const checksumArrayBuf = new ArrayBuffer(4);\n    const view = new DataView(checksumArrayBuf);\n    view.setUint32(0, getCrc32(this._arr));\n    const checksum = new Uint8Array(checksumArrayBuf);\n    const bytes = Uint8Array.from(this._arr);\n    const array = new Uint8Array([...checksum, ...bytes]);\n    const result = encode(array);\n    const matches = result.match(/.{1,5}/g);\n    if (!matches) {\n      // This should only happen if there's no character, which is unreachable.\n      throw new Error();\n    }\n    return matches.join('-');\n  }\n  toString() {\n    return this.toText();\n  }\n  /**\n   * Serializes to JSON\n   * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string\n   */\n  toJSON() {\n    return {\n      [JSON_KEY_PRINCIPAL]: this.toText()\n    };\n  }\n  /**\n   * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n   * @param {Principal} other - a {@link Principal} to compare\n   * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n   */\n  compareTo(other) {\n    for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n      if (this._arr[i] < other._arr[i]) return 'lt';else if (this._arr[i] > other._arr[i]) return 'gt';\n    }\n    // Here, at least one principal is a prefix of the other principal (they could be the same)\n    if (this._arr.length < other._arr.length) return 'lt';\n    if (this._arr.length > other._arr.length) return 'gt';\n    return 'eq';\n  }\n  /**\n   * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  ltEq(other) {\n    const cmp = this.compareTo(other);\n    return cmp == 'lt' || cmp == 'eq';\n  }\n  /**\n   * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  gtEq(other) {\n    const cmp = this.compareTo(other);\n    return cmp == 'gt' || cmp == 'eq';\n  }\n}\n", "/**\n * Codes used by the replica for rejecting a message.\n * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.\n */\nexport var ReplicaRejectCode;\n(function (ReplicaRejectCode) {\n  ReplicaRejectCode[ReplicaRejectCode[\"SysFatal\"] = 1] = \"SysFatal\";\n  ReplicaRejectCode[ReplicaRejectCode[\"SysTransient\"] = 2] = \"SysTransient\";\n  ReplicaRejectCode[ReplicaRejectCode[\"DestinationInvalid\"] = 3] = \"DestinationInvalid\";\n  ReplicaRejectCode[ReplicaRejectCode[\"CanisterReject\"] = 4] = \"CanisterReject\";\n  ReplicaRejectCode[ReplicaRejectCode[\"CanisterError\"] = 5] = \"CanisterError\";\n})(ReplicaRejectCode || (ReplicaRejectCode = {}));\n", "/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers) {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result.buffer;\n}\n/**\n * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.\n * @param buffer The buffer to return the hexadecimal string of.\n */\nexport function toHex(buffer) {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\nconst hexRe = new RegExp(/^[0-9a-fA-F]+$/);\n/**\n * Transforms a hexadecimal string into an array buffer.\n * @param hex The hexadecimal string to use.\n */\nexport function fromHex(hex) {\n  if (!hexRe.test(hex)) {\n    throw new Error('Invalid hexadecimal string.');\n  }\n  const buffer = [...hex].reduce((acc, curr, i) => {\n    acc[i / 2 | 0] = (acc[i / 2 | 0] || '') + curr;\n    return acc;\n  }, []).map(x => Number.parseInt(x, 16));\n  return new Uint8Array(buffer).buffer;\n}\n/**\n *\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns number - negative if b1 < b2, positive if b1 > b2, 0 if b1 === b2\n */\nexport function compare(b1, b2) {\n  if (b1.byteLength !== b2.byteLength) {\n    return b1.byteLength - b2.byteLength;\n  }\n  const u1 = new Uint8Array(b1);\n  const u2 = new Uint8Array(b2);\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n/**\n * Checks two array buffers for equality.\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns boolean\n */\nexport function bufEquals(b1, b2) {\n  return compare(b1, b2) === 0;\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr) {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nexport function bufFromBufLike(bufLike) {\n  if (bufLike instanceof Uint8Array) {\n    return uint8ToBuf(bufLike);\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return bufLike;\n  }\n  if (Array.isArray(bufLike)) {\n    return uint8ToBuf(new Uint8Array(bufLike));\n  }\n  if ('buffer' in bufLike) {\n    return bufFromBufLike(bufLike.buffer);\n  }\n  return uint8ToBuf(new Uint8Array(bufLike));\n}\n", "import { Principal } from '@dfinity/principal';\nimport { ReplicaRejectCode } from './agent/api';\nimport { toHex } from './utils/buffer';\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n * @todo https://github.com/dfinity/agent-js/issues/420\n */\nexport class AgentError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'AgentError';\n    this.__proto__ = AgentError.prototype;\n    Object.setPrototypeOf(this, AgentError.prototype);\n  }\n}\nexport class ActorCallError extends AgentError {\n  constructor(canisterId, methodName, type, props) {\n    const cid = Principal.from(canisterId);\n    super([`Call failed:`, `  Canister: ${cid.toText()}`, `  Method: ${methodName} (${type})`, ...Object.getOwnPropertyNames(props).map(n => `  \"${n}\": ${JSON.stringify(props[n])}`)].join('\\n'));\n    this.canisterId = canisterId;\n    this.methodName = methodName;\n    this.type = type;\n    this.props = props;\n    this.name = 'ActorCallError';\n    this.__proto__ = ActorCallError.prototype;\n    Object.setPrototypeOf(this, ActorCallError.prototype);\n  }\n}\nexport class QueryCallRejectedError extends ActorCallError {\n  constructor(canisterId, methodName, result) {\n    var _a;\n    const cid = Principal.from(canisterId);\n    super(cid, methodName, 'query', {\n      Status: result.status,\n      Code: (_a = ReplicaRejectCode[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code \"${result.reject_code}\"`,\n      Message: result.reject_message\n    });\n    this.result = result;\n    this.name = 'QueryCallRejectedError';\n    this.__proto__ = QueryCallRejectedError.prototype;\n    Object.setPrototypeOf(this, QueryCallRejectedError.prototype);\n  }\n}\nexport class UpdateCallRejectedError extends ActorCallError {\n  constructor(canisterId, methodName, requestId, response) {\n    const cid = Principal.from(canisterId);\n    super(cid, methodName, 'update', Object.assign({\n      'Request ID': toHex(requestId)\n    }, response.body ? Object.assign(Object.assign({}, response.body.error_code ? {\n      'Error code': response.body.error_code\n    } : {}), {\n      'Reject code': String(response.body.reject_code),\n      'Reject message': response.body.reject_message\n    }) : {\n      'HTTP status code': response.status.toString(),\n      'HTTP status text': response.statusText\n    }));\n    this.requestId = requestId;\n    this.response = response;\n    this.name = 'UpdateCallRejectedError';\n    this.__proto__ = UpdateCallRejectedError.prototype;\n    Object.setPrototypeOf(this, UpdateCallRejectedError.prototype);\n  }\n}\n", "// This file is based on:\n// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses\nimport borc from 'borc';\nimport * as cbor from 'simple-cbor';\nimport { SelfDescribeCborSerializer } from 'simple-cbor';\nimport { concat, fromHex, toHex } from './utils/buffer';\n// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with\n// encoding the uint64 values that the HTTP handler of the client expects for\n// canister IDs. However, simple-cbor does not yet provide deserialization so\n// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR\n// decoder.\nclass PrincipalEncoder {\n  get name() {\n    return 'Principal';\n  }\n  get priority() {\n    return 0;\n  }\n  match(value) {\n    return value && value._isPrincipal === true;\n  }\n  encode(v) {\n    return cbor.value.bytes(v.toUint8Array());\n  }\n}\nclass BufferEncoder {\n  get name() {\n    return 'Buffer';\n  }\n  get priority() {\n    return 1;\n  }\n  match(value) {\n    return value instanceof ArrayBuffer || ArrayBuffer.isView(value);\n  }\n  encode(v) {\n    return cbor.value.bytes(new Uint8Array(v));\n  }\n}\nclass BigIntEncoder {\n  get name() {\n    return 'BigInt';\n  }\n  get priority() {\n    return 1;\n  }\n  match(value) {\n    return typeof value === `bigint`;\n  }\n  encode(v) {\n    // Always use a bigint encoding.\n    if (v > BigInt(0)) {\n      return cbor.value.tagged(2, cbor.value.bytes(fromHex(v.toString(16))));\n    } else {\n      return cbor.value.tagged(3, cbor.value.bytes(fromHex((BigInt('-1') * v).toString(16))));\n    }\n  }\n}\nconst serializer = SelfDescribeCborSerializer.withDefaultEncoders(true);\nserializer.addEncoder(new PrincipalEncoder());\nserializer.addEncoder(new BufferEncoder());\nserializer.addEncoder(new BigIntEncoder());\nexport var CborTag;\n(function (CborTag) {\n  CborTag[CborTag[\"Uint64LittleEndian\"] = 71] = \"Uint64LittleEndian\";\n  CborTag[CborTag[\"Semantic\"] = 55799] = \"Semantic\";\n})(CborTag || (CborTag = {}));\n/**\n * Encode a JavaScript value into CBOR.\n */\nexport function encode(value) {\n  return serializer.serialize(value);\n}\nfunction decodePositiveBigInt(buf) {\n  const len = buf.byteLength;\n  let res = BigInt(0);\n  for (let i = 0; i < len; i++) {\n    res = res * BigInt(0x100) + BigInt(buf[i]);\n  }\n  return res;\n}\n// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.\nclass Uint8ArrayDecoder extends borc.Decoder {\n  createByteString(raw) {\n    return concat(...raw);\n  }\n  createByteStringFromHeap(start, end) {\n    if (start === end) {\n      return new ArrayBuffer(0);\n    }\n    return new Uint8Array(this._heap.slice(start, end));\n  }\n}\nexport function decode(input) {\n  const buffer = new Uint8Array(input);\n  const decoder = new Uint8ArrayDecoder({\n    size: buffer.byteLength,\n    tags: {\n      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).\n      2: val => decodePositiveBigInt(val),\n      3: val => -decodePositiveBigInt(val),\n      [CborTag.Semantic]: value => value\n    }\n  });\n  try {\n    return decoder.decodeFirst(buffer);\n  } catch (e) {\n    throw new Error(`Failed to decode CBOR: ${e}, input: ${toHex(buffer)}`);\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Principal as PrincipalId } from '@dfinity/principal';\nimport { concat, PipeArrayBuffer as Pipe } from './utils/buffer';\nimport { idlLabelToId } from './utils/hash';\nimport { lebDecode, lebEncode, readIntLE, readUIntLE, safeRead, safeReadUint8, slebDecode, slebEncode, writeIntLE, writeUIntLE } from './utils/leb128';\nimport { iexp2 } from './utils/bigint-math';\nconst magicNumber = 'DIDL';\nconst toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error\nfunction zipWith(xs, ys, f) {\n  return xs.map((x, i) => f(x, ys[i]));\n}\n/**\n * An IDL Type Table, which precedes the data in the stream.\n */\nclass TypeTable {\n  constructor() {\n    // List of types. Needs to be an array as the index needs to be stable.\n    this._typs = [];\n    this._idx = new Map();\n  }\n  has(obj) {\n    return this._idx.has(obj.name);\n  }\n  add(type, buf) {\n    const idx = this._typs.length;\n    this._idx.set(type.name, idx);\n    this._typs.push(buf);\n  }\n  merge(obj, knot) {\n    const idx = this._idx.get(obj.name);\n    const knotIdx = this._idx.get(knot);\n    if (idx === undefined) {\n      throw new Error('Missing type index for ' + obj);\n    }\n    if (knotIdx === undefined) {\n      throw new Error('Missing type index for ' + knot);\n    }\n    this._typs[idx] = this._typs[knotIdx];\n    // Delete the type.\n    this._typs.splice(knotIdx, 1);\n    this._idx.delete(knot);\n  }\n  encode() {\n    const len = lebEncode(this._typs.length);\n    const buf = concat(...this._typs);\n    return concat(len, buf);\n  }\n  indexOf(typeName) {\n    if (!this._idx.has(typeName)) {\n      throw new Error('Missing type index for ' + typeName);\n    }\n    return slebEncode(this._idx.get(typeName) || 0);\n  }\n}\nexport class Visitor {\n  visitType(t, data) {\n    throw new Error('Not implemented');\n  }\n  visitPrimitive(t, data) {\n    return this.visitType(t, data);\n  }\n  visitEmpty(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitBool(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitNull(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitReserved(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitText(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitNumber(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitInt(t, data) {\n    return this.visitNumber(t, data);\n  }\n  visitNat(t, data) {\n    return this.visitNumber(t, data);\n  }\n  visitFloat(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitFixedInt(t, data) {\n    return this.visitNumber(t, data);\n  }\n  visitFixedNat(t, data) {\n    return this.visitNumber(t, data);\n  }\n  visitPrincipal(t, data) {\n    return this.visitPrimitive(t, data);\n  }\n  visitConstruct(t, data) {\n    return this.visitType(t, data);\n  }\n  visitVec(t, ty, data) {\n    return this.visitConstruct(t, data);\n  }\n  visitOpt(t, ty, data) {\n    return this.visitConstruct(t, data);\n  }\n  visitRecord(t, fields, data) {\n    return this.visitConstruct(t, data);\n  }\n  visitTuple(t, components, data) {\n    const fields = components.map((ty, i) => [`_${i}_`, ty]);\n    return this.visitRecord(t, fields, data);\n  }\n  visitVariant(t, fields, data) {\n    return this.visitConstruct(t, data);\n  }\n  visitRec(t, ty, data) {\n    return this.visitConstruct(ty, data);\n  }\n  visitFunc(t, data) {\n    return this.visitConstruct(t, data);\n  }\n  visitService(t, data) {\n    return this.visitConstruct(t, data);\n  }\n}\n/**\n * Represents an IDL type.\n */\nexport class Type {\n  /* Display type name */\n  display() {\n    return this.name;\n  }\n  valueToString(x) {\n    return toReadableString(x);\n  }\n  /* Implement `T` in the IDL spec, only needed for non-primitive types */\n  buildTypeTable(typeTable) {\n    if (!typeTable.has(this)) {\n      this._buildTypeTableImpl(typeTable);\n    }\n  }\n}\nexport class PrimitiveType extends Type {\n  checkType(t) {\n    if (this.name !== t.name) {\n      throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n    }\n    return t;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _buildTypeTableImpl(typeTable) {\n    // No type table encoding for Primitive types.\n    return;\n  }\n}\nexport class ConstructType extends Type {\n  checkType(t) {\n    if (t instanceof RecClass) {\n      const ty = t.getType();\n      if (typeof ty === 'undefined') {\n        throw new Error('type mismatch with uninitialized type');\n      }\n      return ty;\n    }\n    throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n  }\n  encodeType(typeTable) {\n    return typeTable.indexOf(this.name);\n  }\n}\n/**\n * Represents an IDL Empty, a type which has no inhabitants.\n * Since no values exist for this type, it cannot be serialised or deserialised.\n * Result types like `Result<Text, Empty>` should always succeed.\n */\nexport class EmptyClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitEmpty(this, d);\n  }\n  covariant(x) {\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue() {\n    throw new Error('Empty cannot appear as a function argument');\n  }\n  valueToString() {\n    throw new Error('Empty cannot appear as a value');\n  }\n  encodeType() {\n    return slebEncode(-17 /* IDLTypeIds.Empty */);\n  }\n  decodeValue() {\n    throw new Error('Empty cannot appear as an output');\n  }\n  get name() {\n    return 'empty';\n  }\n}\n/**\n * Represents an IDL Unknown, a placeholder type for deserialization only.\n * When decoding a value as Unknown, all fields will be retained but the names are only available in\n * hashed form.\n * A deserialized unknown will offer it's actual type by calling the `type()` function.\n * Unknown cannot be serialized and attempting to do so will throw an error.\n */\nexport class UnknownClass extends Type {\n  checkType(t) {\n    throw new Error('Method not implemented for unknown.');\n  }\n  accept(v, d) {\n    throw v.visitType(this, d);\n  }\n  covariant(x) {\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue() {\n    throw new Error('Unknown cannot appear as a function argument');\n  }\n  valueToString() {\n    throw new Error('Unknown cannot appear as a value');\n  }\n  encodeType() {\n    throw new Error('Unknown cannot be serialized');\n  }\n  decodeValue(b, t) {\n    let decodedValue = t.decodeValue(b, t);\n    if (Object(decodedValue) !== decodedValue) {\n      // decodedValue is primitive. Box it, otherwise we cannot add the type() function.\n      // The type() function is important for primitives because otherwise we cannot tell apart the\n      // different number types.\n      decodedValue = Object(decodedValue);\n    }\n    let typeFunc;\n    if (t instanceof RecClass) {\n      typeFunc = () => t.getType();\n    } else {\n      typeFunc = () => t;\n    }\n    // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property\n    // 'type' which means it would be serialized if the value would be candid encoded again.\n    // This in turn leads to problems if the decoded value is a variant because these values are\n    // only allowed to have a single property.\n    Object.defineProperty(decodedValue, 'type', {\n      value: typeFunc,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    });\n    return decodedValue;\n  }\n  _buildTypeTableImpl() {\n    throw new Error('Unknown cannot be serialized');\n  }\n  get name() {\n    return 'Unknown';\n  }\n}\n/**\n * Represents an IDL Bool\n */\nexport class BoolClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitBool(this, d);\n  }\n  covariant(x) {\n    if (typeof x === 'boolean') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    return new Uint8Array([x ? 1 : 0]);\n  }\n  encodeType() {\n    return slebEncode(-2 /* IDLTypeIds.Bool */);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    switch (safeReadUint8(b)) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new Error('Boolean value out of range');\n    }\n  }\n  get name() {\n    return 'bool';\n  }\n}\n/**\n * Represents an IDL Null\n */\nexport class NullClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitNull(this, d);\n  }\n  covariant(x) {\n    if (x === null) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue() {\n    return new ArrayBuffer(0);\n  }\n  encodeType() {\n    return slebEncode(-1 /* IDLTypeIds.Null */);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    return null;\n  }\n  get name() {\n    return 'null';\n  }\n}\n/**\n * Represents an IDL Reserved\n */\nexport class ReservedClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitReserved(this, d);\n  }\n  covariant(x) {\n    return true;\n  }\n  encodeValue() {\n    return new ArrayBuffer(0);\n  }\n  encodeType() {\n    return slebEncode(-16 /* IDLTypeIds.Reserved */);\n  }\n  decodeValue(b, t) {\n    if (t.name !== this.name) {\n      t.decodeValue(b, t);\n    }\n    return null;\n  }\n  get name() {\n    return 'reserved';\n  }\n}\n/**\n * Represents an IDL Text\n */\nexport class TextClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitText(this, d);\n  }\n  covariant(x) {\n    if (typeof x === 'string') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const buf = new TextEncoder().encode(x);\n    const len = lebEncode(buf.byteLength);\n    return concat(len, buf);\n  }\n  encodeType() {\n    return slebEncode(-15 /* IDLTypeIds.Text */);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    const len = lebDecode(b);\n    const buf = safeRead(b, Number(len));\n    const decoder = new TextDecoder('utf8', {\n      fatal: true\n    });\n    return decoder.decode(buf);\n  }\n  get name() {\n    return 'text';\n  }\n  valueToString(x) {\n    return '\"' + x + '\"';\n  }\n}\n/**\n * Represents an IDL Int\n */\nexport class IntClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitInt(this, d);\n  }\n  covariant(x) {\n    // We allow encoding of JavaScript plain numbers.\n    // But we will always decode to bigint.\n    if (typeof x === 'bigint' || Number.isInteger(x)) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    return slebEncode(x);\n  }\n  encodeType() {\n    return slebEncode(-4 /* IDLTypeIds.Int */);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    return slebDecode(b);\n  }\n  get name() {\n    return 'int';\n  }\n  valueToString(x) {\n    return x.toString();\n  }\n}\n/**\n * Represents an IDL Nat\n */\nexport class NatClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitNat(this, d);\n  }\n  covariant(x) {\n    // We allow encoding of JavaScript plain numbers.\n    // But we will always decode to bigint.\n    if (typeof x === 'bigint' && x >= BigInt(0) || Number.isInteger(x) && x >= 0) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    return lebEncode(x);\n  }\n  encodeType() {\n    return slebEncode(-3 /* IDLTypeIds.Nat */);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    return lebDecode(b);\n  }\n  get name() {\n    return 'nat';\n  }\n  valueToString(x) {\n    return x.toString();\n  }\n}\n/**\n * Represents an IDL Float\n */\nexport class FloatClass extends PrimitiveType {\n  constructor(_bits) {\n    super();\n    this._bits = _bits;\n    if (_bits !== 32 && _bits !== 64) {\n      throw new Error('not a valid float type');\n    }\n  }\n  accept(v, d) {\n    return v.visitFloat(this, d);\n  }\n  covariant(x) {\n    if (typeof x === 'number' || x instanceof Number) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const buf = new ArrayBuffer(this._bits / 8);\n    const view = new DataView(buf);\n    if (this._bits === 32) {\n      view.setFloat32(0, x, true);\n    } else {\n      view.setFloat64(0, x, true);\n    }\n    return buf;\n  }\n  encodeType() {\n    const opcode = this._bits === 32 ? -13 /* IDLTypeIds.Float32 */ : -14 /* IDLTypeIds.Float64 */;\n    return slebEncode(opcode);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    const bytes = safeRead(b, this._bits / 8);\n    const view = new DataView(bytes);\n    if (this._bits === 32) {\n      return view.getFloat32(0, true);\n    } else {\n      return view.getFloat64(0, true);\n    }\n  }\n  get name() {\n    return 'float' + this._bits;\n  }\n  valueToString(x) {\n    return x.toString();\n  }\n}\n/**\n * Represents an IDL fixed-width Int(n)\n */\nexport class FixedIntClass extends PrimitiveType {\n  constructor(_bits) {\n    super();\n    this._bits = _bits;\n  }\n  accept(v, d) {\n    return v.visitFixedInt(this, d);\n  }\n  covariant(x) {\n    const min = iexp2(this._bits - 1) * BigInt(-1);\n    const max = iexp2(this._bits - 1) - BigInt(1);\n    let ok = false;\n    if (typeof x === 'bigint') {\n      ok = x >= min && x <= max;\n    } else if (Number.isInteger(x)) {\n      const v = BigInt(x);\n      ok = v >= min && v <= max;\n    } else {\n      ok = false;\n    }\n    if (ok) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    return writeIntLE(x, this._bits / 8);\n  }\n  encodeType() {\n    const offset = Math.log2(this._bits) - 3;\n    return slebEncode(-9 - offset);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    const num = readIntLE(b, this._bits / 8);\n    if (this._bits <= 32) {\n      return Number(num);\n    } else {\n      return num;\n    }\n  }\n  get name() {\n    return `int${this._bits}`;\n  }\n  valueToString(x) {\n    return x.toString();\n  }\n}\n/**\n * Represents an IDL fixed-width Nat(n)\n */\nexport class FixedNatClass extends PrimitiveType {\n  constructor(_bits) {\n    super();\n    this._bits = _bits;\n  }\n  accept(v, d) {\n    return v.visitFixedNat(this, d);\n  }\n  covariant(x) {\n    const max = iexp2(this._bits);\n    let ok = false;\n    if (typeof x === 'bigint' && x >= BigInt(0)) {\n      ok = x < max;\n    } else if (Number.isInteger(x) && x >= 0) {\n      const v = BigInt(x);\n      ok = v < max;\n    } else {\n      ok = false;\n    }\n    if (ok) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    return writeUIntLE(x, this._bits / 8);\n  }\n  encodeType() {\n    const offset = Math.log2(this._bits) - 3;\n    return slebEncode(-5 - offset);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    const num = readUIntLE(b, this._bits / 8);\n    if (this._bits <= 32) {\n      return Number(num);\n    } else {\n      return num;\n    }\n  }\n  get name() {\n    return `nat${this._bits}`;\n  }\n  valueToString(x) {\n    return x.toString();\n  }\n}\n/**\n * Represents an IDL Array\n *\n * Arrays of fixed-sized nat/int type (e.g. nat8), are encoded from and decoded to TypedArrays (e.g. Uint8Array).\n * Arrays of float or other non-primitive types are encoded/decoded as untyped array in Javascript.\n * @param {Type} t\n */\nexport class VecClass extends ConstructType {\n  constructor(_type) {\n    super();\n    this._type = _type;\n    // If true, this vector is really a blob and we can just use memcpy.\n    //\n    // NOTE:\n    // With support of encoding/dencoding of TypedArrays, this optimization is\n    // only used when plain array of bytes are passed as encoding input in order\n    // to be backward compatible.\n    this._blobOptimization = false;\n    if (_type instanceof FixedNatClass && _type._bits === 8) {\n      this._blobOptimization = true;\n    }\n  }\n  accept(v, d) {\n    return v.visitVec(this, this._type, d);\n  }\n  covariant(x) {\n    // Special case for ArrayBuffer\n    const bits = this._type instanceof FixedNatClass ? this._type._bits : this._type instanceof FixedIntClass ? this._type._bits : 0;\n    if (ArrayBuffer.isView(x) && bits == x.BYTES_PER_ELEMENT * 8 || Array.isArray(x) && x.every((v, idx) => {\n      try {\n        return this._type.covariant(v);\n      } catch (e) {\n        throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${idx} -> ${e.message}`);\n      }\n    })) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const len = lebEncode(x.length);\n    if (this._blobOptimization) {\n      return concat(len, new Uint8Array(x));\n    }\n    if (ArrayBuffer.isView(x)) {\n      return concat(len, new Uint8Array(x.buffer));\n    }\n    const buf = new Pipe(new ArrayBuffer(len.byteLength + x.length), 0);\n    buf.write(len);\n    for (const d of x) {\n      const encoded = this._type.encodeValue(d);\n      buf.write(new Uint8Array(encoded));\n    }\n    return buf.buffer;\n  }\n  _buildTypeTableImpl(typeTable) {\n    this._type.buildTypeTable(typeTable);\n    const opCode = slebEncode(-19 /* IDLTypeIds.Vector */);\n    const buffer = this._type.encodeType(typeTable);\n    typeTable.add(this, concat(opCode, buffer));\n  }\n  decodeValue(b, t) {\n    const vec = this.checkType(t);\n    if (!(vec instanceof VecClass)) {\n      throw new Error('Not a vector type');\n    }\n    const len = Number(lebDecode(b));\n    if (this._type instanceof FixedNatClass) {\n      if (this._type._bits == 8) {\n        return new Uint8Array(b.read(len));\n      }\n      if (this._type._bits == 16) {\n        return new Uint16Array(b.read(len * 2));\n      }\n      if (this._type._bits == 32) {\n        return new Uint32Array(b.read(len * 4));\n      }\n      if (this._type._bits == 64) {\n        return new BigUint64Array(b.read(len * 8));\n      }\n    }\n    if (this._type instanceof FixedIntClass) {\n      if (this._type._bits == 8) {\n        return new Int8Array(b.read(len));\n      }\n      if (this._type._bits == 16) {\n        return new Int16Array(b.read(len * 2));\n      }\n      if (this._type._bits == 32) {\n        return new Int32Array(b.read(len * 4));\n      }\n      if (this._type._bits == 64) {\n        return new BigInt64Array(b.read(len * 8));\n      }\n    }\n    const rets = [];\n    for (let i = 0; i < len; i++) {\n      rets.push(this._type.decodeValue(b, vec._type));\n    }\n    return rets;\n  }\n  get name() {\n    return `vec ${this._type.name}`;\n  }\n  display() {\n    return `vec ${this._type.display()}`;\n  }\n  valueToString(x) {\n    const elements = x.map(e => this._type.valueToString(e));\n    return 'vec {' + elements.join('; ') + '}';\n  }\n}\n/**\n * Represents an IDL Option\n * @param {Type} t\n */\nexport class OptClass extends ConstructType {\n  constructor(_type) {\n    super();\n    this._type = _type;\n  }\n  accept(v, d) {\n    return v.visitOpt(this, this._type, d);\n  }\n  covariant(x) {\n    try {\n      if (Array.isArray(x) && (x.length === 0 || x.length === 1 && this._type.covariant(x[0]))) return true;\n    } catch (e) {\n      throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)} \\n\\n-> ${e.message}`);\n    }\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    if (x.length === 0) {\n      return new Uint8Array([0]);\n    } else {\n      return concat(new Uint8Array([1]), this._type.encodeValue(x[0]));\n    }\n  }\n  _buildTypeTableImpl(typeTable) {\n    this._type.buildTypeTable(typeTable);\n    const opCode = slebEncode(-18 /* IDLTypeIds.Opt */);\n    const buffer = this._type.encodeType(typeTable);\n    typeTable.add(this, concat(opCode, buffer));\n  }\n  decodeValue(b, t) {\n    const opt = this.checkType(t);\n    if (!(opt instanceof OptClass)) {\n      throw new Error('Not an option type');\n    }\n    switch (safeReadUint8(b)) {\n      case 0:\n        return [];\n      case 1:\n        return [this._type.decodeValue(b, opt._type)];\n      default:\n        throw new Error('Not an option value');\n    }\n  }\n  get name() {\n    return `opt ${this._type.name}`;\n  }\n  display() {\n    return `opt ${this._type.display()}`;\n  }\n  valueToString(x) {\n    if (x.length === 0) {\n      return 'null';\n    } else {\n      return `opt ${this._type.valueToString(x[0])}`;\n    }\n  }\n}\n/**\n * Represents an IDL Record\n * @param {object} [fields] - mapping of function name to Type\n */\nexport class RecordClass extends ConstructType {\n  constructor(fields = {}) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n  accept(v, d) {\n    return v.visitRecord(this, this._fields, d);\n  }\n  tryAsTuple() {\n    const res = [];\n    for (let i = 0; i < this._fields.length; i++) {\n      const [key, type] = this._fields[i];\n      if (key !== `_${i}_`) {\n        return null;\n      }\n      res.push(type);\n    }\n    return res;\n  }\n  covariant(x) {\n    if (typeof x === 'object' && this._fields.every(([k, t]) => {\n      // eslint-disable-next-line\n      if (!x.hasOwnProperty(k)) {\n        throw new Error(`Record is missing key \"${k}\".`);\n      }\n      try {\n        return t.covariant(x[k]);\n      } catch (e) {\n        throw new Error(`Invalid ${this.display()} argument: \\n\\nfield ${k} -> ${e.message}`);\n      }\n    })) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const values = this._fields.map(([key]) => x[key]);\n    const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));\n    return concat(...bufs);\n  }\n  _buildTypeTableImpl(T) {\n    this._fields.forEach(([_, value]) => value.buildTypeTable(T));\n    const opCode = slebEncode(-20 /* IDLTypeIds.Record */);\n    const len = lebEncode(this._fields.length);\n    const fields = this._fields.map(([key, value]) => concat(lebEncode(idlLabelToId(key)), value.encodeType(T)));\n    T.add(this, concat(opCode, len, concat(...fields)));\n  }\n  decodeValue(b, t) {\n    const record = this.checkType(t);\n    if (!(record instanceof RecordClass)) {\n      throw new Error('Not a record type');\n    }\n    const x = {};\n    let expectedRecordIdx = 0;\n    let actualRecordIdx = 0;\n    while (actualRecordIdx < record._fields.length) {\n      const [hash, type] = record._fields[actualRecordIdx];\n      if (expectedRecordIdx >= this._fields.length) {\n        // skip unexpected left over fields present on the wire\n        type.decodeValue(b, type);\n        actualRecordIdx++;\n        continue;\n      }\n      const [expectKey, expectType] = this._fields[expectedRecordIdx];\n      const expectedId = idlLabelToId(this._fields[expectedRecordIdx][0]);\n      const actualId = idlLabelToId(hash);\n      if (expectedId === actualId) {\n        // the current field on the wire matches the expected field\n        x[expectKey] = expectType.decodeValue(b, type);\n        expectedRecordIdx++;\n        actualRecordIdx++;\n      } else if (actualId > expectedId) {\n        // The expected field does not exist on the wire\n        if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n          x[expectKey] = [];\n          expectedRecordIdx++;\n        } else {\n          throw new Error('Cannot find required field ' + expectKey);\n        }\n      } else {\n        // The field on the wire does not exist in the output type, so we can skip it\n        type.decodeValue(b, type);\n        actualRecordIdx++;\n      }\n    }\n    // initialize left over expected optional fields\n    for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {\n      if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n        // TODO this assumes null value in opt is represented as []\n        x[expectKey] = [];\n      } else {\n        throw new Error('Cannot find required field ' + expectKey);\n      }\n    }\n    return x;\n  }\n  get name() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n    return `record {${fields.join('; ')}}`;\n  }\n  display() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.display());\n    return `record {${fields.join('; ')}}`;\n  }\n  valueToString(x) {\n    const values = this._fields.map(([key]) => x[key]);\n    const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));\n    return `record {${fields.join('; ')}}`;\n  }\n}\n/**\n * Represents Tuple, a syntactic sugar for Record.\n * @param {Type} components\n */\nexport class TupleClass extends RecordClass {\n  constructor(_components) {\n    const x = {};\n    _components.forEach((e, i) => x['_' + i + '_'] = e);\n    super(x);\n    this._components = _components;\n  }\n  accept(v, d) {\n    return v.visitTuple(this, this._components, d);\n  }\n  covariant(x) {\n    // `>=` because tuples can be covariant when encoded.\n    if (Array.isArray(x) && x.length >= this._fields.length && this._components.every((t, i) => {\n      try {\n        return t.covariant(x[i]);\n      } catch (e) {\n        throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${i} -> ${e.message}`);\n      }\n    })) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));\n    return concat(...bufs);\n  }\n  decodeValue(b, t) {\n    const tuple = this.checkType(t);\n    if (!(tuple instanceof TupleClass)) {\n      throw new Error('not a tuple type');\n    }\n    if (tuple._components.length < this._components.length) {\n      throw new Error('tuple mismatch');\n    }\n    const res = [];\n    for (const [i, wireType] of tuple._components.entries()) {\n      if (i >= this._components.length) {\n        // skip value\n        wireType.decodeValue(b, wireType);\n      } else {\n        res.push(this._components[i].decodeValue(b, wireType));\n      }\n    }\n    return res;\n  }\n  display() {\n    const fields = this._components.map(value => value.display());\n    return `record {${fields.join('; ')}}`;\n  }\n  valueToString(values) {\n    const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));\n    return `record {${fields.join('; ')}}`;\n  }\n}\n/**\n * Represents an IDL Variant\n * @param {object} [fields] - mapping of function name to Type\n */\nexport class VariantClass extends ConstructType {\n  constructor(fields = {}) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n  accept(v, d) {\n    return v.visitVariant(this, this._fields, d);\n  }\n  covariant(x) {\n    if (typeof x === 'object' && Object.entries(x).length === 1 && this._fields.every(([k, v]) => {\n      try {\n        // eslint-disable-next-line\n        return !x.hasOwnProperty(k) || v.covariant(x[k]);\n      } catch (e) {\n        throw new Error(`Invalid ${this.display()} argument: \\n\\nvariant ${k} -> ${e.message}`);\n      }\n    })) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    for (let i = 0; i < this._fields.length; i++) {\n      const [name, type] = this._fields[i];\n      // eslint-disable-next-line\n      if (x.hasOwnProperty(name)) {\n        const idx = lebEncode(i);\n        const buf = type.encodeValue(x[name]);\n        return concat(idx, buf);\n      }\n    }\n    throw Error('Variant has no data: ' + x);\n  }\n  _buildTypeTableImpl(typeTable) {\n    this._fields.forEach(([, type]) => {\n      type.buildTypeTable(typeTable);\n    });\n    const opCode = slebEncode(-21 /* IDLTypeIds.Variant */);\n    const len = lebEncode(this._fields.length);\n    const fields = this._fields.map(([key, value]) => concat(lebEncode(idlLabelToId(key)), value.encodeType(typeTable)));\n    typeTable.add(this, concat(opCode, len, ...fields));\n  }\n  decodeValue(b, t) {\n    const variant = this.checkType(t);\n    if (!(variant instanceof VariantClass)) {\n      throw new Error('Not a variant type');\n    }\n    const idx = Number(lebDecode(b));\n    if (idx >= variant._fields.length) {\n      throw Error('Invalid variant index: ' + idx);\n    }\n    const [wireHash, wireType] = variant._fields[idx];\n    for (const [key, expectType] of this._fields) {\n      if (idlLabelToId(wireHash) === idlLabelToId(key)) {\n        const value = expectType.decodeValue(b, wireType);\n        return {\n          [key]: value\n        };\n      }\n    }\n    throw new Error('Cannot find field hash ' + wireHash);\n  }\n  get name() {\n    const fields = this._fields.map(([key, type]) => key + ':' + type.name);\n    return `variant {${fields.join('; ')}}`;\n  }\n  display() {\n    const fields = this._fields.map(([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`));\n    return `variant {${fields.join('; ')}}`;\n  }\n  valueToString(x) {\n    for (const [name, type] of this._fields) {\n      // eslint-disable-next-line\n      if (x.hasOwnProperty(name)) {\n        const value = type.valueToString(x[name]);\n        if (value === 'null') {\n          return `variant {${name}}`;\n        } else {\n          return `variant {${name}=${value}}`;\n        }\n      }\n    }\n    throw new Error('Variant has no data: ' + x);\n  }\n}\n/**\n * Represents a reference to an IDL type, used for defining recursive data\n * types.\n */\nexport class RecClass extends ConstructType {\n  constructor() {\n    super(...arguments);\n    this._id = RecClass._counter++;\n    this._type = undefined;\n  }\n  accept(v, d) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return v.visitRec(this, this._type, d);\n  }\n  fill(t) {\n    this._type = t;\n  }\n  getType() {\n    return this._type;\n  }\n  covariant(x) {\n    if (this._type ? this._type.covariant(x) : false) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.encodeValue(x);\n  }\n  _buildTypeTableImpl(typeTable) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    typeTable.add(this, new Uint8Array([]));\n    this._type.buildTypeTable(typeTable);\n    typeTable.merge(this, this._type.name);\n  }\n  decodeValue(b, t) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.decodeValue(b, t);\n  }\n  get name() {\n    return `rec_${this._id}`;\n  }\n  display() {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return `μ${this.name}.${this._type.name}`;\n  }\n  valueToString(x) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.valueToString(x);\n  }\n}\nRecClass._counter = 0;\nfunction decodePrincipalId(b) {\n  const x = safeReadUint8(b);\n  if (x !== 1) {\n    throw new Error('Cannot decode principal');\n  }\n  const len = Number(lebDecode(b));\n  return PrincipalId.fromUint8Array(new Uint8Array(safeRead(b, len)));\n}\n/**\n * Represents an IDL principal reference\n */\nexport class PrincipalClass extends PrimitiveType {\n  accept(v, d) {\n    return v.visitPrincipal(this, d);\n  }\n  covariant(x) {\n    if (x && x._isPrincipal) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const buf = x.toUint8Array();\n    const len = lebEncode(buf.byteLength);\n    return concat(new Uint8Array([1]), len, buf);\n  }\n  encodeType() {\n    return slebEncode(-24 /* IDLTypeIds.Principal */);\n  }\n  decodeValue(b, t) {\n    this.checkType(t);\n    return decodePrincipalId(b);\n  }\n  get name() {\n    return 'principal';\n  }\n  valueToString(x) {\n    return `${this.name} \"${x.toText()}\"`;\n  }\n}\n/**\n * Represents an IDL function reference.\n * @param argTypes Argument types.\n * @param retTypes Return types.\n * @param annotations Function annotations.\n */\nexport class FuncClass extends ConstructType {\n  constructor(argTypes, retTypes, annotations = []) {\n    super();\n    this.argTypes = argTypes;\n    this.retTypes = retTypes;\n    this.annotations = annotations;\n  }\n  static argsToString(types, v) {\n    if (types.length !== v.length) {\n      throw new Error('arity mismatch');\n    }\n    return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';\n  }\n  accept(v, d) {\n    return v.visitFunc(this, d);\n  }\n  covariant(x) {\n    if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue([principal, methodName]) {\n    const buf = principal.toUint8Array();\n    const len = lebEncode(buf.byteLength);\n    const canister = concat(new Uint8Array([1]), len, buf);\n    const method = new TextEncoder().encode(methodName);\n    const methodLen = lebEncode(method.byteLength);\n    return concat(new Uint8Array([1]), canister, methodLen, method);\n  }\n  _buildTypeTableImpl(T) {\n    this.argTypes.forEach(arg => arg.buildTypeTable(T));\n    this.retTypes.forEach(arg => arg.buildTypeTable(T));\n    const opCode = slebEncode(-22 /* IDLTypeIds.Func */);\n    const argLen = lebEncode(this.argTypes.length);\n    const args = concat(...this.argTypes.map(arg => arg.encodeType(T)));\n    const retLen = lebEncode(this.retTypes.length);\n    const rets = concat(...this.retTypes.map(arg => arg.encodeType(T)));\n    const annLen = lebEncode(this.annotations.length);\n    const anns = concat(...this.annotations.map(a => this.encodeAnnotation(a)));\n    T.add(this, concat(opCode, argLen, args, retLen, rets, annLen, anns));\n  }\n  decodeValue(b) {\n    const x = safeReadUint8(b);\n    if (x !== 1) {\n      throw new Error('Cannot decode function reference');\n    }\n    const canister = decodePrincipalId(b);\n    const mLen = Number(lebDecode(b));\n    const buf = safeRead(b, mLen);\n    const decoder = new TextDecoder('utf8', {\n      fatal: true\n    });\n    const method = decoder.decode(buf);\n    return [canister, method];\n  }\n  get name() {\n    const args = this.argTypes.map(arg => arg.name).join(', ');\n    const rets = this.retTypes.map(arg => arg.name).join(', ');\n    const annon = ' ' + this.annotations.join(' ');\n    return `(${args}) -> (${rets})${annon}`;\n  }\n  valueToString([principal, str]) {\n    return `func \"${principal.toText()}\".${str}`;\n  }\n  display() {\n    const args = this.argTypes.map(arg => arg.display()).join(', ');\n    const rets = this.retTypes.map(arg => arg.display()).join(', ');\n    const annon = ' ' + this.annotations.join(' ');\n    return `(${args}) → (${rets})${annon}`;\n  }\n  encodeAnnotation(ann) {\n    if (ann === 'query') {\n      return new Uint8Array([1]);\n    } else if (ann === 'oneway') {\n      return new Uint8Array([2]);\n    } else if (ann === 'composite_query') {\n      return new Uint8Array([3]);\n    } else {\n      throw new Error('Illegal function annotation');\n    }\n  }\n}\nexport class ServiceClass extends ConstructType {\n  constructor(fields) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n      if (a[0] > b[0]) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  accept(v, d) {\n    return v.visitService(this, d);\n  }\n  covariant(x) {\n    if (x && x._isPrincipal) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n  encodeValue(x) {\n    const buf = x.toUint8Array();\n    const len = lebEncode(buf.length);\n    return concat(new Uint8Array([1]), len, buf);\n  }\n  _buildTypeTableImpl(T) {\n    this._fields.forEach(([_, func]) => func.buildTypeTable(T));\n    const opCode = slebEncode(-23 /* IDLTypeIds.Service */);\n    const len = lebEncode(this._fields.length);\n    const meths = this._fields.map(([label, func]) => {\n      const labelBuf = new TextEncoder().encode(label);\n      const labelLen = lebEncode(labelBuf.length);\n      return concat(labelLen, labelBuf, func.encodeType(T));\n    });\n    T.add(this, concat(opCode, len, ...meths));\n  }\n  decodeValue(b) {\n    return decodePrincipalId(b);\n  }\n  get name() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n    return `service {${fields.join('; ')}}`;\n  }\n  valueToString(x) {\n    return `service \"${x.toText()}\"`;\n  }\n}\n/**\n * Takes an unknown value and returns a string representation of it.\n * @param x - unknown value\n * @returns {string} string representation of the value\n */\nfunction toReadableString(x) {\n  const str = JSON.stringify(x, (_key, value) => typeof value === 'bigint' ? `BigInt(${value})` : value);\n  return str && str.length > toReadableString_max ? str.substring(0, toReadableString_max - 3) + '...' : str;\n}\n/**\n * Encode a array of values\n * @param argTypes - array of Types\n * @param args - array of values\n * @returns {ArrayBuffer} serialised value\n */\nexport function encode(argTypes, args) {\n  if (args.length < argTypes.length) {\n    throw Error('Wrong number of message arguments');\n  }\n  const typeTable = new TypeTable();\n  argTypes.forEach(t => t.buildTypeTable(typeTable));\n  const magic = new TextEncoder().encode(magicNumber);\n  const table = typeTable.encode();\n  const len = lebEncode(args.length);\n  const typs = concat(...argTypes.map(t => t.encodeType(typeTable)));\n  const vals = concat(...zipWith(argTypes, args, (t, x) => {\n    try {\n      t.covariant(x);\n    } catch (e) {\n      const err = new Error(e.message + '\\n\\n');\n      throw err;\n    }\n    return t.encodeValue(x);\n  }));\n  return concat(magic, table, len, typs, vals);\n}\n/**\n * Decode a binary value\n * @param retTypes - Types expected in the buffer.\n * @param bytes - hex-encoded string, or buffer.\n * @returns Value deserialised to JS type\n */\nexport function decode(retTypes, bytes) {\n  const b = new Pipe(bytes);\n  if (bytes.byteLength < magicNumber.length) {\n    throw new Error('Message length smaller than magic number');\n  }\n  const magicBuffer = safeRead(b, magicNumber.length);\n  const magic = new TextDecoder().decode(magicBuffer);\n  if (magic !== magicNumber) {\n    throw new Error('Wrong magic number: ' + JSON.stringify(magic));\n  }\n  function readTypeTable(pipe) {\n    const typeTable = [];\n    const len = Number(lebDecode(pipe));\n    for (let i = 0; i < len; i++) {\n      const ty = Number(slebDecode(pipe));\n      switch (ty) {\n        case -18 /* IDLTypeIds.Opt */:\n        case -19 /* IDLTypeIds.Vector */:\n          {\n            const t = Number(slebDecode(pipe));\n            typeTable.push([ty, t]);\n            break;\n          }\n        case -20 /* IDLTypeIds.Record */:\n        case -21 /* IDLTypeIds.Variant */:\n          {\n            const fields = [];\n            let objectLength = Number(lebDecode(pipe));\n            let prevHash;\n            while (objectLength--) {\n              const hash = Number(lebDecode(pipe));\n              if (hash >= Math.pow(2, 32)) {\n                throw new Error('field id out of 32-bit range');\n              }\n              if (typeof prevHash === 'number' && prevHash >= hash) {\n                throw new Error('field id collision or not sorted');\n              }\n              prevHash = hash;\n              const t = Number(slebDecode(pipe));\n              fields.push([hash, t]);\n            }\n            typeTable.push([ty, fields]);\n            break;\n          }\n        case -22 /* IDLTypeIds.Func */:\n          {\n            const args = [];\n            let argLength = Number(lebDecode(pipe));\n            while (argLength--) {\n              args.push(Number(slebDecode(pipe)));\n            }\n            const returnValues = [];\n            let returnValuesLength = Number(lebDecode(pipe));\n            while (returnValuesLength--) {\n              returnValues.push(Number(slebDecode(pipe)));\n            }\n            const annotations = [];\n            let annotationLength = Number(lebDecode(pipe));\n            while (annotationLength--) {\n              const annotation = Number(lebDecode(pipe));\n              switch (annotation) {\n                case 1:\n                  {\n                    annotations.push('query');\n                    break;\n                  }\n                case 2:\n                  {\n                    annotations.push('oneway');\n                    break;\n                  }\n                case 3:\n                  {\n                    annotations.push('composite_query');\n                    break;\n                  }\n                default:\n                  throw new Error('unknown annotation');\n              }\n            }\n            typeTable.push([ty, [args, returnValues, annotations]]);\n            break;\n          }\n        case -23 /* IDLTypeIds.Service */:\n          {\n            let servLength = Number(lebDecode(pipe));\n            const methods = [];\n            while (servLength--) {\n              const nameLength = Number(lebDecode(pipe));\n              const funcName = new TextDecoder().decode(safeRead(pipe, nameLength));\n              const funcType = slebDecode(pipe);\n              methods.push([funcName, funcType]);\n            }\n            typeTable.push([ty, methods]);\n            break;\n          }\n        default:\n          throw new Error('Illegal op_code: ' + ty);\n      }\n    }\n    const rawList = [];\n    const length = Number(lebDecode(pipe));\n    for (let i = 0; i < length; i++) {\n      rawList.push(Number(slebDecode(pipe)));\n    }\n    return [typeTable, rawList];\n  }\n  const [rawTable, rawTypes] = readTypeTable(b);\n  if (rawTypes.length < retTypes.length) {\n    throw new Error('Wrong number of return values');\n  }\n  const table = rawTable.map(_ => Rec());\n  function getType(t) {\n    if (t < -24) {\n      throw new Error('future value not supported');\n    }\n    if (t < 0) {\n      switch (t) {\n        case -1:\n          return Null;\n        case -2:\n          return Bool;\n        case -3:\n          return Nat;\n        case -4:\n          return Int;\n        case -5:\n          return Nat8;\n        case -6:\n          return Nat16;\n        case -7:\n          return Nat32;\n        case -8:\n          return Nat64;\n        case -9:\n          return Int8;\n        case -10:\n          return Int16;\n        case -11:\n          return Int32;\n        case -12:\n          return Int64;\n        case -13:\n          return Float32;\n        case -14:\n          return Float64;\n        case -15:\n          return Text;\n        case -16:\n          return Reserved;\n        case -17:\n          return Empty;\n        case -24:\n          return Principal;\n        default:\n          throw new Error('Illegal op_code: ' + t);\n      }\n    }\n    if (t >= rawTable.length) {\n      throw new Error('type index out of range');\n    }\n    return table[t];\n  }\n  function buildType(entry) {\n    switch (entry[0]) {\n      case -19 /* IDLTypeIds.Vector */:\n        {\n          const ty = getType(entry[1]);\n          return Vec(ty);\n        }\n      case -18 /* IDLTypeIds.Opt */:\n        {\n          const ty = getType(entry[1]);\n          return Opt(ty);\n        }\n      case -20 /* IDLTypeIds.Record */:\n        {\n          const fields = {};\n          for (const [hash, ty] of entry[1]) {\n            const name = `_${hash}_`;\n            fields[name] = getType(ty);\n          }\n          const record = Record(fields);\n          const tuple = record.tryAsTuple();\n          if (Array.isArray(tuple)) {\n            return Tuple(...tuple);\n          } else {\n            return record;\n          }\n        }\n      case -21 /* IDLTypeIds.Variant */:\n        {\n          const fields = {};\n          for (const [hash, ty] of entry[1]) {\n            const name = `_${hash}_`;\n            fields[name] = getType(ty);\n          }\n          return Variant(fields);\n        }\n      case -22 /* IDLTypeIds.Func */:\n        {\n          const [args, returnValues, annotations] = entry[1];\n          return Func(args.map(t => getType(t)), returnValues.map(t => getType(t)), annotations);\n        }\n      case -23 /* IDLTypeIds.Service */:\n        {\n          const rec = {};\n          const methods = entry[1];\n          for (const [name, typeRef] of methods) {\n            let type = getType(typeRef);\n            if (type instanceof RecClass) {\n              // unpack reference type\n              type = type.getType();\n            }\n            if (!(type instanceof FuncClass)) {\n              throw new Error('Illegal service definition: services can only contain functions');\n            }\n            rec[name] = type;\n          }\n          return Service(rec);\n        }\n      default:\n        throw new Error('Illegal op_code: ' + entry[0]);\n    }\n  }\n  rawTable.forEach((entry, i) => {\n    // Process function type first, so that we can construct the correct service type\n    if (entry[0] === -22 /* IDLTypeIds.Func */) {\n      const t = buildType(entry);\n      table[i].fill(t);\n    }\n  });\n  rawTable.forEach((entry, i) => {\n    if (entry[0] !== -22 /* IDLTypeIds.Func */) {\n      const t = buildType(entry);\n      table[i].fill(t);\n    }\n  });\n  const types = rawTypes.map(t => getType(t));\n  const output = retTypes.map((t, i) => {\n    return t.decodeValue(b, types[i]);\n  });\n  // skip unused values\n  for (let ind = retTypes.length; ind < types.length; ind++) {\n    types[ind].decodeValue(b, types[ind]);\n  }\n  if (b.byteLength > 0) {\n    throw new Error('decode: Left-over bytes');\n  }\n  return output;\n}\n// Export Types instances.\nexport const Empty = new EmptyClass();\nexport const Reserved = new ReservedClass();\n/**\n * Client-only type for deserializing unknown data. Not supported by Candid, and its use is discouraged.\n */\nexport const Unknown = new UnknownClass();\nexport const Bool = new BoolClass();\nexport const Null = new NullClass();\nexport const Text = new TextClass();\nexport const Int = new IntClass();\nexport const Nat = new NatClass();\nexport const Float32 = new FloatClass(32);\nexport const Float64 = new FloatClass(64);\nexport const Int8 = new FixedIntClass(8);\nexport const Int16 = new FixedIntClass(16);\nexport const Int32 = new FixedIntClass(32);\nexport const Int64 = new FixedIntClass(64);\nexport const Nat8 = new FixedNatClass(8);\nexport const Nat16 = new FixedNatClass(16);\nexport const Nat32 = new FixedNatClass(32);\nexport const Nat64 = new FixedNatClass(64);\nexport const Principal = new PrincipalClass();\n/**\n *\n * @param types array of any types\n * @returns TupleClass from those types\n */\nexport function Tuple(...types) {\n  return new TupleClass(types);\n}\n/**\n *\n * @param t IDL Type\n * @returns VecClass from that type\n */\nexport function Vec(t) {\n  return new VecClass(t);\n}\n/**\n *\n * @param t IDL Type\n * @returns OptClass of Type\n */\nexport function Opt(t) {\n  return new OptClass(t);\n}\n/**\n *\n * @param t Record of string and IDL Type\n * @returns RecordClass of string and Type\n */\nexport function Record(t) {\n  return new RecordClass(t);\n}\n/**\n *\n * @param fields Record of string and IDL Type\n * @returns VariantClass\n */\nexport function Variant(fields) {\n  return new VariantClass(fields);\n}\n/**\n *\n * @returns new RecClass\n */\nexport function Rec() {\n  return new RecClass();\n}\n/**\n *\n * @param args array of IDL Types\n * @param ret array of IDL Types\n * @param annotations array of strings, [] by default\n * @returns new FuncClass\n */\nexport function Func(args, ret, annotations = []) {\n  return new FuncClass(args, ret, annotations);\n}\n/**\n *\n * @param t Record of string and FuncClass\n * @returns ServiceClass\n */\nexport function Service(t) {\n  return new ServiceClass(t);\n}\n", "/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers) {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result;\n}\n/**\n * Returns an hexadecimal representation of an array buffer.\n * @param bytes The array buffer.\n */\nexport function toHexString(bytes) {\n  return new Uint8Array(bytes).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n/**\n * Return an array buffer from its hexadecimal representation.\n * @param hexString The hexadecimal string.\n */\nexport function fromHexString(hexString) {\n  var _a;\n  return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16)));\n}\n/**\n * A class that abstracts a pipe-like ArrayBuffer.\n */\nexport class PipeArrayBuffer {\n  /**\n   * Creates a new instance of a pipe\n   * @param buffer an optional buffer to start with\n   * @param length an optional amount of bytes to use for the length.\n   */\n  constructor(buffer, length = (buffer === null || buffer === void 0 ? void 0 : buffer.byteLength) || 0) {\n    this._buffer = bufFromBufLike(buffer || new ArrayBuffer(0));\n    this._view = new Uint8Array(this._buffer, 0, length);\n  }\n  get buffer() {\n    // Return a copy of the buffer.\n    return bufFromBufLike(this._view.slice());\n  }\n  get byteLength() {\n    return this._view.byteLength;\n  }\n  /**\n   * Read `num` number of bytes from the front of the pipe.\n   * @param num The number of bytes to read.\n   */\n  read(num) {\n    const result = this._view.subarray(0, num);\n    this._view = this._view.subarray(num);\n    return result.slice().buffer;\n  }\n  readUint8() {\n    const result = this._view[0];\n    this._view = this._view.subarray(1);\n    return result;\n  }\n  /**\n   * Write a buffer to the end of the pipe.\n   * @param buf The bytes to write.\n   */\n  write(buf) {\n    const b = new Uint8Array(buf);\n    const offset = this._view.byteLength;\n    if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {\n      // Alloc grow the view to include the new bytes.\n      this.alloc(b.byteLength);\n    } else {\n      // Update the view to include the new bytes.\n      this._view = new Uint8Array(this._buffer, this._view.byteOffset, this._view.byteLength + b.byteLength);\n    }\n    this._view.set(b, offset);\n  }\n  /**\n   * Whether or not there is more data to read from the buffer\n   */\n  get end() {\n    return this._view.byteLength === 0;\n  }\n  /**\n   * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n   * @param amount A number of bytes to add to the buffer.\n   */\n  alloc(amount) {\n    // Add a little bit of exponential growth.\n    const b = new ArrayBuffer((this._buffer.byteLength + amount) * 1.2 | 0);\n    const v = new Uint8Array(b, 0, this._view.byteLength + amount);\n    v.set(this._view);\n    this._buffer = b;\n    this._view = v;\n  }\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr) {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nexport function bufFromBufLike(bufLike) {\n  if (bufLike instanceof Uint8Array) {\n    return uint8ToBuf(bufLike);\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return bufLike;\n  }\n  if (Array.isArray(bufLike)) {\n    return uint8ToBuf(new Uint8Array(bufLike));\n  }\n  if ('buffer' in bufLike) {\n    return bufFromBufLike(bufLike.buffer);\n  }\n  return uint8ToBuf(new Uint8Array(bufLike));\n}\n", "/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s - string to hash\n * @returns number representing hashed string\n */\nfunction idlHash(s) {\n  const utf8encoder = new TextEncoder();\n  const array = utf8encoder.encode(s);\n  let h = 0;\n  for (const c of array) {\n    h = (h * 223 + c) % 2 ** 32;\n  }\n  return h;\n}\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\nexport function idlLabelToId(label) {\n  if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n    const num = +label.slice(1, -1);\n    if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {\n      return num;\n    }\n  }\n  return idlHash(label);\n}\n", "/* eslint-disable no-constant-condition */\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\nimport { PipeArrayBuffer as Pipe } from './buffer';\nfunction eob() {\n  throw new Error('unexpected end of buffer');\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Buffer\n */\nexport function safeRead(pipe, num) {\n  if (pipe.byteLength < num) {\n    eob();\n  }\n  return pipe.read(num);\n}\n/**\n * @param pipe - PipeArrayBuffer simulating buffer-pipe api\n */\nexport function safeReadUint8(pipe) {\n  const byte = pipe.readUint8();\n  if (byte === undefined) {\n    eob();\n  }\n  return byte;\n}\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nexport function lebEncode(value) {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n  if (value < BigInt(0)) {\n    throw new Error('Cannot leb encode negative values.');\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = Number(value & BigInt(0x7f));\n    value /= BigInt(0x80);\n    if (value === BigInt(0)) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n  return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nexport function lebDecode(pipe) {\n  let weight = BigInt(1);\n  let value = BigInt(0);\n  let byte;\n  do {\n    byte = safeReadUint8(pipe);\n    value += BigInt(byte & 0x7f).valueOf() * weight;\n    weight *= BigInt(128);\n  } while (byte >= 0x80);\n  return value;\n}\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nexport function slebEncode(value) {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n  const isNeg = value < BigInt(0);\n  if (isNeg) {\n    value = -value - BigInt(1);\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = getLowerBytes(value);\n    value /= BigInt(0x80);\n    // prettier-ignore\n    if (isNeg && value === BigInt(0) && (i & 0x40) !== 0 || !isNeg && value === BigInt(0) && (i & 0x40) === 0) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n  function getLowerBytes(num) {\n    const bytes = num % BigInt(0x80);\n    if (isNeg) {\n      // We swap the bits here again, and remove 1 to do two's complement.\n      return Number(BigInt(0x80) - bytes - BigInt(1));\n    } else {\n      return Number(bytes);\n    }\n  }\n  return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nexport function slebDecode(pipe) {\n  // Get the size of the buffer, then cut a buffer of that size.\n  const pipeView = new Uint8Array(pipe.buffer);\n  let len = 0;\n  for (; len < pipeView.byteLength; len++) {\n    if (pipeView[len] < 0x80) {\n      // If it's a positive number, we reuse lebDecode.\n      if ((pipeView[len] & 0x40) === 0) {\n        return lebDecode(pipe);\n      }\n      break;\n    }\n  }\n  const bytes = new Uint8Array(safeRead(pipe, len + 1));\n  let value = BigInt(0);\n  for (let i = bytes.byteLength - 1; i >= 0; i--) {\n    value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n  }\n  return -value - BigInt(1);\n}\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Buffer\n */\nexport function writeUIntLE(value, byteLength) {\n  if (BigInt(value) < BigInt(0)) {\n    throw new Error('Cannot write negative values.');\n  }\n  return writeIntLE(value, byteLength);\n}\n/**\n *\n * @param value - bigint or number\n * @param byteLength - number\n * @returns ArrayBuffer\n */\nexport function writeIntLE(value, byteLength) {\n  value = BigInt(value);\n  const pipe = new Pipe(new ArrayBuffer(Math.min(1, byteLength)), 0);\n  let i = 0;\n  let mul = BigInt(256);\n  let sub = BigInt(0);\n  let byte = Number(value % mul);\n  pipe.write(new Uint8Array([byte]));\n  while (++i < byteLength) {\n    if (value < 0 && sub === BigInt(0) && byte !== 0) {\n      sub = BigInt(1);\n    }\n    byte = Number((value / mul - sub) % BigInt(256));\n    pipe.write(new Uint8Array([byte]));\n    mul *= BigInt(256);\n  }\n  return pipe.buffer;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readUIntLE(pipe, byteLength) {\n  let val = BigInt(safeReadUint8(pipe));\n  let mul = BigInt(1);\n  let i = 0;\n  while (++i < byteLength) {\n    mul *= BigInt(256);\n    const byte = BigInt(safeReadUint8(pipe));\n    val = val + mul * byte;\n  }\n  return val;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readIntLE(pipe, byteLength) {\n  let val = readUIntLE(pipe, byteLength);\n  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n  if (val >= mul) {\n    val -= mul * BigInt(2);\n  }\n  return val;\n}\n", "/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n * @param n bigint or integer\n * @returns integer\n */\nexport function ilog2(n) {\n  const nBig = BigInt(n);\n  if (n <= 0) {\n    throw new RangeError('Input must be positive');\n  }\n  return nBig.toString(2).length - 1;\n}\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n * @param n bigint or integer\n * @returns bigint\n */\nexport function iexp2(n) {\n  const nBig = BigInt(n);\n  if (n < 0) {\n    throw new RangeError('Input must be non-negative');\n  }\n  return BigInt(1) << nBig;\n}\n", "import { lebEncode } from '@dfinity/candid';\nimport borc from 'borc';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { compare, concat, uint8ToBuf } from './utils/buffer';\n/**\n * sha256 hash the provided Buffer\n * @param data - input to hash function\n */\nexport function hash(data) {\n  return uint8ToBuf(sha256.create().update(new Uint8Array(data)).digest());\n}\n/**\n *\n * @param value unknown value\n * @returns ArrayBuffer\n */\nexport function hashValue(value) {\n  if (value instanceof borc.Tagged) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return hashValue(value.value);\n  } else if (typeof value === 'string') {\n    return hashString(value);\n  } else if (typeof value === 'number') {\n    return hash(lebEncode(value));\n  } else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n    return hash(value);\n  } else if (Array.isArray(value)) {\n    const vals = value.map(hashValue);\n    return hash(concat(...vals));\n  } else if (value && typeof value === 'object' && value._isPrincipal) {\n    return hash(value.toUint8Array());\n  } else if (typeof value === 'object' && value !== null && typeof value.toHash === 'function') {\n    return hashValue(value.toHash());\n    // TODO This should be move to a specific async method as the webauthn flow required\n    // the flow to be synchronous to ensure Safari touch id works.\n    // } else if (value instanceof Promise) {\n    //   return value.then(x => hashValue(x));\n  } else if (typeof value === 'object') {\n    return hashOfMap(value);\n  } else if (typeof value === 'bigint') {\n    // Do this check much later than the other bigint check because this one is much less\n    // type-safe.\n    // So we want to try all the high-assurance type guards before this 'probable' one.\n    return hash(lebEncode(value));\n  }\n  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {\n    // include so logs/callers can understand the confusing value.\n    // (when stringified in error message, prototype info is lost)\n    value\n  });\n}\nconst hashString = value => {\n  const encoded = new TextEncoder().encode(value);\n  return hash(encoded);\n};\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\nexport function requestIdOf(request) {\n  return hashOfMap(request);\n}\n/**\n * Hash a map into an ArrayBuffer using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns ArrayBuffer\n */\nexport function hashOfMap(map) {\n  const hashed = Object.entries(map).filter(([, value]) => value !== undefined).map(([key, value]) => {\n    const hashedKey = hashString(key);\n    const hashedValue = hashValue(value);\n    return [hashedKey, hashedValue];\n  });\n  const traversed = hashed;\n  const sorted = traversed.sort(([k1], [k2]) => {\n    return compare(k1, k2);\n  });\n  const concatenated = concat(...sorted.map(x => concat(...x)));\n  const result = hash(concatenated);\n  return result;\n}\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */BigInt(0);\nconst _1n = /* @__PURE__ */BigInt(1);\nconst _2n = /* @__PURE__ */BigInt(2);\nexport function isBytes(a) {\n  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\nexport function abytes(item) {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */Array.from({\n  length: 256\n}, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\nexport function numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n  _0: 48,\n  _9: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102\n};\nfunction asciiToBase16(ch) {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n  let res;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = n => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max)) throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n  return n >> BigInt(pos) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n  return n | (value ? _1n : _0n) << BigInt(pos);\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = n => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = data => new Uint8Array(data); // creates Uint8Array\nconst u8fr = arr => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed, pred) => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n  bigint: val => typeof val === 'bigint',\n  function: val => typeof val === 'function',\n  boolean: val => typeof val === 'boolean',\n  string: val => typeof val === 'string',\n  stringOrUint8Array: val => typeof val === 'string' || isBytes(val),\n  isSafeInteger: val => Number.isSafeInteger(val),\n  array: val => Array.isArray(val),\n  field: (val, object) => object.Fp.isValid(val),\n  hash: val => typeof val === 'function' && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n  const checkField = (fieldName, type, isOptional) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n    const val = object[fieldName];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n  throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n  const map = new WeakMap();\n  return (arg, ...args) => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = /* @__PURE__ */BigInt(2),\n  _3n = /* @__PURE__ */BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */BigInt(4),\n  _5n = /* @__PURE__ */BigInt(5),\n  _8n = /* @__PURE__ */BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */BigInt(9),\n  _16n = /* @__PURE__ */BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (modulo <= _0n) throw new Error('invalid modulus');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = res * num % modulo;\n    num = num * num % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n  let Q, S, Z;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n    // Crash instead of infinity loop, we cannot reasonable count until P.\n    if (Z > 1000) throw new Error('Cannot find square root: likely non-prime P');\n  }\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast(Fp, n) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow(Fp, n) {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4(Fp, n) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8(Fp, n) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\nexport function validateField(field) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger'\n  };\n  const opts = FIELD_FIELDS.reduce((map, val) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order) {\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n  const legendre = FpLegendre(f.ORDER);\n  return x => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return {\n    nBitLength: _nBitLength,\n    nByteLength\n  };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const {\n    nBitLength: BITS,\n    nByteLength: BYTES\n  } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP; // cached sqrtP\n  const f = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: num => mod(num, ORDER),\n    isValid: num => {\n      if (typeof num !== 'bigint') throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: num => num === _0n,\n    isOdd: num => (num & _1n) === _1n,\n    neg: num => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n    sqr: num => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n    // Same as above, but doesn't normalize\n    sqrN: num => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n    inv: num => invert(num, ORDER),\n    sqrt: redef.sqrt || (n => {\n      if (!sqrtP) sqrtP = FpSqrt(ORDER);\n      return sqrtP(f, n);\n    }),\n    invertBatch: lst => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => c ? b : a,\n    toBytes: num => isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),\n    fromBytes: bytes => {\n      if (bytes.length !== BYTES) throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    }\n  });\n  return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024) throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "import { mod } from './modular.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << 8 * length) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({\n    length\n  }).fill(0);\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\nfunction anum(item) {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const {\n    outputLen: b_in_bytes,\n    blockLen: r_in_bytes\n  } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil(2 * k / 8);\n    DST = H.create({\n      dkLen\n    }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n  return H.create({\n    dkLen: lenInBytes\n  }).update(msg).update(i2osp(lenInBytes, 2))\n  // 2. DST_prime = DST || I2OSP(len(DST), 1)\n  .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash'\n  });\n  const {\n    p,\n    k,\n    m,\n    hash,\n    expand,\n    DST: _DST\n  } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\nexport function isogenyMap(field, map) {\n  // Make same order as in spec\n  const COEFF = map.map(i => Array.from(i).reverse());\n  return (x, y) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return {\n      x: x,\n      y: y\n    };\n  };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher(Point, mapToCurve, def) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg, options) {\n      const u = hash_to_field(msg, 2, {\n        ...def,\n        DST: def.DST,\n        ...options\n      });\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg, options) {\n      const u = hash_to_field(msg, 1, {\n        ...def,\n        DST: def.encodeDST,\n        ...options\n      });\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars) {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars) if (typeof i !== 'bigint') throw new Error('mapToCurve: expected array of bigints');\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    }\n  };\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n  validateW(W, bits);\n  const windows = Math.ceil(bits / W) + 1; // +1, because\n  const windowSize = 2 ** (W - 1); // -1 because we skip zero\n  return {\n    windows,\n    windowSize\n  };\n}\nfunction validateMSMPoints(points, c) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars, field) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n  return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n  return {\n    constTimeNegate,\n    hasPrecomputes(elm) {\n      return getW(elm) !== 1;\n    },\n    // non-const time multiplication ladder\n    unsafeLadder(elm, n, p = c.ZERO) {\n      let d = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm, W) {\n      const {\n        windows,\n        windowSize\n      } = calcWOpts(W, bits);\n      const points = [];\n      let p = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W, precomputes, n) {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const {\n        windows,\n        windowSize\n      } = calcWOpts(W, bits);\n      let p = c.ZERO;\n      let f = c.BASE;\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n        // Shift number by W bits.\n        n >>= shiftBy;\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return {\n        p,\n        f\n      };\n    },\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n      const {\n        windows,\n        windowSize\n      } = calcWOpts(W, bits);\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        if (n === _0n) break; // No need to go over empty scalar\n        // Extract W bits.\n        let wbits = Number(n & mask);\n        // Shift number by W bits.\n        n >>= shiftBy;\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        if (wbits === 0) continue;\n        let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n        if (wbits < 0) curr = curr.negate();\n        // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n        acc = acc.add(curr);\n      }\n      return acc;\n    },\n    getPrecomputes(W, P, transform) {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W);\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n    wNAFCached(P, n, transform) {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n    wNAFCachedUnsafe(P, n, transform, prev) {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    setWindowSize(P, W) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    }\n  };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  if (points.length !== scalars.length) throw new Error('arrays of points and scalars must have equal length');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number(scalar >> BigInt(i) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = BigInt((1 << windowSize) - 1);\n  const tables = points.map(p => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return scalars => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length) throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number(n >> shiftBy & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\nexport function validateBasic(curve) {\n  validateField(curve.Fp);\n  validateObject(curve, {\n    n: 'bigint',\n    h: 'bigint',\n    Gx: 'field',\n    Gy: 'field'\n  }, {\n    nBitLength: 'isSafeInteger',\n    nByteLength: 'isSafeInteger'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{\n      p: curve.Fp.ORDER\n    }\n  });\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    a: 'field',\n    b: 'field'\n  }, {\n    allowedPrivateKeyLengths: 'array',\n    wrapPrivateKey: 'boolean',\n    isTorsionFree: 'function',\n    clearCofactor: 'function',\n    allowInfinityPoint: 'boolean',\n    fromBytes: 'function',\n    toBytes: 'function'\n  });\n  const {\n    endo,\n    Fp,\n    a\n  } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({\n    ...opts\n  });\n}\nconst {\n  bytesToNumberBE: b2n,\n  hexToBytes: h2b\n} = ut;\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag, data) => {\n      const {\n        Err: E\n      } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded(len.length / 2 | 128) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag, data) {\n      const {\n        Err: E\n      } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 127;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = length << 8 | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return {\n        v,\n        l: data.subarray(pos + length)\n      };\n    }\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num) {\n      const {\n        Err: E\n      } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data) {\n      const {\n        Err: E\n      } = DER;\n      if (data[0] & 128) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    }\n  },\n  toSig(hex) {\n    // parse DER signature\n    const {\n      Err: E,\n      _int: int,\n      _tlv: tlv\n    } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const {\n      v: seqBytes,\n      l: seqLeftBytes\n    } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const {\n      v: rBytes,\n      l: rLeftBytes\n    } = tlv.decode(0x02, seqBytes);\n    const {\n      v: sBytes,\n      l: sLeftBytes\n    } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return {\n      r: int.decode(rBytes),\n      s: int.decode(sBytes)\n    };\n  },\n  hexFromSig(sig) {\n    const {\n      _tlv: tlv,\n      _int: int\n    } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n  const CURVE = validatePointOpts(opts);\n  const {\n    Fp\n  } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n  const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {\n    const a = point.toAffine();\n    return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n  });\n  const fromBytes = CURVE.fromBytes || (bytes => {\n    // const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n    return {\n      x,\n      y\n    };\n  });\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    const {\n      a,\n      b\n    } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num) {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key) {\n    const {\n      allowedPrivateKeyLengths: lengths,\n      nByteLength,\n      wrapPrivateKey,\n      n: N\n    } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num;\n    try {\n      num = typeof key === 'bigint' ? key : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n  function assertPrjPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p, iz) => {\n    const {\n      px: x,\n      py: y,\n      pz: z\n    } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return {\n      x,\n      y\n    };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return {\n      x: Fp.ZERO,\n      y: Fp.ZERO\n    };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return {\n      x: ax,\n      y: ay\n    };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized(p => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const {\n      x,\n      y\n    } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point {\n    constructor(px, py, pz) {\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p) {\n      const {\n        x,\n        y\n      } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = i => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n    // Multiscalar Multiplication\n    static msm(points, scalars) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // A point on curve is valid if it conforms to equation.\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    hasEvenY() {\n      const {\n        y\n      } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n    /**\n     * Compare one point to another.\n     */\n    equals(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate() {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const {\n        a,\n        b\n      } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc) {\n      const {\n        endo,\n        n: N\n      } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this)) return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n      // Case c: endomorphism\n      let {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      const {\n        endo,\n        n: N\n      } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point, fake; // Fake point is used to const-time mult\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = endo.splitScalar(scalar);\n        let {\n          p: k1p,\n          f: f1p\n        } = this.wNAF(k1);\n        let {\n          p: k2p,\n          f: f2p\n        } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const {\n          p,\n          f\n        } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q, a, b) {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (P, a // Select faster multiply() method\n      ) => a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz) {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree() {\n      const {\n        h: cofactor,\n        isTorsionFree\n      } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor() {\n      const {\n        h: cofactor,\n        clearCofactor\n      } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this);\n      return this.multiplyUnsafe(CURVE.h);\n    }\n    toRawBytes(isCompressed = true) {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n    toHex(isCompressed = true) {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  };\n}\nfunction validateOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    hash: 'hash',\n    hmac: 'function',\n    randomBytes: 'function'\n  }, {\n    bits2int: 'function',\n    bits2int_modN: 'function',\n    lowS: 'boolean'\n  });\n  return Object.freeze({\n    lowS: true,\n    ...opts\n  });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER\n  } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n  function modN(a) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a) {\n    return invert(a, CURVE_ORDER);\n  }\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed) {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n          x,\n          y\n        };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n      }\n    }\n  });\n  const numToNByteStr = num => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature {\n    constructor(r, s, recovery) {\n      this.r = r;\n      this.s = s;\n      this.recovery = recovery;\n      this.assertValidity();\n    }\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex) {\n      const {\n        r,\n        s\n      } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n    assertValidity() {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    recoverPublicKey(msgHash) {\n      const {\n        r,\n        s,\n        recovery: rec\n      } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({\n        r: this.r,\n        s: this.s\n      });\n    }\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  const utils = {\n    isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: () => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey, isCompressed = true) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB, isCompressed = true) {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int = CURVE.bits2int || function (bytes) {\n    // Our custom check \"just in case\"\n    if (bytes.length > 8192) throw new Error('input is too large');\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n    const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n    return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n    const {\n      hash,\n      randomBytes\n    } = CURVE;\n    let {\n      lowS,\n      prehash,\n      extraEntropy: ent\n    } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return {\n      seed,\n      k2sig\n    };\n  }\n  const defaultSigOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  const defaultVerOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey, opts = defaultSigOpts) {\n    const {\n      seed,\n      k2sig\n    } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const {\n      lowS,\n      prehash,\n      format\n    } = opts;\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der') throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj = !isHex && !format && typeof sg === 'object' && sg !== null && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n    if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    let _sig = undefined;\n    let P;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const {\n      r,\n      s\n    } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils\n  };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u, v) => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u, v) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return u => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const {\n      isValid,\n      value\n    } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return {\n      x,\n      y\n    };\n  };\n}\n", "/**\n * BLS (Barreto-Lynn-Scott) family of pairing-friendly curves.\n * BLS != BLS.\n * The file implements BLS (Boneh-Lynn-Shacham) signatures.\n * Used in both BLS (Barreto-Lynn-Scott) and BN (Barreto-Naehrig)\n * families of pairing-friendly curves.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * There are two main ways to use it:\n * 1. Fp for short private keys, Fp₂ for signatures\n * 2. Fp for short signatures, Fp₂ for private keys\n * @module\n **/\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// TODO: import { AffinePoint } from './curve.js';\nimport { getMinHashLength, mapHashToField } from './modular.js';\nimport { ensureBytes, memoized } from './utils.js';\n// prettier-ignore\nimport { createHasher } from './hash-to-curve.js';\nimport { weierstrassPoints } from './weierstrass.js';\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\n// Not used with BLS12-381 (no sequential `11` in X). Useful for other curves.\nfunction NAfDecomposition(a) {\n  const res = [];\n  // a>1 because of marker bit\n  for (; a > _1n; a >>= _1n) {\n    if ((a & _1n) === _0n) res.unshift(0);else if ((a & _3n) === _3n) {\n      res.unshift(-1);\n      a += _1n;\n    } else res.unshift(1);\n  }\n  return res;\n}\nexport function bls(CURVE) {\n  // Fields are specific for curve, so for now we'll need to pass them with opts\n  const {\n    Fp,\n    Fr,\n    Fp2,\n    Fp6,\n    Fp12\n  } = CURVE.fields;\n  const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;\n  const TWIST = CURVE.params.twistType;\n  // Point on G1 curve: (x, y)\n  const G1_ = weierstrassPoints({\n    n: Fr.ORDER,\n    ...CURVE.G1\n  });\n  const G1 = Object.assign(G1_, createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {\n    ...CURVE.htfDefaults,\n    ...CURVE.G1.htfDefaults\n  }));\n  // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\n  const G2_ = weierstrassPoints({\n    n: Fr.ORDER,\n    ...CURVE.G2\n  });\n  const G2 = Object.assign(G2_, createHasher(G2_.ProjectivePoint, CURVE.G2.mapToCurve, {\n    ...CURVE.htfDefaults,\n    ...CURVE.G2.htfDefaults\n  }));\n  // Applies sparse multiplication as line function\n  let lineFunction;\n  if (TWIST === 'multiplicative') {\n    lineFunction = (c0, c1, c2, f, Px, Py) => Fp12.mul014(f, c0, Fp2.mul(c1, Px), Fp2.mul(c2, Py));\n  } else if (TWIST === 'divisive') {\n    // NOTE: it should be [c0, c1, c2], but we use different order here to reduce complexity of\n    // precompute calculations.\n    lineFunction = (c0, c1, c2, f, Px, Py) => Fp12.mul034(f, Fp2.mul(c2, Py), Fp2.mul(c1, Px), c0);\n  } else throw new Error('bls: unknown twist type');\n  const Fp2div2 = Fp2.div(Fp2.ONE, Fp2.mul(Fp2.ONE, _2n));\n  function pointDouble(ell, Rx, Ry, Rz) {\n    const t0 = Fp2.sqr(Ry); // Ry²\n    const t1 = Fp2.sqr(Rz); // Rz²\n    const t2 = Fp2.mulByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n    const t3 = Fp2.mul(t2, _3n); // 3 * T2\n    const t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\n    const c0 = Fp2.sub(t2, t0); // T2 - T0 (i)\n    const c1 = Fp2.mul(Fp2.sqr(Rx), _3n); // 3 * Rx²\n    const c2 = Fp2.neg(t4); // -T4 (-h)\n    ell.push([c0, c1, c2]);\n    Rx = Fp2.mul(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), Fp2div2); // ((T0 - T3) * Rx * Ry) / 2\n    Ry = Fp2.sub(Fp2.sqr(Fp2.mul(Fp2.add(t0, t3), Fp2div2)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\n    Rz = Fp2.mul(t0, t4); // T0 * T4\n    return {\n      Rx,\n      Ry,\n      Rz\n    };\n  }\n  function pointAdd(ell, Rx, Ry, Rz, Qx, Qy) {\n    // Addition\n    const t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n    const t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n    const c0 = Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)); // T0 * Qx - T1 * Qy == Ry * Qx  - Rx * Qy\n    const c1 = Fp2.neg(t0); // -T0 == Qy * Rz - Ry\n    const c2 = t1; // == Rx - Qx * Rz\n    ell.push([c0, c1, c2]);\n    const t2 = Fp2.sqr(t1); // T1²\n    const t3 = Fp2.mul(t2, t1); // T2 * T1\n    const t4 = Fp2.mul(t2, Rx); // T2 * Rx\n    const t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\n    Rx = Fp2.mul(t1, t5); // T1 * T5\n    Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n    Rz = Fp2.mul(Rz, t3); // Rz * T3\n    return {\n      Rx,\n      Ry,\n      Rz\n    };\n  }\n  // Pre-compute coefficients for sparse multiplication\n  // Point addition and point double calculations is reused for coefficients\n  // pointAdd happens only if bit set, so wNAF is reasonable. Unfortunately we cannot combine\n  // add + double in windowed precomputes here, otherwise it would be single op (since X is static)\n  const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);\n  const calcPairingPrecomputes = memoized(point => {\n    const p = point;\n    const {\n      x,\n      y\n    } = p.toAffine();\n    // prettier-ignore\n    const Qx = x,\n      Qy = y,\n      negQy = Fp2.neg(y);\n    // prettier-ignore\n    let Rx = Qx,\n      Ry = Qy,\n      Rz = Fp2.ONE;\n    const ell = [];\n    for (const bit of ATE_NAF) {\n      const cur = [];\n      ({\n        Rx,\n        Ry,\n        Rz\n      } = pointDouble(cur, Rx, Ry, Rz));\n      if (bit) ({\n        Rx,\n        Ry,\n        Rz\n      } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));\n      ell.push(cur);\n    }\n    if (CURVE.postPrecompute) {\n      const last = ell[ell.length - 1];\n      CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));\n    }\n    return ell;\n  });\n  function millerLoopBatch(pairs, withFinalExponent = false) {\n    let f12 = Fp12.ONE;\n    if (pairs.length) {\n      const ellLen = pairs[0][0].length;\n      for (let i = 0; i < ellLen; i++) {\n        f12 = Fp12.sqr(f12); // This allows us to do sqr only one time for all pairings\n        // NOTE: we apply multiple pairings in parallel here\n        for (const [ell, Px, Py] of pairs) {\n          for (const [c0, c1, c2] of ell[i]) f12 = lineFunction(c0, c1, c2, f12, Px, Py);\n        }\n      }\n    }\n    if (BLS_X_IS_NEGATIVE) f12 = Fp12.conjugate(f12);\n    return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;\n  }\n  // Calculates product of multiple pairings\n  // This up to x2 faster than just `map(({g1, g2})=>pairing({g1,g2}))`\n  function pairingBatch(pairs, withFinalExponent = true) {\n    const res = [];\n    // This cache precomputed toAffine for all points\n    G1.ProjectivePoint.normalizeZ(pairs.map(({\n      g1\n    }) => g1));\n    G2.ProjectivePoint.normalizeZ(pairs.map(({\n      g2\n    }) => g2));\n    for (const {\n      g1,\n      g2\n    } of pairs) {\n      if (g1.equals(G1.ProjectivePoint.ZERO) || g2.equals(G2.ProjectivePoint.ZERO)) throw new Error('pairing is not available for ZERO point');\n      // This uses toAffine inside\n      g1.assertValidity();\n      g2.assertValidity();\n      const Qa = g1.toAffine();\n      res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);\n    }\n    return millerLoopBatch(res, withFinalExponent);\n  }\n  // Calculates bilinear pairing\n  function pairing(Q, P, withFinalExponent = true) {\n    return pairingBatch([{\n      g1: Q,\n      g2: P\n    }], withFinalExponent);\n  }\n  const utils = {\n    randomPrivateKey: () => {\n      const length = getMinHashLength(Fr.ORDER);\n      return mapHashToField(CURVE.randomBytes(length), Fr.ORDER);\n    },\n    calcPairingPrecomputes\n  };\n  const {\n    ShortSignature\n  } = CURVE.G1;\n  const {\n    Signature\n  } = CURVE.G2;\n  function normP1(point) {\n    return point instanceof G1.ProjectivePoint ? point : G1.ProjectivePoint.fromHex(point);\n  }\n  function normP1Hash(point, htfOpts) {\n    return point instanceof G1.ProjectivePoint ? point : G1.hashToCurve(ensureBytes('point', point), htfOpts);\n  }\n  function normP2(point) {\n    return point instanceof G2.ProjectivePoint ? point : Signature.fromHex(point);\n  }\n  function normP2Hash(point, htfOpts) {\n    return point instanceof G2.ProjectivePoint ? point : G2.hashToCurve(ensureBytes('point', point), htfOpts);\n  }\n  // Multiplies generator (G1) by private key.\n  // P = pk x G\n  function getPublicKey(privateKey) {\n    return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n  // Multiplies generator (G2) by private key.\n  // P = pk x G\n  function getPublicKeyForShortSignatures(privateKey) {\n    return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n  function sign(message, privateKey, htfOpts) {\n    const msgPoint = normP2Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G2.ProjectivePoint) return sigPoint;\n    return Signature.toRawBytes(sigPoint);\n  }\n  function signShortSignature(message, privateKey, htfOpts) {\n    const msgPoint = normP1Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G1.ProjectivePoint) return sigPoint;\n    return ShortSignature.toRawBytes(sigPoint);\n  }\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(P, H(m)) == e(G, S)\n  function verify(signature, message, publicKey, htfOpts) {\n    const P = normP1(publicKey);\n    const Hm = normP2Hash(message, htfOpts);\n    const G = G1.ProjectivePoint.BASE;\n    const S = normP2(signature);\n    const exp = pairingBatch([{\n      g1: P.negate(),\n      g2: Hm\n    },\n    // ePHM = pairing(P.negate(), Hm, false);\n    {\n      g1: G,\n      g2: S\n    } // eGS = pairing(G, S, false);\n    ]);\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(S, G) == e(H(m), P)\n  function verifyShortSignature(signature, message, publicKey, htfOpts) {\n    const P = normP2(publicKey);\n    const Hm = normP1Hash(message, htfOpts);\n    const G = G2.ProjectivePoint.BASE;\n    const S = normP1(signature);\n    const exp = pairingBatch([{\n      g1: Hm,\n      g2: P\n    },\n    // eHmP = pairing(Hm, P, false);\n    {\n      g1: S,\n      g2: G.negate()\n    } // eSG = pairing(S, G.negate(), false);\n    ]);\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n  function aNonEmpty(arr) {\n    if (!Array.isArray(arr) || arr.length === 0) throw new Error('expected non-empty array');\n  }\n  function aggregatePublicKeys(publicKeys) {\n    aNonEmpty(publicKeys);\n    const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (publicKeys[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    // toRawBytes ensures point validity\n    return aggAffine.toRawBytes(true);\n  }\n  function aggregateSignatures(signatures) {\n    aNonEmpty(signatures);\n    const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G2.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return Signature.toRawBytes(aggAffine);\n  }\n  function aggregateShortSignatures(signatures) {\n    aNonEmpty(signatures);\n    const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return ShortSignature.toRawBytes(aggAffine);\n  }\n  // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n  // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n  function verifyBatch(signature,\n  // TODO: maybe `{message: G2Hex, publicKey: G1Hex}[]` instead?\n  messages, publicKeys, htfOpts) {\n    aNonEmpty(messages);\n    if (publicKeys.length !== messages.length) throw new Error('amount of public keys and messages should be equal');\n    const sig = normP2(signature);\n    const nMessages = messages.map(i => normP2Hash(i, htfOpts));\n    const nPublicKeys = publicKeys.map(normP1);\n    // NOTE: this works only for exact same object\n    const messagePubKeyMap = new Map();\n    for (let i = 0; i < nPublicKeys.length; i++) {\n      const pub = nPublicKeys[i];\n      const msg = nMessages[i];\n      let keys = messagePubKeyMap.get(msg);\n      if (keys === undefined) {\n        keys = [];\n        messagePubKeyMap.set(msg, keys);\n      }\n      keys.push(pub);\n    }\n    const paired = [];\n    try {\n      for (const [msg, keys] of messagePubKeyMap) {\n        const groupPublicKey = keys.reduce((acc, msg) => acc.add(msg));\n        paired.push({\n          g1: groupPublicKey,\n          g2: msg\n        });\n      }\n      paired.push({\n        g1: G1.ProjectivePoint.BASE.negate(),\n        g2: sig\n      });\n      return Fp12.eql(pairingBatch(paired), Fp12.ONE);\n    } catch {\n      return false;\n    }\n  }\n  G1.ProjectivePoint.BASE._setWindowSize(4);\n  return {\n    getPublicKey,\n    getPublicKeyForShortSignatures,\n    sign,\n    signShortSignature,\n    verify,\n    verifyBatch,\n    verifyShortSignature,\n    aggregatePublicKeys,\n    aggregateSignatures,\n    aggregateShortSignatures,\n    millerLoopBatch,\n    pairing,\n    pairingBatch,\n    G1,\n    G2,\n    Signature,\n    ShortSignature,\n    fields: {\n      Fr,\n      Fp,\n      Fp2,\n      Fp6,\n      Fp12\n    },\n    params: {\n      ateLoopSize: CURVE.params.ateLoopSize,\n      r: CURVE.params.r,\n      G1b: CURVE.G1.b,\n      G2b: CURVE.G2.b\n    },\n    utils\n  };\n}\n", "/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as mod from './modular.js';\nimport { bitLen, bitMask, concatBytes, notImplemented } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\nfunction calcFrobeniusCoefficients(Fp, nonResidue, modulus, degree, num = 1, divisor) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus = modulus ** BigInt(degree);\n  const res = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = (a * qPower - a) / _divisor % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp, Fp2, base) {\n  // Ψ endomorphism\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x, y) {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x, y) {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine = fn => (c, P) => {\n    const affine = P.toAffine();\n    const p = fn(affine.x, affine.y);\n    return c.fromAffine({\n      x: p[0],\n      y: p[1]\n    });\n  };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return {\n    psi,\n    psi2,\n    G2psi,\n    G2psi2,\n    PSI_X,\n    PSI_Y,\n    PSI2_X,\n    PSI2_Y\n  };\n}\nexport function tower12(opts) {\n  const {\n    ORDER\n  } = opts;\n  // Fp\n  const Fp = mod.Field(ORDER);\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n  const FpLegendre = mod.FpLegendre(ORDER);\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n  // Fp2\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n  const Fp2Add = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp.add(c0, r0),\n    c1: Fp.add(c1, r1)\n  });\n  const Fp2Subtract = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp.sub(c0, r0),\n    c1: Fp.sub(c1, r1)\n  });\n  const Fp2Multiply = ({\n    c0,\n    c1\n  }, rhs) => {\n    if (typeof rhs === 'bigint') return {\n      c0: Fp.mul(c0, rhs),\n      c1: Fp.mul(c1, rhs)\n    };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return {\n      c0: o0,\n      c1: o1\n    };\n  };\n  const Fp2Square = ({\n    c0,\n    c1\n  }) => {\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return {\n      c0: Fp.mul(a, b),\n      c1: Fp.mul(c, c1)\n    };\n  };\n  const Fp2fromBigTuple = tuple => {\n    if (tuple.length !== 2) throw new Error('invalid tuple');\n    const fps = tuple.map(n => Fp.create(n));\n    return {\n      c0: fps[0],\n      c1: fps[1]\n    };\n  };\n  const FP2_ORDER = ORDER * ORDER;\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n  const Fp2 = {\n    ORDER: FP2_ORDER,\n    isLE: Fp.isLE,\n    NONRESIDUE: Fp2Nonresidue,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: {\n      c0: Fp.ZERO,\n      c1: Fp.ZERO\n    },\n    ONE: {\n      c0: Fp.ONE,\n      c1: Fp.ZERO\n    },\n    create: num => num,\n    isValid: ({\n      c0,\n      c1\n    }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n    is0: ({\n      c0,\n      c1\n    }) => Fp.is0(c0) && Fp.is0(c1),\n    eql: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n    neg: ({\n      c0,\n      c1\n    }) => ({\n      c0: Fp.neg(c0),\n      c1: Fp.neg(c1)\n    }),\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: ({\n      c0: a,\n      c1: b\n    }) => {\n      // We wish to find the multiplicative inverse of a nonzero\n      // element a + bu in Fp2. We leverage an identity\n      //\n      // (a + bu)(a - bu) = a² + b²\n      //\n      // which holds because u² = -1. This can be rewritten as\n      //\n      // (a + bu)(a - bu)/(a² + b²) = 1\n      //\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\n      // This gives that (a - bu)/(a² + b²) is the inverse\n      // of (a + bu). Importantly, this can be computing using\n      // only a single inversion in Fp.\n      const factor = Fp.inv(Fp.create(a * a + b * b));\n      return {\n        c0: Fp.mul(factor, Fp.create(a)),\n        c1: Fp.mul(factor, Fp.create(-b))\n      };\n    },\n    sqrt: num => {\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\n      // This is generic for all quadratic extensions (Fp2)\n      const {\n        c0,\n        c1\n      } = num;\n      if (Fp.is0(c1)) {\n        // if c0 is quadratic residue\n        if (Fp.eql(FpLegendre(Fp, c0), Fp.ONE)) return Fp2.create({\n          c0: Fp.sqrt(c0),\n          c1: Fp.ZERO\n        });else return Fp2.create({\n          c0: Fp.ZERO,\n          c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE))\n        });\n      }\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n      const legendre = FpLegendre(Fp, d);\n      // -1, Quadratic non residue\n      if (!Fp.is0(legendre) && !Fp.eql(legendre, Fp.ONE)) d = Fp.sub(d, a);\n      const a0 = Fp.sqrt(d);\n      const candidateSqrt = Fp2.create({\n        c0: a0,\n        c1: Fp.div(Fp.mul(c1, Fpdiv2), a0)\n      });\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n      const x1 = candidateSqrt;\n      const x2 = Fp2.neg(x1);\n      const {\n        re: re1,\n        im: im1\n      } = Fp2.reim(x1);\n      const {\n        re: re2,\n        im: im2\n      } = Fp2.reim(x2);\n      if (im1 > im2 || im1 === im2 && re1 > re2) return x1;\n      return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: x => {\n      const {\n        re: x0,\n        im: x1\n      } = Fp2.reim(x);\n      const sign_0 = x0 % _2n;\n      const zero_0 = x0 === _0n;\n      const sign_1 = x1 % _2n;\n      return BigInt(sign_0 || zero_0 && sign_1) == _1n;\n    },\n    // Bytes util\n    fromBytes(b) {\n      if (b.length !== Fp2.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n      return {\n        c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)),\n        c1: Fp.fromBytes(b.subarray(Fp.BYTES))\n      };\n    },\n    toBytes: ({\n      c0,\n      c1\n    }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\n    cmov: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }, c) => ({\n      c0: Fp.cmov(c0, r0, c),\n      c1: Fp.cmov(c1, r1, c)\n    }),\n    reim: ({\n      c0,\n      c1\n    }) => ({\n      re: c0,\n      im: c1\n    }),\n    // multiply by u + 1\n    mulByNonresidue: ({\n      c0,\n      c1\n    }) => Fp2.mul({\n      c0,\n      c1\n    }, Fp2Nonresidue),\n    mulByB: opts.Fp2mulByB,\n    fromBigTuple: Fp2fromBigTuple,\n    frobeniusMap: ({\n      c0,\n      c1\n    }, power) => ({\n      c0,\n      c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2])\n    })\n  };\n  // Fp6\n  const Fp6Add = ({\n    c0,\n    c1,\n    c2\n  }, {\n    c0: r0,\n    c1: r1,\n    c2: r2\n  }) => ({\n    c0: Fp2.add(c0, r0),\n    c1: Fp2.add(c1, r1),\n    c2: Fp2.add(c2, r2)\n  });\n  const Fp6Subtract = ({\n    c0,\n    c1,\n    c2\n  }, {\n    c0: r0,\n    c1: r1,\n    c2: r2\n  }) => ({\n    c0: Fp2.sub(c0, r0),\n    c1: Fp2.sub(c1, r1),\n    c2: Fp2.sub(c2, r2)\n  });\n  const Fp6Multiply = ({\n    c0,\n    c1,\n    c2\n  }, rhs) => {\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs)\n      };\n    }\n    const {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2))\n    };\n  };\n  const Fp6Square = ({\n    c0,\n    c1,\n    c2\n  }) => {\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0),\n      // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1),\n      // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4)\n    };\n  };\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 6, 2, 3);\n  const Fp6 = {\n    ORDER: Fp2.ORDER,\n    // TODO: unused, but need to verify\n    isLE: Fp2.isLE,\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: {\n      c0: Fp2.ZERO,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    },\n    ONE: {\n      c0: Fp2.ONE,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    },\n    create: num => num,\n    isValid: ({\n      c0,\n      c1,\n      c2\n    }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n    is0: ({\n      c0,\n      c1,\n      c2\n    }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n    neg: ({\n      c0,\n      c1,\n      c2\n    }) => ({\n      c0: Fp2.neg(c0),\n      c1: Fp2.neg(c1),\n      c2: Fp2.neg(c2)\n    }),\n    eql: ({\n      c0,\n      c1,\n      c2\n    }, {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    }) => Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n    sqrt: notImplemented,\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n    inv: ({\n      c0,\n      c1,\n      c2\n    }) => {\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n      let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n      return {\n        c0: Fp2.mul(t4, t0),\n        c1: Fp2.mul(t4, t1),\n        c2: Fp2.mul(t4, t2)\n      };\n    },\n    // Bytes utils\n    fromBytes: b => {\n      if (b.length !== Fp6.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n      return {\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES))\n      };\n    },\n    toBytes: ({\n      c0,\n      c1,\n      c2\n    }) => concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n    cmov: ({\n      c0,\n      c1,\n      c2\n    }, {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    }, c) => ({\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c)\n    }),\n    fromBigSix: t => {\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('invalid Fp6 usage');\n      return {\n        c0: Fp2.fromBigTuple(t.slice(0, 2)),\n        c1: Fp2.fromBigTuple(t.slice(2, 4)),\n        c2: Fp2.fromBigTuple(t.slice(4, 6))\n      };\n    },\n    frobeniusMap: ({\n      c0,\n      c1,\n      c2\n    }, power) => ({\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6])\n    }),\n    mulByFp2: ({\n      c0,\n      c1,\n      c2\n    }, rhs) => ({\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs)\n    }),\n    mulByNonresidue: ({\n      c0,\n      c1,\n      c2\n    }) => ({\n      c0: Fp2.mulByNonresidue(c2),\n      c1: c0,\n      c2: c1\n    }),\n    // Sparse multiplication\n    mul1: ({\n      c0,\n      c1,\n      c2\n    }, b1) => ({\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1)\n    }),\n    // Sparse multiplication\n    mul01({\n      c0,\n      c1,\n      c2\n    }, b0, b1) {\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\n      return {\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n        // (b0 + b1) * (c0 + c1) - T0 - T1\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n        // (c0 + c2) * b0 - T0 + T1\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1)\n      };\n    }\n  };\n  // Fp12\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 12, 1, 6)[0];\n  const Fp12Add = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp6.add(c0, r0),\n    c1: Fp6.add(c1, r1)\n  });\n  const Fp12Subtract = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp6.sub(c0, r0),\n    c1: Fp6.sub(c1, r1)\n  });\n  const Fp12Multiply = ({\n    c0,\n    c1\n  }, rhs) => {\n    if (typeof rhs === 'bigint') return {\n      c0: Fp6.mul(c0, rhs),\n      c1: Fp6.mul(c1, rhs)\n    };\n    let {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)),\n      // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2))\n    };\n  };\n  const Fp12Square = ({\n    c0,\n    c1\n  }) => {\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n      c1: Fp6.add(ab, ab)\n    }; // AB + AB\n  };\n  function Fp4Square(a, b) {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2),\n      // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2) // (a + b)² - a² - b²\n    };\n  }\n  const Fp12 = {\n    ORDER: Fp2.ORDER,\n    // TODO: unused, but need to verify\n    isLE: Fp6.isLE,\n    BITS: 2 * Fp2.BITS,\n    BYTES: 2 * Fp2.BYTES,\n    MASK: bitMask(2 * Fp2.BITS),\n    ZERO: {\n      c0: Fp6.ZERO,\n      c1: Fp6.ZERO\n    },\n    ONE: {\n      c0: Fp6.ONE,\n      c1: Fp6.ZERO\n    },\n    create: num => num,\n    isValid: ({\n      c0,\n      c1\n    }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n    is0: ({\n      c0,\n      c1\n    }) => Fp6.is0(c0) && Fp6.is0(c1),\n    neg: ({\n      c0,\n      c1\n    }) => ({\n      c0: Fp6.neg(c0),\n      c1: Fp6.neg(c1)\n    }),\n    eql: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n    sqrt: notImplemented,\n    inv: ({\n      c0,\n      c1\n    }) => {\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n      return {\n        c0: Fp6.mul(c0, t),\n        c1: Fp6.neg(Fp6.mul(c1, t))\n      }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n    // Bytes utils\n    fromBytes: b => {\n      if (b.length !== Fp12.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n      return {\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES))\n      };\n    },\n    toBytes: ({\n      c0,\n      c1\n    }) => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n    cmov: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }, c) => ({\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c)\n    }),\n    // Utils\n    // toString() {\n    //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: t => ({\n      c0: Fp6.fromBigSix(t.slice(0, 6)),\n      c1: Fp6.fromBigSix(t.slice(6, 12))\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power) {\n      const {\n        c0,\n        c1,\n        c2\n      } = Fp6.frobeniusMap(lhs.c1, power);\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n      return {\n        c0: Fp6.frobeniusMap(lhs.c0, power),\n        c1: Fp6.create({\n          c0: Fp2.mul(c0, coeff),\n          c1: Fp2.mul(c1, coeff),\n          c2: Fp2.mul(c2, coeff)\n        })\n      };\n    },\n    mulByFp2: ({\n      c0,\n      c1\n    }, rhs) => ({\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs)\n    }),\n    conjugate: ({\n      c0,\n      c1\n    }) => ({\n      c0,\n      c1: Fp6.neg(c1)\n    }),\n    // Sparse multiplication\n    mul014: ({\n      c0,\n      c1\n    }, o0, o1, o4) => {\n      let t0 = Fp6.mul01(c0, o0, o1);\n      let t1 = Fp6.mul1(c1, o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0),\n        // T1 * v + T0\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1)\n      };\n    },\n    mul034: ({\n      c0,\n      c1\n    }, o0, o3, o4) => {\n      const a = Fp6.create({\n        c0: Fp2.mul(c0.c0, o0),\n        c1: Fp2.mul(c0.c1, o0),\n        c2: Fp2.mul(c0.c2, o0)\n      });\n      const b = Fp6.mul01(c1, o3, o4);\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n        c1: Fp6.sub(e, Fp6.add(a, b))\n      };\n    },\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: opts.Fp12finalExponentiate\n  };\n  return {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp4Square,\n    Fp12\n  };\n}\n", "/**\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n * * Construct zk-SNARKs at the ~120-bit security\n * * Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n *   the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n *\n * ### Summary\n * 1. BLS Relies on Bilinear Pairing (expensive)\n * 2. Private Keys: 32 bytes\n * 3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n * 4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n *     - The signature is a point on the G2 subgroup, which is defined over a finite field\n *       with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the\n *       complex numbers).\n *     - We also support reversed 96-byte pubkeys & 48-byte short signatures.\n * 5. The 12 stands for the Embedding degree.\n *\n * ### Formulas\n * - `P = pk x G` - public keys\n * - `S = pk x H(m)` - signing\n * - `e(P, H(m)) == e(G, S)` - verification using pairings\n * - `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n *\n * ### Compatibility and notes\n * 1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\n * Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n * 2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\".\n * 3. Curve security level is about 120 bits as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\n * 4. Compatible with specs:\n *    [cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n *    [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05),\n *    [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n *\n * ### Params\n * To verify curve parameters, see\n * [pairing-friendly-curves spec](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11).\n * Basic math is done over finite fields over p.\n * More complicated math is done over polynominal extension fields.\n * To simplify calculations in Fp12, we construct extension tower:\n *\n * Embedding degree (k): 12\n * Seed (X): -15132376222941642752\n * Fr:  (x⁴-x²+1)\n * Fp: ((x-1)² ⋅ r(x)/3+x)\n * (E/Fp): Y²=X³+4\n * (Eₜ/Fp²): Y² = X³+4(u+1) (M-type twist)\n * Ate loop size: X\n *\n * ### Towers\n * - Fp₁₂ = Fp₆² => Fp₂³\n * - Fp(u) / (u² - β) where β = -1\n * - Fp₂(v) / (v³ - ξ) where ξ = u + 1\n * - Fp₆(w) / (w² - γ) where γ = v\n * - Fp²[u] = Fp/u²+1\n * - Fp⁶[v] = Fp²/v³-1-u\n * - Fp¹²[w] = Fp⁶/w²-v\n *\n * @todo construct bls & bn fp/fr from seed.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls } from './abstract/bls.js';\nimport * as mod from './abstract/modular.js';\nimport { bitGet, bitLen, bytesToHex, bytesToNumberBE, concatBytes as concatB, ensureBytes, numberToBytesBE } from './abstract/utils.js';\n// Types\nimport { isogenyMap } from './abstract/hash-to-curve.js';\nimport { psiFrobenius, tower12 } from './abstract/tower.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\n// CURVE FIELDS\nconst {\n  Fp,\n  Fp2,\n  Fp6,\n  Fp4Square,\n  Fp12\n} = tower12({\n  // Order of Fp\n  ORDER: BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'),\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: ({\n    c0,\n    c1\n  }) => {\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return {\n      c0: Fp.sub(t0, t1),\n      c1: Fp.add(t0, t1)\n    };\n  },\n  // Fp12\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12cyclotomicSquare: ({\n    c0,\n    c1\n  }) => {\n    const {\n      c0: c0c0,\n      c1: c0c1,\n      c2: c0c2\n    } = c0;\n    const {\n      c0: c1c0,\n      c1: c1c1,\n      c2: c1c2\n    } = c1;\n    const {\n      first: t3,\n      second: t4\n    } = Fp4Square(c0c0, c1c1);\n    const {\n      first: t5,\n      second: t6\n    } = Fp4Square(c1c0, c0c2);\n    const {\n      first: t7,\n      second: t8\n    } = Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3),\n        // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5),\n        // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7)\n      }),\n      // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9),\n        // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4),\n        // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6)\n      })\n    }; // 2 * (T6 + c1c2) + T6\n  },\n  Fp12cyclotomicExp(num, n) {\n    let z = Fp12.ONE;\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n      z = Fp12._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\n    }\n    return z;\n  },\n  // https://eprint.iacr.org/2010/354.pdf\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12finalExponentiate: num => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  }\n});\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = mod.Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\n// END OF CURVE FIELDS\n// HashToCurve\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(Fp2, [\n// xNum\n[['0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6', '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6'], ['0x0', '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a'], ['0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e', '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d'], ['0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1', '0x0']],\n// xDen\n[['0x0', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63'], ['0xc', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f'], ['0x1', '0x0'] // LAST 1\n],\n// yNum\n[['0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706', '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706'], ['0x0', '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be'], ['0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c', '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f'], ['0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10', '0x0']],\n// yDen\n[['0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb'], ['0x0', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3'], ['0x12', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99'], ['0x1', '0x0'] // LAST 1\n]].map(i => i.map(pair => Fp2.fromBigTuple(pair.map(BigInt)))));\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(Fp, [\n// xNum\n['0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7', '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb', '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0', '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861', '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9', '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983', '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84', '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e', '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317', '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e', '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b', '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229'],\n// xDen\n['0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c', '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff', '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19', '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8', '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e', '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5', '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a', '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e', '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641', '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a', '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33', '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696', '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6', '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb', '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb', '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0', '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2', '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29', '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587', '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30', '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132', '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e', '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8', '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133', '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b', '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604'],\n// yDen\n['0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1', '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d', '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2', '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416', '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d', '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac', '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c', '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9', '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a', '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55', '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8', '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092', '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc', '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7', '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f', '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j))));\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({\n    c0: Fp.create(_0n),\n    c1: Fp.create(BigInt(240))\n  }),\n  // A' = 240 * I\n  B: Fp2.create({\n    c0: Fp.create(BigInt(1012)),\n    c1: Fp.create(BigInt(1012))\n  }),\n  // B' = 1012 * (1 + I)\n  Z: Fp2.create({\n    c0: Fp.create(BigInt(-2)),\n    c1: Fp.create(BigInt(-1))\n  }) // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(BigInt('0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d')),\n  B: Fp.create(BigInt('0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0')),\n  Z: Fp.create(BigInt(11))\n});\n// Endomorphisms (for fast cofactor clearing)\n// Ψ(P) endomorphism\nconst {\n  G2psi,\n  G2psi2\n} = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n  // DST: a domain separation tag\n  // defined in section 2.2.5\n  // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  // p: the characteristic of F\n  //    where F is a finite field of characteristic p and order q = p^m\n  p: Fp.ORDER,\n  // m: the extension degree of F, m >= 1\n  //     where F is a finite field of characteristic p and order q = p^m\n  m: 2,\n  // k: the target security level for the suite in bits\n  // defined in section 5.1\n  k: 128,\n  // option to use a message that has already been processed by\n  // expand_message_xmd\n  expand: 'xmd',\n  // Hash functions for: expand_message_xmd is appropriate for use with a\n  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n  hash: sha256\n});\n// Encoding utils\n// Point on G1 curve: (x, y)\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), {\n  infinity: true,\n  compressed: true\n}); // set compressed & point-at-infinity bits\nfunction parseMask(bytes) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 224;\n  const compressed = !!(mask >> 7 & 1); // compression bit (0b1000_0000)\n  const infinity = !!(mask >> 6 & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!(mask >> 5 & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 31; // clear mask (zero first 3 bits)\n  return {\n    compressed,\n    infinity,\n    sort,\n    value: bytes\n  };\n}\nfunction setMask(bytes, mask) {\n  if (bytes[0] & 224) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 128;\n  if (mask.infinity) bytes[0] |= 64;\n  if (mask.sort) bytes[0] |= 32;\n  return bytes;\n}\nfunction signatureG1ToRawBytes(point) {\n  point.assertValidity();\n  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n  const {\n    x,\n    y\n  } = point.toAffine();\n  if (isZero) return COMPRESSED_ZERO.slice();\n  const P = Fp.ORDER;\n  const sort = Boolean(y * _2n / P);\n  return setMask(numberToBytesBE(x, Fp.BYTES), {\n    compressed: true,\n    sort\n  });\n}\nfunction signatureG2ToRawBytes(point) {\n  // NOTE: by some reasons it was missed in bls12-381, looks like bug\n  point.assertValidity();\n  const len = Fp.BYTES;\n  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO)) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n  const {\n    x,\n    y\n  } = point.toAffine();\n  const {\n    re: x0,\n    im: x1\n  } = Fp2.reim(x);\n  const {\n    re: y0,\n    im: y1\n  } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean(tmp / Fp.ORDER & _1n);\n  const z2 = x0;\n  return concatB(setMask(numberToBytesBE(x1, len), {\n    sort,\n    compressed: true\n  }), numberToBytesBE(z2, len));\n}\n/**\n * bls12-381 pairing-friendly curve.\n * @example\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\n * // G1 keys, G2 signatures\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\n * const message = '64726e3da8';\n * const publicKey = bls.getPublicKey(privateKey);\n * const signature = bls.sign(message, privateKey);\n * const isValid = bls.verify(signature, message, publicKey);\n */\nexport const bls12_381 = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr\n  },\n  // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where\n  // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3\n  G1: {\n    Fp,\n    // cofactor; (z - 1)²/3\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    // generator's coordinates\n    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n    Gx: BigInt('0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'),\n    Gy: BigInt('0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'),\n    a: Fp.ZERO,\n    b: _4n,\n    htfDefaults: {\n      ...htfDefaults,\n      m: 1,\n      DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_'\n    },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point) => {\n      // φ endomorphism\n      const cubicRootOfUnityModP = BigInt('0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe');\n      const phi = new c(Fp.mul(point.px, cubicRootOfUnityModP), point.py, point.pz);\n      // todo: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n      // https://eprint.iacr.org/2019/814.pdf\n      // (z² − 1)/3\n      // const c1 = BigInt('0x396c8c005555e1560000000055555555');\n      // const P = this;\n      // const S = P.sigma();\n      // const Q = S.double();\n      // const S2 = S.sigma();\n      // // [(z² − 1)/3](2σ(P) − P − σ²(P)) − σ²(P) = O\n      // const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n      // const C = left.subtract(S2);\n      // return C.isZero();\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: scalars => {\n      const {\n        x,\n        y\n      } = G1_SWU(Fp.create(scalars[0]));\n      return isogenyMapG1(x, y);\n    },\n    fromBytes: bytes => {\n      const {\n        compressed,\n        infinity,\n        sort,\n        value\n      } = parseMask(bytes);\n      if (value.length === 48 && compressed) {\n        // TODO: Fp.bytes\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n          if (x !== _0n) throw new Error('G1: non-empty compressed point at infinity');\n          return {\n            x: _0n,\n            y: _0n\n          };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('invalid compressed G1 point');\n        if (y * _2n / P !== BigInt(sort)) y = Fp.neg(y);\n        return {\n          x: Fp.create(x),\n          y: Fp.create(y)\n        };\n      } else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n        const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n        if (infinity) {\n          if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n        }\n        return {\n          x: Fp.create(x),\n          y: Fp.create(y)\n        };\n      } else {\n        throw new Error('invalid point G1, expected 48/96 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const isZero = point.equals(c.ZERO);\n      const {\n        x,\n        y\n      } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return COMPRESSED_ZERO.slice();\n        const P = Fp.ORDER;\n        const sort = Boolean(y * _2n / P);\n        return setMask(numberToBytesBE(x, Fp.BYTES), {\n          compressed: true,\n          sort\n        });\n      } else {\n        if (isZero) {\n          // 2x PUBLIC_KEY_LENGTH\n          const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n          return x;\n        } else {\n          return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n        }\n      }\n    },\n    ShortSignature: {\n      fromHex(hex) {\n        const {\n          infinity,\n          sort,\n          value\n        } = parseMask(ensureBytes('signatureHex', hex, 48));\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        if (infinity) return bls12_381.G1.ProjectivePoint.ZERO;\n        const x = Fp.create(compressedValue & Fp.MASK);\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('invalid compressed G1 point');\n        const aflag = BigInt(sort);\n        if (y * _2n / P !== aflag) y = Fp.neg(y);\n        const point = bls12_381.G1.ProjectivePoint.fromAffine({\n          x,\n          y\n        });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point) {\n        return signatureG1ToRawBytes(point);\n      },\n      toHex(point) {\n        return bytesToHex(signatureG1ToRawBytes(point));\n      }\n    }\n  },\n  // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),\n  // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where\n  // G² - 1\n  // h2q\n  G2: {\n    Fp: Fp2,\n    // cofactor\n    h: BigInt('0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'),\n    Gx: Fp2.fromBigTuple([BigInt('0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'), BigInt('0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e')]),\n    // y =\n    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n    Gy: Fp2.fromBigTuple([BigInt('0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'), BigInt('0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be')]),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    hEff: BigInt('0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'),\n    htfDefaults: {\n      ...htfDefaults\n    },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: scalars => {\n      const {\n        x,\n        y\n      } = G2_SWU(Fp2.fromBigTuple(scalars));\n      return isogenyMapG2(x, y);\n    },\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, P) => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n      // Older version: https://eprint.iacr.org/2019/814.pdf\n      // Ψ²(P) => Ψ³(P) => [z]Ψ³(P) where z = -x => [z]Ψ³(P) - Ψ²(P) + P == O\n      // return P.psi2().psi().mulNegX().subtract(psi2).add(P).isZero();\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from cfrg-hash-to-curve-11\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate(); // [-x]P\n      let t2 = G2psi(c, P); // Ψ(P)\n      let t3 = P.double(); // 2P\n      t3 = G2psi2(c, t3); // Ψ²(2P)\n      t3 = t3.subtract(t2); // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2); // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate(); // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q; // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: bytes => {\n      const {\n        compressed,\n        infinity,\n        sort,\n        value\n      } = parseMask(bytes);\n      if (!compressed && !infinity && sort ||\n      // 00100000\n      !compressed && infinity && sort ||\n      // 01100000\n      sort && infinity && compressed // 11100000\n      ) {\n        throw new Error('invalid encoding flag: ' + (bytes[0] & 224));\n      }\n      const L = Fp.BYTES;\n      const slc = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n      if (value.length === 96 && compressed) {\n        const b = bls12_381.params.G2b;\n        const P = Fp.ORDER;\n        if (infinity) {\n          // check that all bytes are 0\n          if (value.reduce((p, c) => p !== 0 ? c + 1 : c, 0) > 0) {\n            throw new Error('invalid compressed G2 point');\n          }\n          return {\n            x: Fp2.ZERO,\n            y: Fp2.ZERO\n          };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({\n          c0: Fp.create(x_0),\n          c1: Fp.create(x_1)\n        });\n        const right = Fp2.add(Fp2.pow(x, _3n), b); // y² = x³ + 4 * (u+1) = x³ + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? y.c0 * _2n / P : y.c1 * _2n / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (value.length === 192 && !compressed) {\n        if (infinity) {\n          if (value.reduce((p, c) => p !== 0 ? c + 1 : c, 0) > 0) {\n            throw new Error('invalid uncompressed G2 point');\n          }\n          return {\n            x: Fp2.ZERO,\n            y: Fp2.ZERO\n          };\n        }\n        const x1 = slc(value, 0, L);\n        const x0 = slc(value, L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return {\n          x: Fp2.fromBigTuple([x0, x1]),\n          y: Fp2.fromBigTuple([y0, y1])\n        };\n      } else {\n        throw new Error('invalid point G2, expected 96/192 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const {\n        BYTES: len,\n        ORDER: P\n      } = Fp;\n      const isZero = point.equals(c.ZERO);\n      const {\n        x,\n        y\n      } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n        const flag = Boolean(y.c1 === _0n ? y.c0 * _2n / P : y.c1 * _2n / P);\n        return concatB(setMask(numberToBytesBE(x.c1, len), {\n          compressed: true,\n          sort: flag\n        }), numberToBytesBE(x.c0, len));\n      } else {\n        if (isZero) return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n        const {\n          re: x0,\n          im: x1\n        } = Fp2.reim(x);\n        const {\n          re: y0,\n          im: y1\n        } = Fp2.reim(y);\n        return concatB(numberToBytesBE(x1, len), numberToBytesBE(x0, len), numberToBytesBE(y1, len), numberToBytesBE(y0, len));\n      }\n    },\n    Signature: {\n      // TODO: Optimize, it's very slow because of sqrt.\n      fromHex(hex) {\n        const {\n          infinity,\n          sort,\n          value\n        } = parseMask(ensureBytes('signatureHex', hex));\n        const P = Fp.ORDER;\n        const half = value.length / 2;\n        if (half !== 48 && half !== 96) throw new Error('invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(value.slice(0, half));\n        const z2 = bytesToNumberBE(value.slice(half));\n        // Indicates the infinity point\n        if (infinity) return bls12_381.G2.ProjectivePoint.ZERO;\n        const x1 = Fp.create(z1 & Fp.MASK);\n        const x2 = Fp.create(z2);\n        const x = Fp2.create({\n          c0: x2,\n          c1: x1\n        });\n        const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y² = x³ + 4\n        // The slow part\n        let y = Fp2.sqrt(y2);\n        if (!y) throw new Error('Failed to find a square root');\n        // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n        // If y1 happens to be zero, then use the bit of y0\n        const {\n          re: y0,\n          im: y1\n        } = Fp2.reim(y);\n        const aflag1 = BigInt(sort);\n        const isGreater = y1 > _0n && y1 * _2n / P !== aflag1;\n        const isZero = y1 === _0n && y0 * _2n / P !== aflag1;\n        if (isGreater || isZero) y = Fp2.neg(y);\n        const point = bls12_381.G2.ProjectivePoint.fromAffine({\n          x,\n          y\n        });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point) {\n        return signatureG2ToRawBytes(point);\n      },\n      toHex(point) {\n        return bytesToHex(signatureG2ToRawBytes(point));\n      }\n    }\n  },\n  params: {\n    ateLoopSize: BLS_X,\n    // The BLS parameter x for BLS12-381\n    r: Fr.ORDER,\n    // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative'\n  },\n  htfDefaults,\n  hash: sha256,\n  randomBytes\n});\n", "import { bls12_381 } from '@noble/curves/bls12-381';\nimport { toHex } from './buffer';\nexport let verify;\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns boolean\n */\nexport function blsVerify(pk, sig, msg) {\n  const primaryKey = typeof pk === 'string' ? pk : toHex(pk);\n  const signature = typeof sig === 'string' ? sig : toHex(sig);\n  const message = typeof msg === 'string' ? msg : toHex(msg);\n  return bls12_381.verifyShortSignature(signature, message, primaryKey);\n}\n", "import { PipeArrayBuffer, lebDecode } from '@dfinity/candid';\nexport const decodeLeb128 = buf => {\n  return lebDecode(new PipeArrayBuffer(buf));\n};\n// time is a LEB128-encoded Nat\nexport const decodeTime = buf => {\n  const decoded = decodeLeb128(buf);\n  // nanoseconds to milliseconds\n  return new Date(Number(decoded) / 1000000);\n};\n", "var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Principal } from '@dfinity/principal';\nimport { requestIdOf } from './request_id';\nimport { concat, toHex } from './utils/buffer';\nconst domainSeparator = new TextEncoder().encode('\\x0Aic-request');\n/**\n * An Identity that can sign blobs.\n */\nexport class SignIdentity {\n  /**\n   * Get the principal represented by this identity. Normally should be a\n   * `Principal.selfAuthenticating()`.\n   */\n  getPrincipal() {\n    if (!this._principal) {\n      this._principal = Principal.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));\n    }\n    return this._principal;\n  }\n  /**\n   * Transform a request into a signed version of the request. This is done last\n   * after the transforms on the body of a request. The returned object can be\n   * anything, but must be serializable to CBOR.\n   * @param request - internet computer request to transform\n   */\n  async transformRequest(request) {\n    const {\n        body\n      } = request,\n      fields = __rest(request, [\"body\"]);\n    const requestId = requestIdOf(body);\n    return Object.assign(Object.assign({}, fields), {\n      body: {\n        content: body,\n        sender_pubkey: this.getPublicKey().toDer(),\n        sender_sig: await this.sign(concat(domainSeparator, requestId))\n      }\n    });\n  }\n}\nexport class AnonymousIdentity {\n  getPrincipal() {\n    return Principal.anonymous();\n  }\n  async transformRequest(request) {\n    return Object.assign(Object.assign({}, request), {\n      body: {\n        content: request.body\n      }\n    });\n  }\n}\n/**\n * Create an IdentityDescriptor from a @dfinity/identity Identity\n * @param identity - identity describe in returned descriptor\n */\nexport function createIdentityDescriptor(identity) {\n  const identityIndicator = 'getPublicKey' in identity ? {\n    type: 'PublicKeyIdentity',\n    publicKey: toHex(identity.getPublicKey().toDer())\n  } : {\n    type: 'AnonymousIdentity'\n  };\n  return identityIndicator;\n}\n", "import { lebEncode } from '@dfinity/candid';\nimport * as cbor from 'simple-cbor';\nimport { makeNonce } from './types';\nconst NANOSECONDS_PER_MILLISECONDS = BigInt(1000000);\nconst REPLICA_PERMITTED_DRIFT_MILLISECONDS = 60 * 1000;\nexport class Expiry {\n  constructor(deltaInMSec) {\n    // if ingress as seconds is less than 90, round to nearest second\n    if (deltaInMSec < 90 * 1000) {\n      // Raw value without subtraction of REPLICA_PERMITTED_DRIFT_MILLISECONDS\n      const raw_value = BigInt(Date.now() + deltaInMSec) * NANOSECONDS_PER_MILLISECONDS;\n      const ingress_as_seconds = raw_value / BigInt(1000000000);\n      this._value = ingress_as_seconds * BigInt(1000000000);\n      return;\n    }\n    // Use bigint because it can overflow the maximum number allowed in a double float.\n    const raw_value = BigInt(Math.floor(Date.now() + deltaInMSec - REPLICA_PERMITTED_DRIFT_MILLISECONDS)) * NANOSECONDS_PER_MILLISECONDS;\n    // round down to the nearest second (since )\n    const ingress_as_seconds = raw_value / BigInt(1000000000);\n    // round down to nearest minute\n    const ingress_as_minutes = ingress_as_seconds / BigInt(60);\n    const rounded_down_nanos = ingress_as_minutes * BigInt(60) * BigInt(1000000000);\n    this._value = rounded_down_nanos;\n  }\n  toCBOR() {\n    // TODO: change this to take the minimum amount of space (it always takes 8 bytes now).\n    return cbor.value.u64(this._value.toString(16), 16);\n  }\n  toHash() {\n    return lebEncode(this._value);\n  }\n}\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nexport function makeNonceTransform(nonceFn = makeNonce) {\n  return async request => {\n    // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n    const headers = request.request.headers;\n    // TODO: uncomment this when the http proxy supports it.\n    // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n    request.request.headers = headers;\n    // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n    if (request.endpoint === \"call\" /* Endpoint.Call */) {\n      request.body.nonce = nonceFn();\n    }\n  };\n}\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n *\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nexport function makeExpiryTransform(delayInMilliseconds) {\n  return async request => {\n    request.body.ingress_expiry = new Expiry(delayInMilliseconds);\n  };\n}\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n *\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nexport function httpHeadersTransform(headers) {\n  const headerFields = [];\n  headers.forEach((value, key) => {\n    headerFields.push([key, value]);\n  });\n  return headerFields;\n}\n", "/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nexport const randomNumber = () => {\n  // determine whether browser crypto is available\n  if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0];\n  }\n  // A second check for webcrypto, in case it is loaded under global instead of window\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return array[0];\n  }\n  // determine whether node crypto is available\n  if (typeof crypto !== 'undefined' && crypto.randomInt) {\n    return crypto.randomInt(0, 0xffffffff);\n  }\n  // fall back to Math.random\n  return Math.floor(Math.random() * 0xffffffff);\n};\n", "import { randomNumber } from '../../utils/random';\n// The types of values allowed in the `request_type` field for submit requests.\nexport var SubmitRequestType;\n(function (SubmitRequestType) {\n  SubmitRequestType[\"Call\"] = \"call\";\n})(SubmitRequestType || (SubmitRequestType = {}));\n/**\n * Create a random Nonce, based on random values\n */\nexport function makeNonce() {\n  // Encode 128 bits.\n  const buffer = new ArrayBuffer(16);\n  const view = new DataView(buffer);\n  const rand1 = randomNumber();\n  const rand2 = randomNumber();\n  const rand3 = randomNumber();\n  const rand4 = randomNumber();\n  view.setUint32(0, rand1);\n  view.setUint32(4, rand2);\n  view.setUint32(8, rand3);\n  view.setUint32(12, rand4);\n  return buffer;\n}\n", "import { AgentError } from '../../errors';\nexport class AgentHTTPResponseError extends AgentError {\n  constructor(message, response) {\n    super(message);\n    this.response = response;\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\nexport class AgentCallError extends AgentError {\n  constructor(message, response, requestId, senderPubkey, senderSig, ingressExpiry) {\n    super(message);\n    this.response = response;\n    this.requestId = requestId;\n    this.senderPubkey = senderPubkey;\n    this.senderSig = senderSig;\n    this.ingressExpiry = ingressExpiry;\n    this.name = 'AgentCallError';\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\nexport class AgentQueryError extends AgentError {\n  constructor(message, response, requestId, senderPubkey, senderSig, ingressExpiry) {\n    super(message);\n    this.response = response;\n    this.requestId = requestId;\n    this.senderPubkey = senderPubkey;\n    this.senderSig = senderSig;\n    this.ingressExpiry = ingressExpiry;\n    this.name = 'AgentQueryError';\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\nexport class AgentReadStateError extends AgentError {\n  constructor(message, response, requestId, senderPubkey, senderSig, ingressExpiry) {\n    super(message);\n    this.response = response;\n    this.requestId = requestId;\n    this.senderPubkey = senderPubkey;\n    this.senderSig = senderSig;\n    this.ingressExpiry = ingressExpiry;\n    this.name = 'AgentReadStateError';\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */BigInt(32);\nfunction fromBig(n, le = false) {\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nfunction split(lst, le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L };\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexport default u64;\n", "/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\nimport { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */(() => u64.split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */new Uint32Array(80);\nexport class SHA512 extends HashMD {\n  constructor() {\n    super(128, 64, 16, false);\n    // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n    // Also looks cleaner and easier to verify with spec.\n    // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n    // h -- high 32 bits, l -- low 32 bits\n    this.Ah = 0x6a09e667 | 0;\n    this.Al = 0xf3bcc908 | 0;\n    this.Bh = 0xbb67ae85 | 0;\n    this.Bl = 0x84caa73b | 0;\n    this.Ch = 0x3c6ef372 | 0;\n    this.Cl = 0xfe94f82b | 0;\n    this.Dh = 0xa54ff53a | 0;\n    this.Dl = 0x5f1d36f1 | 0;\n    this.Eh = 0x510e527f | 0;\n    this.El = 0xade682d1 | 0;\n    this.Fh = 0x9b05688c | 0;\n    this.Fl = 0x2b3e6c1f | 0;\n    this.Gh = 0x1f83d9ab | 0;\n    this.Gl = 0xfb41bd6b | 0;\n    this.Hh = 0x5be0cd19 | 0;\n    this.Hl = 0x137e2179 | 0;\n  }\n  // prettier-ignore\n  get() {\n    const {\n      Ah,\n      Al,\n      Bh,\n      Bl,\n      Ch,\n      Cl,\n      Dh,\n      Dl,\n      Eh,\n      El,\n      Fh,\n      Fl,\n      Gh,\n      Gl,\n      Hh,\n      Hl\n    } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32(offset += 4);\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let {\n      Ah,\n      Al,\n      Bh,\n      Bl,\n      Ch,\n      Cl,\n      Dh,\n      Dl,\n      Eh,\n      El,\n      Fh,\n      Fl,\n      Gh,\n      Gl,\n      Hh,\n      Hl\n    } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = Eh & Fh ^ ~Eh & Gh;\n      const CHIl = El & Fl ^ ~El & Gl;\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({\n        h: Eh,\n        l: El\n      } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({\n      h: Ah,\n      l: Al\n    } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({\n      h: Bh,\n      l: Bl\n    } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({\n      h: Ch,\n      l: Cl\n    } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({\n      h: Dh,\n      l: Dl\n    } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({\n      h: Eh,\n      l: El\n    } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({\n      h: Fh,\n      l: Fl\n    } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({\n      h: Gh,\n      l: Gl\n    } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({\n      h: Hh,\n      l: Hl\n    } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\nexport class SHA512_224 extends SHA512 {\n  constructor() {\n    super();\n    // h -- high 32 bits, l -- low 32 bits\n    this.Ah = 0x8c3d37c8 | 0;\n    this.Al = 0x19544da2 | 0;\n    this.Bh = 0x73e19966 | 0;\n    this.Bl = 0x89dcd4d6 | 0;\n    this.Ch = 0x1dfab7ae | 0;\n    this.Cl = 0x32ff9c82 | 0;\n    this.Dh = 0x679dd514 | 0;\n    this.Dl = 0x582f9fcf | 0;\n    this.Eh = 0x0f6d2b69 | 0;\n    this.El = 0x7bd44da8 | 0;\n    this.Fh = 0x77e36f73 | 0;\n    this.Fl = 0x04c48942 | 0;\n    this.Gh = 0x3f9d85a8 | 0;\n    this.Gl = 0x6a1d36c8 | 0;\n    this.Hh = 0x1112e6ad | 0;\n    this.Hl = 0x91d692a1 | 0;\n    this.outputLen = 28;\n  }\n}\nexport class SHA512_256 extends SHA512 {\n  constructor() {\n    super();\n    // h -- high 32 bits, l -- low 32 bits\n    this.Ah = 0x22312194 | 0;\n    this.Al = 0xfc2bf72c | 0;\n    this.Bh = 0x9f555fa3 | 0;\n    this.Bl = 0xc84c64c2 | 0;\n    this.Ch = 0x2393b86b | 0;\n    this.Cl = 0x6f53b151 | 0;\n    this.Dh = 0x96387719 | 0;\n    this.Dl = 0x5940eabd | 0;\n    this.Eh = 0x96283ee2 | 0;\n    this.El = 0xa88effe3 | 0;\n    this.Fh = 0xbe5e1e25 | 0;\n    this.Fl = 0x53863992 | 0;\n    this.Gh = 0x2b0199fc | 0;\n    this.Gl = 0x2c85b8aa | 0;\n    this.Hh = 0x0eb72ddc | 0;\n    this.Hl = 0x81c52ca2 | 0;\n    this.outputLen = 32;\n  }\n}\nexport class SHA384 extends SHA512 {\n  constructor() {\n    super();\n    // h -- high 32 bits, l -- low 32 bits\n    this.Ah = 0xcbbb9d5d | 0;\n    this.Al = 0xc1059ed8 | 0;\n    this.Bh = 0x629a292a | 0;\n    this.Bl = 0x367cd507 | 0;\n    this.Ch = 0x9159015a | 0;\n    this.Cl = 0x3070dd17 | 0;\n    this.Dh = 0x152fecd8 | 0;\n    this.Dl = 0xf70e5939 | 0;\n    this.Eh = 0x67332667 | 0;\n    this.El = 0xffc00b31 | 0;\n    this.Fh = 0x8eb44a87 | 0;\n    this.Fl = 0x68581511 | 0;\n    this.Gh = 0xdb0c2e0d | 0;\n    this.Gl = 0x64f98fa7 | 0;\n    this.Hh = 0x47b5481d | 0;\n    this.Hl = 0xbefa4fa4 | 0;\n    this.outputLen = 48;\n  }\n}\n/** SHA2-512 hash function. */\nexport const sha512 = /* @__PURE__ */wrapConstructor(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_224 = /* @__PURE__ */wrapConstructor(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_256 = /* @__PURE__ */wrapConstructor(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexport const sha384 = /* @__PURE__ */wrapConstructor(() => new SHA384());\n", "/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF } from './curve.js';\nimport { Field, mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = {\n  zip215: true\n};\nfunction validateOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(curve, {\n    hash: 'function',\n    a: 'bigint',\n    d: 'bigint',\n    randomBytes: 'function'\n  }, {\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    uvRatio: 'function',\n    mapToCurve: 'function'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...opts\n  });\n}\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor\n  } = CURVE;\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << BigInt(nByteLength * 8) - _1n;\n  const modP = Fp.create; // Function overrides\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n  // sqrt(u/v)\n  const uvRatio = CURVE.uvRatio || ((u, v) => {\n    try {\n      return {\n        isValid: true,\n        value: Fp.sqrt(u * Fp.inv(v))\n      };\n    } catch (e) {\n      return {\n        isValid: false,\n        value: _0n\n      };\n    }\n  });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes); // NOOP\n  const domain = CURVE.domain || ((data, ctx, phflag) => {\n    abool('phflag', phflag);\n    if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n    return data;\n  }); // NOOP\n  // 0 <= n < MASK\n  // Coordinates larger than Fp.ORDER are allowed for zip215\n  function aCoordinate(title, n) {\n    ut.aInRange('coordinate ' + title, n, _0n, MASK);\n  }\n  function assertPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p, iz) => {\n    const {\n      ex: x,\n      ey: y,\n      ez: z\n    } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return {\n      x: _0n,\n      y: _1n\n    };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return {\n      x: ax,\n      y: ay\n    };\n  });\n  const assertValidMemo = memoized(p => {\n    const {\n      a,\n      d\n    } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const {\n      ex: X,\n      ey: Y,\n      ez: Z,\n      et: T\n    } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point {\n    constructor(ex, ey, ez, et) {\n      this.ex = ex;\n      this.ey = ey;\n      this.ez = ez;\n      this.et = et;\n      aCoordinate('x', ex);\n      aCoordinate('y', ey);\n      aCoordinate('z', ez);\n      aCoordinate('t', et);\n      Object.freeze(this);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static fromAffine(p) {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const {\n        x,\n        y\n      } = p || {};\n      aCoordinate('x', x);\n      aCoordinate('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // Multiscalar Multiplication\n    static msm(points, scalars) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity() {\n      assertValidMemo(this);\n    }\n    // Compare one point to another.\n    equals(other) {\n      assertPoint(other);\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2\n      } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    negate() {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const {\n        a\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other) {\n      assertPoint(other);\n      const {\n        a,\n        d\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1,\n        et: T1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2,\n        et: T2\n      } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n    // Constant-time multiplication.\n    multiply(scalar) {\n      const n = scalar;\n      ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const {\n        p,\n        f\n      } = this.wNAF(n);\n      return Point.normalizeZ([p, f])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar, acc = Point.ZERO) {\n      const n = scalar;\n      ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return I;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz) {\n      return toAffineMemo(this, iz);\n    }\n    clearCofactor() {\n      const {\n        h: cofactor\n      } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex, zip215 = false) {\n      const {\n        d,\n        a\n      } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      ut.aInRange('pointHex.y', y, _0n, max);\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let {\n        isValid,\n        value: x\n      } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({\n        x,\n        y\n      });\n    }\n    static fromPrivateKey(privKey) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes() {\n      const {\n        x,\n        y\n      } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex() {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n  Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n  const {\n    BASE: G,\n    ZERO: I\n  } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n  function modN(a) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash) {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return {\n      head,\n      prefix,\n      scalar,\n      point,\n      pointBytes\n    };\n  }\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey) {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg, privKey, options = {}) {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const {\n      prefix,\n      scalar,\n      pointBytes\n    } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature\n  }\n  const verifyOpts = VERIFY_DEFAULT;\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig, msg, publicKey, options = verifyOpts) {\n    const {\n      context,\n      zip215\n    } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: () => randomBytes(Fp.BYTES),\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    }\n  };\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils\n  };\n}\n", "/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { aInRange, bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction validateOpts(curve) {\n  validateObject(curve, {\n    a: 'bigint'\n  }, {\n    montgomeryBits: 'isSafeInteger',\n    nByteLength: 'isSafeInteger',\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    powPminus2: 'function',\n    Gu: 'bigint'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...curve\n  });\n}\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    P\n  } = CURVE;\n  const modP = n => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes);\n  const powPminus2 = CURVE.powPminus2 || (x => pow(x, P - BigInt(2), P));\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap, x_2, x_3) {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u, scalar) {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, _0n, P);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = k >> t & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n  function encodeUCoordinate(u) {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n  function decodeUCoordinate(uEnc) {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n) {\n    const bytes = ensureBytes('scalar', n);\n    const len = bytes.length;\n    if (len !== montgomeryBytes && len !== fieldLen) {\n      let valid = '' + montgomeryBytes + ' or ' + fieldLen;\n      throw new Error('invalid scalar, expected ' + valid + ' bytes, got ' + len);\n    }\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar, u) {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar) {\n    return scalarMult(scalar, GuBytes);\n  }\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n    getPublicKey: privateKey => scalarMultBase(privateKey),\n    utils: {\n      randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength)\n    },\n    GuBytes: GuBytes\n  };\n}\n", "/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { pippenger } from './abstract/curve.js';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE } from './abstract/utils.js';\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5),\n  _8n = BigInt(8);\nfunction ed25519_pow_2_252_3(x) {\n  // prettier-ignore\n  const _10n = BigInt(10),\n    _20n = BigInt(20),\n    _40n = BigInt(40),\n    _80n = BigInt(80);\n  const P = ED25519_P;\n  const x2 = x * x % P;\n  const b2 = x2 * x % P; // x^3, 11\n  const b4 = pow2(b2, _2n, P) * b2 % P; // x^15, 1111\n  const b5 = pow2(b4, _1n, P) * x % P; // x^31\n  const b10 = pow2(b5, _5n, P) * b5 % P;\n  const b20 = pow2(b10, _10n, P) * b10 % P;\n  const b40 = pow2(b20, _20n, P) * b20 % P;\n  const b80 = pow2(b40, _40n, P) * b40 % P;\n  const b160 = pow2(b80, _80n, P) * b80 % P;\n  const b240 = pow2(b160, _80n, P) * b80 % P;\n  const b250 = pow2(b240, _10n, P) * b10 % P;\n  const pow_p_5_8 = pow2(b250, _2n, P) * x % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return {\n    pow_p_5_8,\n    b2\n  };\n}\nfunction adjustScalarBytes(bytes) {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];\nconst Fp = /* @__PURE__ */(() => Field(ED25519_P, undefined, true))();\nconst ed25519Defaults = /* @__PURE__ */(() => ({\n  // Param: a\n  a: BigInt(-1),\n  // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: _8n,\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio\n}))();\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519 = /* @__PURE__ */(() => twistedEdwards(ed25519Defaults))();\nfunction ed25519_domain(data, ctx, phflag) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */(() => twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain\n}))();\nexport const ed25519ph = /* @__PURE__ */(() => twistedEdwards(Object.assign({}, ed25519Defaults, {\n  domain: ed25519_domain,\n  prehash: sha512\n})))();\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519 = /* @__PURE__ */(() => montgomery({\n  P: ED25519_P,\n  a: BigInt(486662),\n  montgomeryBits: 255,\n  // n is 253 bits\n  nByteLength: 32,\n  Gu: BigInt(9),\n  powPminus2: x => {\n    const P = ED25519_P;\n    // x^(p-2) aka x^(2^255-21)\n    const {\n      pow_p_5_8,\n      b2\n    } = ed25519_pow_2_252_3(x);\n    return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n  },\n  adjustScalarBytes,\n  randomBytes\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n  const {\n    y\n  } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */(() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */(() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */(() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n  let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return {\n    xMn: xn,\n    xMd: xd,\n    yMn: y,\n    yMd: _1n\n  }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = /* @__PURE__ */(() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n  const {\n    xMn,\n    xMd,\n    yMn,\n    yMd\n  } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return {\n    x: Fp.mul(xn, inv[0]),\n    y: Fp.mul(yn, inv[1])\n  }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */(() => createHasher(ed25519.ExtendedPoint, scalars => map_to_curve_elligator2_edwards25519(scalars[0]), {\n  DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n  encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n  p: Fp.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha512\n}))();\nexport const hashToCurve = /* @__PURE__ */(() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */(() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = number => uvRatio(_1n, number);\nconst MAX_255B = /* @__PURE__ */BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = bytes => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n  const {\n    d\n  } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let {\n    isValid: Ns_D_is_sq,\n    value: s\n  } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(ep) {\n    this.ep = ep;\n  }\n  static fromAffine(ap) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex) {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex) {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const {\n      a,\n      d\n    } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const {\n      isValid,\n      value: I\n    } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n  static msm(points, scalars) {\n    const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n    return pippenger(RistPoint, Fn, points, scalars);\n  }\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes() {\n    let {\n      ex: x,\n      ey: y,\n      ez: z,\n      et: t\n    } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const {\n      value: invsqrt\n    } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n  toString() {\n    return this.toHex();\n  }\n  // Compare one point to another.\n  equals(other) {\n    assertRstPoint(other);\n    const {\n      ex: X1,\n      ey: Y1\n    } = this.ep;\n    const {\n      ex: X2,\n      ey: Y2\n    } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n  add(other) {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n  subtract(other) {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n  multiply(scalar) {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n  multiplyUnsafe(scalar) {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n  double() {\n    return new RistPoint(this.ep.double());\n  }\n  negate() {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */(() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n", "var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ExpirableMap_inner, _ExpirableMap_expirationTime, _a, _b;\n/**\n * A map that expires entries after a given time.\n * Defaults to 10 minutes.\n */\nexport class ExpirableMap {\n  /**\n   * Create a new ExpirableMap.\n   * @param {ExpirableMapOptions<any, any>} options - options for the map.\n   * @param {Iterable<[any, any]>} options.source - an optional source of entries to initialize the map with.\n   * @param {number} options.expirationTime - the time in milliseconds after which entries will expire.\n   */\n  constructor(options = {}) {\n    // Internals\n    _ExpirableMap_inner.set(this, void 0);\n    _ExpirableMap_expirationTime.set(this, void 0);\n    this[_a] = this.entries.bind(this);\n    this[_b] = 'ExpirableMap';\n    const {\n      source = [],\n      expirationTime = 10 * 60 * 1000\n    } = options;\n    const currentTime = Date.now();\n    __classPrivateFieldSet(this, _ExpirableMap_inner, new Map([...source].map(([key, value]) => [key, {\n      value,\n      timestamp: currentTime\n    }])), \"f\");\n    __classPrivateFieldSet(this, _ExpirableMap_expirationTime, expirationTime, \"f\");\n  }\n  /**\n   * Prune removes all expired entries.\n   */\n  prune() {\n    const currentTime = Date.now();\n    for (const [key, entry] of __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").entries()) {\n      if (currentTime - entry.timestamp > __classPrivateFieldGet(this, _ExpirableMap_expirationTime, \"f\")) {\n        __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").delete(key);\n      }\n    }\n    return this;\n  }\n  // Implementing the Map interface\n  /**\n   * Set the value for the given key. Prunes expired entries.\n   * @param key for the entry\n   * @param value of the entry\n   * @returns this\n   */\n  set(key, value) {\n    this.prune();\n    const entry = {\n      value,\n      timestamp: Date.now()\n    };\n    __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").set(key, entry);\n    return this;\n  }\n  /**\n   * Get the value associated with the key, if it exists and has not expired.\n   * @param key K\n   * @returns the value associated with the key, or undefined if the key is not present or has expired.\n   */\n  get(key) {\n    const entry = __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").get(key);\n    if (entry === undefined) {\n      return undefined;\n    }\n    if (Date.now() - entry.timestamp > __classPrivateFieldGet(this, _ExpirableMap_expirationTime, \"f\")) {\n      __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").delete(key);\n      return undefined;\n    }\n    return entry.value;\n  }\n  /**\n   * Clear all entries.\n   */\n  clear() {\n    __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").clear();\n  }\n  /**\n   * Entries returns the entries of the map, without the expiration time.\n   * @returns an iterator over the entries of the map.\n   */\n  entries() {\n    const iterator = __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").entries();\n    const generator = function* () {\n      for (const [key, value] of iterator) {\n        yield [key, value.value];\n      }\n    };\n    return generator();\n  }\n  /**\n   * Values returns the values of the map, without the expiration time.\n   * @returns an iterator over the values of the map.\n   */\n  values() {\n    const iterator = __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").values();\n    const generator = function* () {\n      for (const value of iterator) {\n        yield value.value;\n      }\n    };\n    return generator();\n  }\n  /**\n   * Keys returns the keys of the map\n   * @returns an iterator over the keys of the map.\n   */\n  keys() {\n    return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").keys();\n  }\n  /**\n   * forEach calls the callbackfn on each entry of the map.\n   * @param callbackfn to call on each entry\n   * @param thisArg to use as this when calling the callbackfn\n   */\n  forEach(callbackfn, thisArg) {\n    for (const [key, value] of __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").entries()) {\n      callbackfn.call(thisArg, value.value, key, this);\n    }\n  }\n  /**\n   * has returns true if the key exists and has not expired.\n   * @param key K\n   * @returns true if the key exists and has not expired.\n   */\n  has(key) {\n    return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").has(key);\n  }\n  /**\n   * delete the entry for the given key.\n   * @param key K\n   * @returns true if the key existed and has been deleted.\n   */\n  delete(key) {\n    return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").delete(key);\n  }\n  /**\n   * get size of the map.\n   * @returns the size of the map.\n   */\n  get size() {\n    return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").size;\n  }\n}\n_ExpirableMap_inner = new WeakMap(), _ExpirableMap_expirationTime = new WeakMap(), _a = Symbol.iterator, _b = Symbol.toStringTag;\n", "import { bufEquals } from './utils/buffer';\nexport const encodeLenBytes = len => {\n  if (len <= 0x7f) {\n    return 1;\n  } else if (len <= 0xff) {\n    return 2;\n  } else if (len <= 0xffff) {\n    return 3;\n  } else if (len <= 0xffffff) {\n    return 4;\n  } else {\n    throw new Error('Length too long (> 4 bytes)');\n  }\n};\nexport const encodeLen = (buf, offset, len) => {\n  if (len <= 0x7f) {\n    buf[offset] = len;\n    return 1;\n  } else if (len <= 0xff) {\n    buf[offset] = 0x81;\n    buf[offset + 1] = len;\n    return 2;\n  } else if (len <= 0xffff) {\n    buf[offset] = 0x82;\n    buf[offset + 1] = len >> 8;\n    buf[offset + 2] = len;\n    return 3;\n  } else if (len <= 0xffffff) {\n    buf[offset] = 0x83;\n    buf[offset + 1] = len >> 16;\n    buf[offset + 2] = len >> 8;\n    buf[offset + 3] = len;\n    return 4;\n  } else {\n    throw new Error('Length too long (> 4 bytes)');\n  }\n};\nexport const decodeLenBytes = (buf, offset) => {\n  if (buf[offset] < 0x80) return 1;\n  if (buf[offset] === 0x80) throw new Error('Invalid length 0');\n  if (buf[offset] === 0x81) return 2;\n  if (buf[offset] === 0x82) return 3;\n  if (buf[offset] === 0x83) return 4;\n  throw new Error('Length too long (> 4 bytes)');\n};\nexport const decodeLen = (buf, offset) => {\n  const lenBytes = decodeLenBytes(buf, offset);\n  if (lenBytes === 1) return buf[offset];else if (lenBytes === 2) return buf[offset + 1];else if (lenBytes === 3) return (buf[offset + 1] << 8) + buf[offset + 2];else if (lenBytes === 4) return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];\n  throw new Error('Length too long (> 4 bytes)');\n};\n/**\n * A DER encoded `SEQUENCE(OID)` for DER-encoded-COSE\n */\nexport const DER_COSE_OID = Uint8Array.from([...[0x30, 0x0c], ...[0x06, 0x0a], ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xb8, 0x43, 0x01, 0x01] // DER encoded COSE\n]);\n/**\n * A DER encoded `SEQUENCE(OID)` for the Ed25519 algorithm\n */\nexport const ED25519_OID = Uint8Array.from([...[0x30, 0x05], ...[0x06, 0x03], ...[0x2b, 0x65, 0x70] // id-Ed25519 OID\n]);\n/**\n * A DER encoded `SEQUENCE(OID)` for secp256k1 with the ECDSA algorithm\n */\nexport const SECP256K1_OID = Uint8Array.from([...[0x30, 0x10], ...[0x06, 0x07], ...[0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01], ...[0x06, 0x05], ...[0x2b, 0x81, 0x04, 0x00, 0x0a] // OID secp256k1\n]);\n/**\n * Wraps the given `payload` in a DER encoding tagged with the given encoded `oid` like so:\n * `SEQUENCE(oid, BITSTRING(payload))`\n *\n * @param payload The payload to encode as the bit string\n * @param oid The DER encoded (and SEQUENCE wrapped!) OID to tag the payload with\n */\nexport function wrapDER(payload, oid) {\n  // The Bit String header needs to include the unused bit count byte in its length\n  const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);\n  const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;\n  let offset = 0;\n  const buf = new Uint8Array(1 + encodeLenBytes(len) + len);\n  // Sequence\n  buf[offset++] = 0x30;\n  // Sequence Length\n  offset += encodeLen(buf, offset, len);\n  // OID\n  buf.set(oid, offset);\n  offset += oid.byteLength;\n  // Bit String Header\n  buf[offset++] = 0x03;\n  offset += encodeLen(buf, offset, payload.byteLength + 1);\n  // 0 padding\n  buf[offset++] = 0x00;\n  buf.set(new Uint8Array(payload), offset);\n  return buf;\n}\n/**\n * Extracts a payload from the given `derEncoded` data, and checks that it was tagged with the given `oid`.\n *\n * `derEncoded = SEQUENCE(oid, BITSTRING(payload))`\n *\n * @param derEncoded The DER encoded and tagged data\n * @param oid The DER encoded (and SEQUENCE wrapped!) expected OID\n * @returns The unwrapped payload\n */\nexport const unwrapDER = (derEncoded, oid) => {\n  let offset = 0;\n  const expect = (n, msg) => {\n    if (buf[offset++] !== n) {\n      throw new Error('Expected: ' + msg);\n    }\n  };\n  const buf = new Uint8Array(derEncoded);\n  expect(0x30, 'sequence');\n  offset += decodeLenBytes(buf, offset);\n  if (!bufEquals(buf.slice(offset, offset + oid.byteLength), oid)) {\n    throw new Error('Not the expected OID.');\n  }\n  offset += oid.byteLength;\n  expect(0x03, 'bit string');\n  const payloadLen = decodeLen(buf, offset) - 1; // Subtracting 1 to account for the 0 padding\n  offset += decodeLenBytes(buf, offset);\n  expect(0x00, '0 padding');\n  const result = buf.slice(offset);\n  if (payloadLen !== result.length) {\n    throw new Error(`DER payload mismatch: Expected length ${payloadLen} actual length ${result.length}`);\n  }\n  return result;\n};\n", "var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Ed25519PublicKey_rawKey, _Ed25519PublicKey_derKey;\nimport { ED25519_OID, unwrapDER, wrapDER } from './der';\nexport class Ed25519PublicKey {\n  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n  constructor(key) {\n    _Ed25519PublicKey_rawKey.set(this, void 0);\n    _Ed25519PublicKey_derKey.set(this, void 0);\n    if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n      throw new Error('An Ed25519 public key must be exactly 32bytes long');\n    }\n    __classPrivateFieldSet(this, _Ed25519PublicKey_rawKey, key, \"f\");\n    __classPrivateFieldSet(this, _Ed25519PublicKey_derKey, Ed25519PublicKey.derEncode(key), \"f\");\n  }\n  static from(key) {\n    return this.fromDer(key.toDer());\n  }\n  static fromRaw(rawKey) {\n    return new Ed25519PublicKey(rawKey);\n  }\n  static fromDer(derKey) {\n    return new Ed25519PublicKey(this.derDecode(derKey));\n  }\n  static derEncode(publicKey) {\n    return wrapDER(publicKey, ED25519_OID).buffer;\n  }\n  static derDecode(key) {\n    const unwrapped = unwrapDER(key, ED25519_OID);\n    if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n      throw new Error('An Ed25519 public key must be exactly 32bytes long');\n    }\n    return unwrapped;\n  }\n  get rawKey() {\n    return __classPrivateFieldGet(this, _Ed25519PublicKey_rawKey, \"f\");\n  }\n  get derKey() {\n    return __classPrivateFieldGet(this, _Ed25519PublicKey_derKey, \"f\");\n  }\n  toDer() {\n    return this.derKey;\n  }\n  toRaw() {\n    return this.rawKey;\n  }\n}\n_Ed25519PublicKey_rawKey = new WeakMap(), _Ed25519PublicKey_derKey = new WeakMap();\n// The length of Ed25519 public keys is always 32 bytes.\nEd25519PublicKey.RAW_KEY_LENGTH = 32;\n", "export class Observable {\n  constructor() {\n    this.observers = [];\n  }\n  subscribe(func) {\n    this.observers.push(func);\n  }\n  unsubscribe(func) {\n    this.observers = this.observers.filter(observer => observer !== func);\n  }\n  notify(data, ...rest) {\n    this.observers.forEach(observer => observer(data, ...rest));\n  }\n}\nexport class ObservableLog extends Observable {\n  constructor() {\n    super();\n  }\n  print(message, ...rest) {\n    this.notify({\n      message,\n      level: 'info'\n    }, ...rest);\n  }\n  warn(message, ...rest) {\n    this.notify({\n      message,\n      level: 'warn'\n    }, ...rest);\n  }\n  error(message, error, ...rest) {\n    this.notify({\n      message,\n      level: 'error',\n      error\n    }, ...rest);\n  }\n}\n", "var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ExponentialBackoff_currentInterval, _ExponentialBackoff_randomizationFactor, _ExponentialBackoff_multiplier, _ExponentialBackoff_maxInterval, _ExponentialBackoff_startTime, _ExponentialBackoff_maxElapsedTime, _ExponentialBackoff_maxIterations, _ExponentialBackoff_date, _ExponentialBackoff_count;\nconst RANDOMIZATION_FACTOR = 0.5;\nconst MULTIPLIER = 1.5;\nconst INITIAL_INTERVAL_MSEC = 500;\nconst MAX_INTERVAL_MSEC = 60000;\nconst MAX_ELAPSED_TIME_MSEC = 900000;\nconst MAX_ITERATIONS = 10;\n/**\n * Exponential backoff strategy.\n */\nexport class ExponentialBackoff {\n  constructor(options = ExponentialBackoff.default) {\n    _ExponentialBackoff_currentInterval.set(this, void 0);\n    _ExponentialBackoff_randomizationFactor.set(this, void 0);\n    _ExponentialBackoff_multiplier.set(this, void 0);\n    _ExponentialBackoff_maxInterval.set(this, void 0);\n    _ExponentialBackoff_startTime.set(this, void 0);\n    _ExponentialBackoff_maxElapsedTime.set(this, void 0);\n    _ExponentialBackoff_maxIterations.set(this, void 0);\n    _ExponentialBackoff_date.set(this, void 0);\n    _ExponentialBackoff_count.set(this, 0);\n    const {\n      initialInterval = INITIAL_INTERVAL_MSEC,\n      randomizationFactor = RANDOMIZATION_FACTOR,\n      multiplier = MULTIPLIER,\n      maxInterval = MAX_INTERVAL_MSEC,\n      maxElapsedTime = MAX_ELAPSED_TIME_MSEC,\n      maxIterations = MAX_ITERATIONS,\n      date = Date\n    } = options;\n    __classPrivateFieldSet(this, _ExponentialBackoff_currentInterval, initialInterval, \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_randomizationFactor, randomizationFactor, \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_multiplier, multiplier, \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_maxInterval, maxInterval, \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_date, date, \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_startTime, date.now(), \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_maxElapsedTime, maxElapsedTime, \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_maxIterations, maxIterations, \"f\");\n  }\n  get ellapsedTimeInMsec() {\n    return __classPrivateFieldGet(this, _ExponentialBackoff_date, \"f\").now() - __classPrivateFieldGet(this, _ExponentialBackoff_startTime, \"f\");\n  }\n  get currentInterval() {\n    return __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\");\n  }\n  get count() {\n    return __classPrivateFieldGet(this, _ExponentialBackoff_count, \"f\");\n  }\n  get randomValueFromInterval() {\n    const delta = __classPrivateFieldGet(this, _ExponentialBackoff_randomizationFactor, \"f\") * __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\");\n    const min = __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\") - delta;\n    const max = __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\") + delta;\n    return Math.random() * (max - min) + min;\n  }\n  incrementCurrentInterval() {\n    var _a;\n    __classPrivateFieldSet(this, _ExponentialBackoff_currentInterval, Math.min(__classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\") * __classPrivateFieldGet(this, _ExponentialBackoff_multiplier, \"f\"), __classPrivateFieldGet(this, _ExponentialBackoff_maxInterval, \"f\")), \"f\");\n    __classPrivateFieldSet(this, _ExponentialBackoff_count, (_a = __classPrivateFieldGet(this, _ExponentialBackoff_count, \"f\"), _a++, _a), \"f\");\n    return __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\");\n  }\n  next() {\n    if (this.ellapsedTimeInMsec >= __classPrivateFieldGet(this, _ExponentialBackoff_maxElapsedTime, \"f\") || __classPrivateFieldGet(this, _ExponentialBackoff_count, \"f\") >= __classPrivateFieldGet(this, _ExponentialBackoff_maxIterations, \"f\")) {\n      return null;\n    } else {\n      this.incrementCurrentInterval();\n      return this.randomValueFromInterval;\n    }\n  }\n}\n_ExponentialBackoff_currentInterval = new WeakMap(), _ExponentialBackoff_randomizationFactor = new WeakMap(), _ExponentialBackoff_multiplier = new WeakMap(), _ExponentialBackoff_maxInterval = new WeakMap(), _ExponentialBackoff_startTime = new WeakMap(), _ExponentialBackoff_maxElapsedTime = new WeakMap(), _ExponentialBackoff_maxIterations = new WeakMap(), _ExponentialBackoff_date = new WeakMap(), _ExponentialBackoff_count = new WeakMap();\nExponentialBackoff.default = {\n  initialInterval: INITIAL_INTERVAL_MSEC,\n  randomizationFactor: RANDOMIZATION_FACTOR,\n  multiplier: MULTIPLIER,\n  maxInterval: MAX_INTERVAL_MSEC,\n  // 1 minute\n  maxElapsedTime: MAX_ELAPSED_TIME_MSEC,\n  maxIterations: MAX_ITERATIONS,\n  date: Date\n};\n/**\n * Utility function to create an exponential backoff iterator.\n * @param options - for the exponential backoff\n * @returns an iterator that yields the next delay in the exponential backoff\n * @yields the next delay in the exponential backoff\n */\nexport function* exponentialBackoff(options = ExponentialBackoff.default) {\n  const backoff = new ExponentialBackoff(options);\n  let next = backoff.next();\n  while (next) {\n    yield next;\n    next = backoff.next();\n  }\n}\n", "var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HttpAgent_instances, _HttpAgent_rootKeyPromise, _HttpAgent_shouldFetchRootKey, _HttpAgent_identity, _HttpAgent_fetch, _HttpAgent_fetchOptions, _HttpAgent_callOptions, _HttpAgent_timeDiffMsecs, _HttpAgent_credentials, _HttpAgent_retryTimes, _HttpAgent_backoffStrategy, _HttpAgent_maxIngressExpiryInMinutes, _HttpAgent_waterMark, _HttpAgent_queryPipeline, _HttpAgent_updatePipeline, _HttpAgent_subnetKeys, _HttpAgent_verifyQuerySignatures, _HttpAgent_requestAndRetryQuery, _HttpAgent_requestAndRetry, _HttpAgent_verifyQueryResponse, _HttpAgent_rootKeyGuard;\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../../errors';\nimport { AnonymousIdentity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { hashOfMap, requestIdOf } from '../../request_id';\nimport { bufEquals, bufFromBufLike, concat, fromHex, toHex } from '../../utils/buffer';\nimport { Expiry, httpHeadersTransform, makeNonceTransform } from './transforms';\nimport { makeNonce, SubmitRequestType } from './types';\nimport { AgentCallError, AgentHTTPResponseError, AgentQueryError, AgentReadStateError } from './errors';\nimport { request } from '../../canisterStatus';\nimport { CertificateVerificationError, LookupStatus, lookup_path } from '../../certificate';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { ExpirableMap } from '../../utils/expirableMap';\nimport { Ed25519PublicKey } from '../../public_key';\nimport { decodeTime } from '../../utils/leb';\nimport { ObservableLog } from '../../observable';\nimport { ExponentialBackoff } from '../../polling/backoff';\nexport * from './transforms';\nexport * from './errors';\nexport { makeNonce } from './types';\nexport var RequestStatusResponseStatus;\n(function (RequestStatusResponseStatus) {\n  RequestStatusResponseStatus[\"Received\"] = \"received\";\n  RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n  RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n  RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n  RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n  RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));\nconst MINUTE_TO_MSECS = 60 * 1000;\n// Root public key for the IC, encoded as hex\nexport const IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' + 'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' + '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' + 'b01291091c5f87b98883463f98091a0baaae';\nexport const MANAGEMENT_CANISTER_ID = 'aaaaa-aa';\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\nclass HttpDefaultFetchError extends AgentError {\n  constructor(message) {\n    super(message);\n    this.message = message;\n  }\n}\nexport class IdentityInvalidError extends AgentError {\n  constructor(message) {\n    super(message);\n    this.message = message;\n  }\n}\nfunction getDefaultFetch() {\n  let defaultFetch;\n  if (typeof window !== 'undefined') {\n    // Browser context\n    if (window.fetch) {\n      defaultFetch = window.fetch.bind(window);\n    } else {\n      throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.');\n    }\n  } else if (typeof global !== 'undefined') {\n    // Node context\n    if (global.fetch) {\n      defaultFetch = global.fetch.bind(global);\n    } else {\n      throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.');\n    }\n  } else if (typeof self !== 'undefined') {\n    if (self.fetch) {\n      defaultFetch = self.fetch.bind(self);\n    }\n  }\n  if (defaultFetch) {\n    return defaultFetch;\n  }\n  throw new HttpDefaultFetchError('Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.');\n}\nfunction determineHost(configuredHost) {\n  let host;\n  if (configuredHost !== undefined) {\n    if (!configuredHost.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n      host = new URL(window.location.protocol + '//' + configuredHost);\n    } else {\n      host = new URL(configuredHost);\n    }\n  } else {\n    // Mainnet, local, and remote environments will have the api route available\n    const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n    const remoteHosts = ['.github.dev', '.gitpod.io'];\n    const location = typeof window !== 'undefined' ? window.location : undefined;\n    const hostname = location === null || location === void 0 ? void 0 : location.hostname;\n    let knownHost;\n    if (hostname && typeof hostname === 'string') {\n      if (remoteHosts.some(host => hostname.endsWith(host))) {\n        knownHost = hostname;\n      } else {\n        knownHost = knownHosts.find(host => hostname.endsWith(host));\n      }\n    }\n    if (location && knownHost) {\n      // If the user is on a boundary-node provided host, we can use the same host for the agent\n      host = new URL(`${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`);\n    } else {\n      host = new URL('https://icp-api.io');\n    }\n  }\n  return host.toString();\n}\n/**\n * A HTTP agent allows users to interact with a client of the internet computer\nusing the available methods. It exposes an API that closely follows the\npublic view of the internet computer, and is not intended to be exposed\ndirectly to the majority of users due to its low-level interface.\n * There is a pipeline to apply transformations to the request before sending\nit to the client. This is to decouple signature, nonce generation and\nother computations so that this class can stay as simple as possible while\nallowing extensions.\n */\nexport class HttpAgent {\n  /**\n   * @param options - Options for the HttpAgent\n   * @deprecated Use `HttpAgent.create` or `HttpAgent.createSync` instead\n   */\n  constructor(options = {}) {\n    var _a, _b;\n    _HttpAgent_instances.add(this);\n    _HttpAgent_rootKeyPromise.set(this, null);\n    _HttpAgent_shouldFetchRootKey.set(this, false);\n    _HttpAgent_identity.set(this, void 0);\n    _HttpAgent_fetch.set(this, void 0);\n    _HttpAgent_fetchOptions.set(this, void 0);\n    _HttpAgent_callOptions.set(this, void 0);\n    _HttpAgent_timeDiffMsecs.set(this, 0);\n    _HttpAgent_credentials.set(this, void 0);\n    _HttpAgent_retryTimes.set(this, void 0); // Retry requests N times before erroring by default\n    _HttpAgent_backoffStrategy.set(this, void 0);\n    _HttpAgent_maxIngressExpiryInMinutes.set(this, void 0);\n    // Public signature to help with type checking.\n    this._isAgent = true;\n    this.config = {};\n    // The UTC time in milliseconds when the latest request was made\n    _HttpAgent_waterMark.set(this, 0);\n    this.log = new ObservableLog();\n    _HttpAgent_queryPipeline.set(this, []);\n    _HttpAgent_updatePipeline.set(this, []);\n    _HttpAgent_subnetKeys.set(this, new ExpirableMap({\n      expirationTime: 5 * 60 * 1000 // 5 minutes\n    }));\n    _HttpAgent_verifyQuerySignatures.set(this, true);\n    /**\n     * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n     * @param queryResponse - The response from the query\n     * @param subnetStatus - The subnet status, including all node keys\n     * @returns ApiQueryResponse\n     */\n    _HttpAgent_verifyQueryResponse.set(this, (queryResponse, subnetStatus) => {\n      if (__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\") === false) {\n        // This should not be called if the user has disabled verification\n        return queryResponse;\n      }\n      if (!subnetStatus) {\n        throw new CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n      }\n      const {\n        status,\n        signatures = [],\n        requestId\n      } = queryResponse;\n      const domainSeparator = new TextEncoder().encode('\\x0Bic-response');\n      for (const sig of signatures) {\n        const {\n          timestamp,\n          identity\n        } = sig;\n        const nodeId = Principal.fromUint8Array(identity).toText();\n        let hash;\n        // Hash is constructed differently depending on the status\n        if (status === 'replied') {\n          const {\n            reply\n          } = queryResponse;\n          hash = hashOfMap({\n            status: status,\n            reply: reply,\n            timestamp: BigInt(timestamp),\n            request_id: requestId\n          });\n        } else if (status === 'rejected') {\n          const {\n            reject_code,\n            reject_message,\n            error_code\n          } = queryResponse;\n          hash = hashOfMap({\n            status: status,\n            reject_code: reject_code,\n            reject_message: reject_message,\n            error_code: error_code,\n            timestamp: BigInt(timestamp),\n            request_id: requestId\n          });\n        } else {\n          throw new Error(`Unknown status: ${status}`);\n        }\n        const separatorWithHash = concat(domainSeparator, new Uint8Array(hash));\n        // FIX: check for match without verifying N times\n        const pubKey = subnetStatus === null || subnetStatus === void 0 ? void 0 : subnetStatus.nodeKeys.get(nodeId);\n        if (!pubKey) {\n          throw new CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n        }\n        const rawKey = Ed25519PublicKey.fromDer(pubKey).rawKey;\n        const valid = ed25519.verify(sig.signature, new Uint8Array(separatorWithHash), new Uint8Array(rawKey));\n        if (valid) return queryResponse;\n        throw new CertificateVerificationError(`Invalid signature from replica ${nodeId} signed query.`);\n      }\n      return queryResponse;\n    });\n    this.config = options;\n    __classPrivateFieldSet(this, _HttpAgent_fetch, options.fetch || getDefaultFetch() || fetch.bind(global), \"f\");\n    __classPrivateFieldSet(this, _HttpAgent_fetchOptions, options.fetchOptions, \"f\");\n    __classPrivateFieldSet(this, _HttpAgent_callOptions, options.callOptions, \"f\");\n    __classPrivateFieldSet(this, _HttpAgent_shouldFetchRootKey, (_a = options.shouldFetchRootKey) !== null && _a !== void 0 ? _a : false, \"f\");\n    // Use provided root key, otherwise fall back to IC_ROOT_KEY for mainnet or null if the key needs to be fetched\n    if (options.rootKey) {\n      this.rootKey = options.rootKey;\n    } else if (__classPrivateFieldGet(this, _HttpAgent_shouldFetchRootKey, \"f\")) {\n      this.rootKey = null;\n    } else {\n      this.rootKey = fromHex(IC_ROOT_KEY);\n    }\n    const host = determineHost(options.host);\n    this.host = new URL(host);\n    if (options.verifyQuerySignatures !== undefined) {\n      __classPrivateFieldSet(this, _HttpAgent_verifyQuerySignatures, options.verifyQuerySignatures, \"f\");\n    }\n    // Default is 3\n    __classPrivateFieldSet(this, _HttpAgent_retryTimes, (_b = options.retryTimes) !== null && _b !== void 0 ? _b : 3, \"f\");\n    // Delay strategy for retries. Default is exponential backoff\n    const defaultBackoffFactory = () => new ExponentialBackoff({\n      maxIterations: __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")\n    });\n    __classPrivateFieldSet(this, _HttpAgent_backoffStrategy, options.backoffStrategy || defaultBackoffFactory, \"f\");\n    // Rewrite to avoid redirects\n    if (this.host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n      this.host.hostname = IC0_DOMAIN;\n    } else if (this.host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n      this.host.hostname = ICP0_DOMAIN;\n    } else if (this.host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n      this.host.hostname = ICP_API_DOMAIN;\n    }\n    if (options.credentials) {\n      const {\n        name,\n        password\n      } = options.credentials;\n      __classPrivateFieldSet(this, _HttpAgent_credentials, `${name}${password ? ':' + password : ''}`, \"f\");\n    }\n    __classPrivateFieldSet(this, _HttpAgent_identity, Promise.resolve(options.identity || new AnonymousIdentity()), \"f\");\n    if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes > 5) {\n      throw new AgentError(`The maximum ingress expiry time is 5 minutes. Provided ingress expiry time is ${options.ingressExpiryInMinutes} minutes.`);\n    }\n    if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes <= 0) {\n      throw new AgentError(`Ingress expiry time must be greater than 0. Provided ingress expiry time is ${options.ingressExpiryInMinutes} minutes.`);\n    }\n    __classPrivateFieldSet(this, _HttpAgent_maxIngressExpiryInMinutes, options.ingressExpiryInMinutes || 5, \"f\");\n    // Add a nonce transform to ensure calls are unique\n    this.addTransform('update', makeNonceTransform(makeNonce));\n    if (options.useQueryNonces) {\n      this.addTransform('query', makeNonceTransform(makeNonce));\n    }\n    if (options.logToConsole) {\n      this.log.subscribe(log => {\n        if (log.level === 'error') {\n          console.error(log.message);\n        } else if (log.level === 'warn') {\n          console.warn(log.message);\n        } else {\n          console.log(log.message);\n        }\n      });\n    }\n  }\n  get waterMark() {\n    return __classPrivateFieldGet(this, _HttpAgent_waterMark, \"f\");\n  }\n  static createSync(options = {}) {\n    return new this(Object.assign({}, options));\n  }\n  static async create(options = {\n    shouldFetchRootKey: false\n  }) {\n    const agent = HttpAgent.createSync(options);\n    const initPromises = [agent.syncTime()];\n    if (agent.host.toString() !== 'https://icp-api.io' && options.shouldFetchRootKey) {\n      initPromises.push(agent.fetchRootKey());\n    }\n    await Promise.all(initPromises);\n    return agent;\n  }\n  static async from(agent) {\n    var _a;\n    try {\n      if ('config' in agent) {\n        return await HttpAgent.create(agent.config);\n      }\n      return await HttpAgent.create({\n        fetch: agent._fetch,\n        fetchOptions: agent._fetchOptions,\n        callOptions: agent._callOptions,\n        host: agent._host.toString(),\n        identity: (_a = agent._identity) !== null && _a !== void 0 ? _a : undefined\n      });\n    } catch (_b) {\n      throw new AgentError('Failed to create agent from provided agent');\n    }\n  }\n  isLocal() {\n    const hostname = this.host.hostname;\n    return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n  }\n  addTransform(type, fn, priority = fn.priority || 0) {\n    if (type === 'update') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").findIndex(x => (x.priority || 0) < priority);\n      __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").splice(i >= 0 ? i : __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").length, 0, Object.assign(fn, {\n        priority\n      }));\n    } else if (type === 'query') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").findIndex(x => (x.priority || 0) < priority);\n      __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").splice(i >= 0 ? i : __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").length, 0, Object.assign(fn, {\n        priority\n      }));\n    }\n  }\n  async getPrincipal() {\n    if (!__classPrivateFieldGet(this, _HttpAgent_identity, \"f\")) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    return (await __classPrivateFieldGet(this, _HttpAgent_identity, \"f\")).getPrincipal();\n  }\n  async call(canisterId, options, identity) {\n    var _a, _b;\n    await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_rootKeyGuard).call(this);\n    // TODO - restore this value\n    const callSync = (_a = options.callSync) !== null && _a !== void 0 ? _a : true;\n    const id = await (identity !== undefined ? await identity : await __classPrivateFieldGet(this, _HttpAgent_identity, \"f\"));\n    if (!id) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    const canister = Principal.from(canisterId);\n    const ecid = options.effectiveCanisterId ? Principal.from(options.effectiveCanisterId) : canister;\n    const sender = id.getPrincipal() || Principal.anonymous();\n    let ingress_expiry = new Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS);\n    // If the value is off by more than 30 seconds, reconcile system time with the network\n    if (Math.abs(__classPrivateFieldGet(this, _HttpAgent_timeDiffMsecs, \"f\")) > 1000 * 30) {\n      ingress_expiry = new Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS + __classPrivateFieldGet(this, _HttpAgent_timeDiffMsecs, \"f\"));\n    }\n    const submit = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry\n    };\n    let transformedRequest = await this._transform({\n      request: {\n        body: null,\n        method: 'POST',\n        headers: Object.assign({\n          'Content-Type': 'application/cbor'\n        }, __classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? {\n          Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\"))\n        } : {})\n      },\n      endpoint: \"call\" /* Endpoint.Call */,\n      body: submit\n    });\n    const nonce = transformedRequest.body.nonce ? toNonce(transformedRequest.body.nonce) : undefined;\n    submit.nonce = nonce;\n    function toNonce(buf) {\n      return new Uint8Array(buf);\n    }\n    // Apply transform for identity.\n    transformedRequest = await id.transformRequest(transformedRequest);\n    const body = cbor.encode(transformedRequest.body);\n    const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n    const requestId = requestIdOf(submit);\n    try {\n      // Attempt v3 sync call\n      const requestSync = () => {\n        this.log.print(`fetching \"/api/v3/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n        return __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v3/canister/${ecid.toText()}/call`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_callOptions, \"f\")), transformedRequest.request), {\n          body\n        }));\n      };\n      const requestAsync = () => {\n        this.log.print(`fetching \"/api/v2/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n        return __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_callOptions, \"f\")), transformedRequest.request), {\n          body\n        }));\n      };\n      const request = __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n        request: callSync ? requestSync : requestAsync,\n        backoff,\n        tries: 0\n      });\n      const response = await request;\n      const responseBuffer = await response.arrayBuffer();\n      const responseBody = response.status === 200 && responseBuffer.byteLength > 0 ? cbor.decode(responseBuffer) : null;\n      // Update the watermark with the latest time from consensus\n      if (responseBody && 'certificate' in responseBody) {\n        const time = await this.parseTimeFromResponse({\n          certificate: responseBody.certificate\n        });\n        __classPrivateFieldSet(this, _HttpAgent_waterMark, time, \"f\");\n      }\n      return {\n        requestId,\n        response: {\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseBody,\n          headers: httpHeadersTransform(response.headers)\n        },\n        requestDetails: submit\n      };\n    } catch (error) {\n      // If the error is due to the v3 api not being supported, fall back to v2\n      if (error.message.includes('v3 api not supported.')) {\n        this.log.warn('v3 api not supported. Fall back to v2');\n        return this.call(canisterId, Object.assign(Object.assign({}, options), {\n          // disable v3 api\n          callSync: false\n        }), identity);\n      }\n      const message = `Error while making call: ${(_b = error.message) !== null && _b !== void 0 ? _b : String(error)}`;\n      const callError = new AgentCallError(message, error, toHex(requestId), toHex(transformedRequest.body.sender_pubkey), toHex(transformedRequest.body.sender_sig), String(transformedRequest.body.content.ingress_expiry['_value']));\n      this.log.error(message, callError);\n      throw callError;\n    }\n  }\n  async query(canisterId, fields, identity) {\n    var _a, _b, _c, _d;\n    await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_rootKeyGuard).call(this);\n    const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n    const ecid = fields.effectiveCanisterId ? Principal.from(fields.effectiveCanisterId) : Principal.from(canisterId);\n    this.log.print(`ecid ${ecid.toString()}`);\n    this.log.print(`canisterId ${canisterId.toString()}`);\n    let transformedRequest = undefined;\n    let queryResult;\n    const id = await (identity !== undefined ? identity : __classPrivateFieldGet(this, _HttpAgent_identity, \"f\"));\n    if (!id) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    const canister = Principal.from(canisterId);\n    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n    const request = {\n      request_type: \"query\" /* ReadRequestType.Query */,\n      canister_id: canister,\n      method_name: fields.methodName,\n      arg: fields.arg,\n      sender,\n      ingress_expiry: new Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS)\n    };\n    const requestId = requestIdOf(request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: Object.assign({\n          'Content-Type': 'application/cbor'\n        }, __classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? {\n          Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\"))\n        } : {})\n      },\n      endpoint: \"read\" /* Endpoint.Query */,\n      body: request\n    });\n    // Apply transform for identity.\n    transformedRequest = await (id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest));\n    const body = cbor.encode(transformedRequest.body);\n    const args = {\n      canister: canister.toText(),\n      ecid,\n      transformedRequest,\n      body,\n      requestId,\n      backoff,\n      tries: 0\n    };\n    const makeQuery = async () => {\n      return {\n        requestDetails: request,\n        query: await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, args)\n      };\n    };\n    const getSubnetStatus = async () => {\n      if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n        return undefined;\n      }\n      const subnetStatus = __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(ecid.toString());\n      if (subnetStatus) {\n        return subnetStatus;\n      }\n      await this.fetchSubnetKeys(ecid.toString());\n      return __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(ecid.toString());\n    };\n    // Attempt to make the query i=retryTimes times\n    // Make query and fetch subnet keys in parallel\n    try {\n      const [_queryResult, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n      queryResult = _queryResult;\n      const {\n        requestDetails,\n        query\n      } = queryResult;\n      const queryWithDetails = Object.assign(Object.assign({}, query), {\n        requestDetails\n      });\n      this.log.print('Query response:', queryWithDetails);\n      // Skip verification if the user has disabled it\n      if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n        return queryWithDetails;\n      }\n      try {\n        return __classPrivateFieldGet(this, _HttpAgent_verifyQueryResponse, \"f\").call(this, queryWithDetails, subnetStatus);\n      } catch (_e) {\n        // In case the node signatures have changed, refresh the subnet keys and try again\n        this.log.warn('Query response verification failed. Retrying with fresh subnet keys.');\n        __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").delete(canisterId.toString());\n        await this.fetchSubnetKeys(ecid.toString());\n        const updatedSubnetStatus = __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(canisterId.toString());\n        if (!updatedSubnetStatus) {\n          throw new CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n        }\n        return __classPrivateFieldGet(this, _HttpAgent_verifyQueryResponse, \"f\").call(this, queryWithDetails, updatedSubnetStatus);\n      }\n    } catch (error) {\n      const message = `Error while making call: ${(_a = error.message) !== null && _a !== void 0 ? _a : String(error)}`;\n      const queryError = new AgentQueryError(message, error, String(requestId), toHex((_b = transformedRequest === null || transformedRequest === void 0 ? void 0 : transformedRequest.body) === null || _b === void 0 ? void 0 : _b.sender_pubkey), toHex((_c = transformedRequest === null || transformedRequest === void 0 ? void 0 : transformedRequest.body) === null || _c === void 0 ? void 0 : _c.sender_sig), String((_d = transformedRequest === null || transformedRequest === void 0 ? void 0 : transformedRequest.body) === null || _d === void 0 ? void 0 : _d.content.ingress_expiry['_value']));\n      this.log.error(message, queryError);\n      throw queryError;\n    }\n  }\n  async createReadStateRequest(fields, identity) {\n    await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_rootKeyGuard).call(this);\n    const id = await (identity !== undefined ? await identity : await __classPrivateFieldGet(this, _HttpAgent_identity, \"f\"));\n    if (!id) {\n      throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n    }\n    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || Principal.anonymous();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const transformedRequest = await this._transform({\n      request: {\n        method: 'POST',\n        headers: Object.assign({\n          'Content-Type': 'application/cbor'\n        }, __classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? {\n          Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\"))\n        } : {})\n      },\n      endpoint: \"read_state\" /* Endpoint.ReadState */,\n      body: {\n        request_type: \"read_state\" /* ReadRequestType.ReadState */,\n        paths: fields.paths,\n        sender,\n        ingress_expiry: new Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS)\n      }\n    });\n    // Apply transform for identity.\n    return id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest);\n  }\n  async readState(canisterId, fields, identity,\n  // eslint-disable-next-line\n  request) {\n    var _a, _b, _c, _d;\n    function getRequestId(fields) {\n      for (const path of fields.paths) {\n        const [pathName, value] = path;\n        const request_status = new TextEncoder().encode('request_status');\n        if (bufEquals(pathName, request_status)) {\n          return value;\n        }\n      }\n    }\n    const requestId = getRequestId(fields);\n    await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_rootKeyGuard).call(this);\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n    const transformedRequest = request !== null && request !== void 0 ? request : await this.createReadStateRequest(fields, identity);\n    const body = cbor.encode(transformedRequest.body);\n    this.log.print(`fetching \"/api/v2/canister/${canister}/read_state\" with request:`, transformedRequest);\n    // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n    const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n    try {\n      const response = await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n        request: () => __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/canister/${canister.toString()}/read_state`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_fetchOptions, \"f\")), transformedRequest.request), {\n          body\n        })),\n        backoff,\n        tries: 0\n      });\n      if (!response.ok) {\n        throw new Error(`Server returned an error:\\n` + `  Code: ${response.status} (${response.statusText})\\n` + `  Body: ${await response.text()}\\n`);\n      }\n      const decodedResponse = cbor.decode(await response.arrayBuffer());\n      this.log.print('Read state response:', decodedResponse);\n      const parsedTime = await this.parseTimeFromResponse(decodedResponse);\n      if (parsedTime > 0) {\n        this.log.print('Read state response time:', parsedTime);\n        __classPrivateFieldSet(this, _HttpAgent_waterMark, parsedTime, \"f\");\n      }\n      return decodedResponse;\n    } catch (error) {\n      const message = `Caught exception while attempting to read state: ${(_a = error.message) !== null && _a !== void 0 ? _a : String(error)}`;\n      const readStateError = new AgentReadStateError(message, error, String(requestId), toHex((_b = transformedRequest === null || transformedRequest === void 0 ? void 0 : transformedRequest.body) === null || _b === void 0 ? void 0 : _b.sender_pubkey), toHex((_c = transformedRequest === null || transformedRequest === void 0 ? void 0 : transformedRequest.body) === null || _c === void 0 ? void 0 : _c.sender_sig), String((_d = transformedRequest === null || transformedRequest === void 0 ? void 0 : transformedRequest.body) === null || _d === void 0 ? void 0 : _d.content.ingress_expiry['_value']));\n      this.log.error(message, readStateError);\n      throw readStateError;\n    }\n  }\n  async parseTimeFromResponse(response) {\n    let tree;\n    if (response.certificate) {\n      const decoded = cbor.decode(response.certificate);\n      if (decoded && 'tree' in decoded) {\n        tree = decoded.tree;\n      } else {\n        throw new Error('Could not decode time from response');\n      }\n      const timeLookup = lookup_path(['time'], tree);\n      if (timeLookup.status !== LookupStatus.Found) {\n        throw new Error('Time was not found in the response or was not in its expected format.');\n      }\n      if (!(timeLookup.value instanceof ArrayBuffer) && !ArrayBuffer.isView(timeLookup)) {\n        throw new Error('Time was not found in the response or was not in its expected format.');\n      }\n      const date = decodeTime(bufFromBufLike(timeLookup.value));\n      this.log.print('Time from response:', date);\n      this.log.print('Time from response in milliseconds:', Number(date));\n      return Number(date);\n    } else {\n      this.log.warn('No certificate found in response');\n    }\n    return 0;\n  }\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n   */\n  async syncTime(canisterId) {\n    await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_rootKeyGuard).call(this);\n    const CanisterStatus = await import('../../canisterStatus');\n    const callTime = Date.now();\n    try {\n      if (!canisterId) {\n        this.log.print('Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai');\n      }\n      const anonymousAgent = HttpAgent.createSync({\n        identity: new AnonymousIdentity(),\n        host: this.host.toString(),\n        fetch: __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\"),\n        retryTimes: 0\n      });\n      const status = await CanisterStatus.request({\n        // Fall back with canisterId of the ICP Ledger\n        canisterId: canisterId !== null && canisterId !== void 0 ? canisterId : Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n        agent: anonymousAgent,\n        paths: ['time']\n      });\n      const replicaTime = status.get('time');\n      if (replicaTime) {\n        __classPrivateFieldSet(this, _HttpAgent_timeDiffMsecs, Number(replicaTime) - Number(callTime), \"f\");\n        this.log.notify({\n          message: `Syncing time: offset of ${__classPrivateFieldGet(this, _HttpAgent_timeDiffMsecs, \"f\")}`,\n          level: 'info'\n        });\n      }\n    } catch (error) {\n      this.log.error('Caught exception while attempting to sync time', error);\n    }\n  }\n  async status() {\n    const headers = __classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? {\n      Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\"))\n    } : {};\n    this.log.print(`fetching \"/api/v2/status\"`);\n    const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n    const response = await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n      backoff,\n      request: () => __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/status`, this.host), Object.assign({\n        headers\n      }, __classPrivateFieldGet(this, _HttpAgent_fetchOptions, \"f\"))),\n      tries: 0\n    });\n    return cbor.decode(await response.arrayBuffer());\n  }\n  async fetchRootKey() {\n    let result;\n    // Wait for already pending promise to avoid duplicate calls\n    if (__classPrivateFieldGet(this, _HttpAgent_rootKeyPromise, \"f\")) {\n      result = await __classPrivateFieldGet(this, _HttpAgent_rootKeyPromise, \"f\");\n    } else {\n      // construct promise\n      __classPrivateFieldSet(this, _HttpAgent_rootKeyPromise, new Promise((resolve, reject) => {\n        this.status().then(value => {\n          // Hex-encoded version of the replica root key\n          const rootKey = value.root_key;\n          this.rootKey = rootKey;\n          resolve(rootKey);\n        }).catch(reject);\n      }), \"f\");\n      result = await __classPrivateFieldGet(this, _HttpAgent_rootKeyPromise, \"f\");\n    }\n    // clear rootkey promise and return result\n    __classPrivateFieldSet(this, _HttpAgent_rootKeyPromise, null, \"f\");\n    return result;\n  }\n  invalidateIdentity() {\n    __classPrivateFieldSet(this, _HttpAgent_identity, null, \"f\");\n  }\n  replaceIdentity(identity) {\n    __classPrivateFieldSet(this, _HttpAgent_identity, Promise.resolve(identity), \"f\");\n  }\n  async fetchSubnetKeys(canisterId) {\n    await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_rootKeyGuard).call(this);\n    const effectiveCanisterId = Principal.from(canisterId);\n    const response = await request({\n      canisterId: effectiveCanisterId,\n      paths: ['subnet'],\n      agent: this\n    });\n    const subnetResponse = response.get('subnet');\n    if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n      __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").set(effectiveCanisterId.toText(), subnetResponse);\n      return subnetResponse;\n    }\n    // If the subnet status is not returned, return undefined\n    return undefined;\n  }\n  _transform(request) {\n    let p = Promise.resolve(request);\n    if (request.endpoint === \"call\" /* Endpoint.Call */) {\n      for (const fn of __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\")) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    } else {\n      for (const fn of __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\")) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    }\n    return p;\n  }\n}\n_HttpAgent_rootKeyPromise = new WeakMap(), _HttpAgent_shouldFetchRootKey = new WeakMap(), _HttpAgent_identity = new WeakMap(), _HttpAgent_fetch = new WeakMap(), _HttpAgent_fetchOptions = new WeakMap(), _HttpAgent_callOptions = new WeakMap(), _HttpAgent_timeDiffMsecs = new WeakMap(), _HttpAgent_credentials = new WeakMap(), _HttpAgent_retryTimes = new WeakMap(), _HttpAgent_backoffStrategy = new WeakMap(), _HttpAgent_maxIngressExpiryInMinutes = new WeakMap(), _HttpAgent_waterMark = new WeakMap(), _HttpAgent_queryPipeline = new WeakMap(), _HttpAgent_updatePipeline = new WeakMap(), _HttpAgent_subnetKeys = new WeakMap(), _HttpAgent_verifyQuerySignatures = new WeakMap(), _HttpAgent_verifyQueryResponse = new WeakMap(), _HttpAgent_instances = new WeakSet(), _HttpAgent_requestAndRetryQuery = async function _HttpAgent_requestAndRetryQuery(args) {\n  var _a, _b;\n  const {\n    ecid,\n    transformedRequest,\n    body,\n    requestId,\n    backoff,\n    tries\n  } = args;\n  const delay = tries === 0 ? 0 : backoff.next();\n  this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with tries:`, {\n    tries,\n    backoff,\n    delay\n  });\n  // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n  if (delay === null) {\n    throw new AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n  }\n  if (delay > 0) {\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  let response;\n  // Make the request and retry if it throws an error\n  try {\n    this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with request:`, transformedRequest);\n    const fetchResponse = await __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/canister/${ecid.toString()}/query`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_fetchOptions, \"f\")), transformedRequest.request), {\n      body\n    }));\n    if (fetchResponse.status === 200) {\n      const queryResponse = cbor.decode(await fetchResponse.arrayBuffer());\n      response = Object.assign(Object.assign({}, queryResponse), {\n        httpDetails: {\n          ok: fetchResponse.ok,\n          status: fetchResponse.status,\n          statusText: fetchResponse.statusText,\n          headers: httpHeadersTransform(fetchResponse.headers)\n        },\n        requestId\n      });\n    } else {\n      throw new AgentHTTPResponseError(`Gateway returned an error:\\n` + `  Code: ${fetchResponse.status} (${fetchResponse.statusText})\\n` + `  Body: ${await fetchResponse.text()}\\n`, {\n        ok: fetchResponse.ok,\n        status: fetchResponse.status,\n        statusText: fetchResponse.statusText,\n        headers: httpHeadersTransform(fetchResponse.headers)\n      });\n    }\n  } catch (error) {\n    if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n      this.log.warn(`Caught exception while attempting to make query:\\n` + `  ${error}\\n` + `  Retrying query.`);\n      return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, Object.assign(Object.assign({}, args), {\n        tries: tries + 1\n      }));\n    }\n    throw error;\n  }\n  const timestamp = (_b = (_a = response.signatures) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.timestamp;\n  // Skip watermark verification if the user has set verifyQuerySignatures to false\n  if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n    return response;\n  }\n  if (!timestamp) {\n    throw new Error('Timestamp not found in query response. This suggests a malformed or malicious response.');\n  }\n  // Convert the timestamp to milliseconds\n  const timeStampInMs = Number(BigInt(timestamp) / BigInt(1000000));\n  this.log.print('watermark and timestamp', {\n    waterMark: this.waterMark,\n    timestamp: timeStampInMs\n  });\n  // If the timestamp is less than the watermark, retry the request up to the retry limit\n  if (Number(this.waterMark) > timeStampInMs) {\n    const error = new AgentError('Timestamp is below the watermark. Retrying query.');\n    this.log.error('Timestamp is below', error, {\n      timestamp,\n      waterMark: this.waterMark\n    });\n    if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n      return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, Object.assign(Object.assign({}, args), {\n        tries: tries + 1\n      }));\n    }\n    {\n      throw new AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n    }\n  }\n  return response;\n}, _HttpAgent_requestAndRetry = async function _HttpAgent_requestAndRetry(args) {\n  const {\n    request,\n    backoff,\n    tries\n  } = args;\n  const delay = tries === 0 ? 0 : backoff.next();\n  // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n  if (delay === null) {\n    throw new AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n  }\n  if (delay > 0) {\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  let response;\n  try {\n    response = await request();\n  } catch (error) {\n    if (__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\") > tries) {\n      this.log.warn(`Caught exception while attempting to make request:\\n` + `  ${error}\\n` + `  Retrying request.`);\n      // Delay the request by the configured backoff strategy\n      return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n        request,\n        backoff,\n        tries: tries + 1\n      });\n    }\n    throw error;\n  }\n  if (response.ok) {\n    return response;\n  }\n  const responseText = await response.clone().text();\n  const errorMessage = `Server returned an error:\\n` + `  Code: ${response.status} (${response.statusText})\\n` + `  Body: ${responseText}\\n`;\n  if (response.status === 404 && response.url.includes('api/v3')) {\n    throw new AgentHTTPResponseError('v3 api not supported. Fall back to v2', {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      headers: httpHeadersTransform(response.headers)\n    });\n  }\n  if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n    return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n      request,\n      backoff,\n      tries: tries + 1\n    });\n  }\n  throw new AgentHTTPResponseError(errorMessage, {\n    ok: response.ok,\n    status: response.status,\n    statusText: response.statusText,\n    headers: httpHeadersTransform(response.headers)\n  });\n}, _HttpAgent_rootKeyGuard = async function _HttpAgent_rootKeyGuard() {\n  if (this.rootKey) {\n    return;\n  } else if (this.rootKey === null && __classPrivateFieldGet(this, _HttpAgent_shouldFetchRootKey, \"f\")) {\n    await this.fetchRootKey();\n  } else {\n    throw new AgentError(`Invalid root key detected. The root key for this agent is ${this.rootKey} and the shouldFetchRootKey value is set to ${__classPrivateFieldGet(this, _HttpAgent_shouldFetchRootKey, \"f\")}. The root key should only be unknown if you are in local development. Otherwise you should avoid fetching and use the default IC Root Key or the known root key of your environment.`);\n  }\n};\n", "import { Principal } from '@dfinity/principal';\nexport var ProxyMessageKind;\n(function (ProxyMessageKind) {\n  ProxyMessageKind[\"Error\"] = \"err\";\n  ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n  ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n  ProxyMessageKind[\"Query\"] = \"q\";\n  ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n  ProxyMessageKind[\"Call\"] = \"c\";\n  ProxyMessageKind[\"CallResponse\"] = \"cr\";\n  ProxyMessageKind[\"ReadState\"] = \"rs\";\n  ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n  ProxyMessageKind[\"Status\"] = \"s\";\n  ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {}));\n// A Stub Agent that forwards calls to another Agent implementation.\nexport class ProxyStubAgent {\n  constructor(_frontend, _agent) {\n    this._frontend = _frontend;\n    this._agent = _agent;\n  }\n  onmessage(msg) {\n    switch (msg.type) {\n      case ProxyMessageKind.GetPrincipal:\n        this._agent.getPrincipal().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.GetPrincipalResponse,\n            response: response.toText()\n          });\n        });\n        break;\n      case ProxyMessageKind.Query:\n        this._agent.query(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.QueryResponse,\n            response\n          });\n        });\n        break;\n      case ProxyMessageKind.Call:\n        this._agent.call(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.CallResponse,\n            response\n          });\n        });\n        break;\n      case ProxyMessageKind.ReadState:\n        this._agent.readState(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.ReadStateResponse,\n            response\n          });\n        });\n        break;\n      case ProxyMessageKind.Status:\n        this._agent.status().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.StatusResponse,\n            response\n          });\n        });\n        break;\n      default:\n        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n    }\n  }\n}\n// An Agent that forwards calls to a backend. The calls are serialized\nexport class ProxyAgent {\n  constructor(_backend) {\n    this._backend = _backend;\n    this._nextId = 0;\n    this._pendingCalls = new Map();\n    this.rootKey = null;\n  }\n  onmessage(msg) {\n    const id = msg.id;\n    const maybePromise = this._pendingCalls.get(id);\n    if (!maybePromise) {\n      throw new Error('A proxy get the same message twice...');\n    }\n    this._pendingCalls.delete(id);\n    const [resolve, reject] = maybePromise;\n    switch (msg.type) {\n      case ProxyMessageKind.Error:\n        return reject(msg.error);\n      case ProxyMessageKind.GetPrincipalResponse:\n      case ProxyMessageKind.CallResponse:\n      case ProxyMessageKind.QueryResponse:\n      case ProxyMessageKind.ReadStateResponse:\n      case ProxyMessageKind.StatusResponse:\n        return resolve(msg.response);\n      default:\n        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n    }\n  }\n  async getPrincipal() {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.GetPrincipal\n    }).then(principal => {\n      if (typeof principal !== 'string') {\n        throw new Error('Invalid principal received.');\n      }\n      return Principal.fromText(principal);\n    });\n  }\n  readState(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.ReadState,\n      args: [canisterId.toString(), fields]\n    });\n  }\n  call(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Call,\n      args: [canisterId.toString(), fields]\n    });\n  }\n  status() {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Status\n    });\n  }\n  query(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Query,\n      args: [canisterId.toString(), fields]\n    });\n  }\n  async _sendAndWait(msg) {\n    return new Promise((resolve, reject) => {\n      this._pendingCalls.set(msg.id, [resolve, reject]);\n      this._backend(msg);\n    });\n  }\n  async fetchRootKey() {\n    // Hex-encoded version of the replica root key\n    const rootKey = (await this.status()).root_key;\n    this.rootKey = rootKey;\n    return rootKey;\n  }\n}\n", "export * from './api';\nexport * from './http';\nexport * from './http/errors';\nexport * from './proxy';\nexport function getDefaultAgent() {\n  const agent = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.ic.agent : global.ic.agent : window.ic.agent;\n  if (!agent) {\n    throw new Error('No Agent could be found.');\n  }\n  return agent;\n}\n", "var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Certificate_disableTimeVerification;\nimport * as cbor from './cbor';\nimport { AgentError } from './errors';\nimport { hash } from './request_id';\nimport { bufEquals, concat, fromHex, toHex } from './utils/buffer';\nimport { Principal } from '@dfinity/principal';\nimport * as bls from './utils/bls';\nimport { decodeTime } from './utils/leb';\nimport { MANAGEMENT_CANISTER_ID } from './agent';\n/**\n * A certificate may fail verification with respect to the provided public key\n */\nexport class CertificateVerificationError extends AgentError {\n  constructor(reason) {\n    super(`Invalid certificate: ${reason}`);\n  }\n}\nexport var NodeType;\n(function (NodeType) {\n  NodeType[NodeType[\"Empty\"] = 0] = \"Empty\";\n  NodeType[NodeType[\"Fork\"] = 1] = \"Fork\";\n  NodeType[NodeType[\"Labeled\"] = 2] = \"Labeled\";\n  NodeType[NodeType[\"Leaf\"] = 3] = \"Leaf\";\n  NodeType[NodeType[\"Pruned\"] = 4] = \"Pruned\";\n})(NodeType || (NodeType = {}));\n/**\n * Make a human readable string out of a hash tree.\n * @param tree\n */\nexport function hashTreeToString(tree) {\n  const indent = s => s.split('\\n').map(x => '  ' + x).join('\\n');\n  function labelToString(label) {\n    const decoder = new TextDecoder(undefined, {\n      fatal: true\n    });\n    try {\n      return JSON.stringify(decoder.decode(label));\n    } catch (e) {\n      return `data(...${label.byteLength} bytes)`;\n    }\n  }\n  switch (tree[0]) {\n    case NodeType.Empty:\n      return '()';\n    case NodeType.Fork:\n      {\n        if (tree[1] instanceof Array && tree[2] instanceof ArrayBuffer) {\n          const left = hashTreeToString(tree[1]);\n          const right = hashTreeToString(tree[2]);\n          return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n        } else {\n          throw new Error('Invalid tree structure for fork');\n        }\n      }\n    case NodeType.Labeled:\n      {\n        if (tree[1] instanceof ArrayBuffer && tree[2] instanceof ArrayBuffer) {\n          const label = labelToString(tree[1]);\n          const sub = hashTreeToString(tree[2]);\n          return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n        } else {\n          throw new Error('Invalid tree structure for labeled');\n        }\n      }\n    case NodeType.Leaf:\n      {\n        if (!tree[1]) {\n          throw new Error('Invalid tree structure for leaf');\n        } else if (Array.isArray(tree[1])) {\n          return JSON.stringify(tree[1]);\n        }\n        return `leaf(...${tree[1].byteLength} bytes)`;\n      }\n    case NodeType.Pruned:\n      {\n        if (!tree[1]) {\n          throw new Error('Invalid tree structure for pruned');\n        } else if (Array.isArray(tree[1])) {\n          return JSON.stringify(tree[1]);\n        }\n        return `pruned(${toHex(new Uint8Array(tree[1]))}`;\n      }\n    default:\n      {\n        return `unknown(${JSON.stringify(tree[0])})`;\n      }\n  }\n}\nfunction isBufferGreaterThan(a, b) {\n  const a8 = new Uint8Array(a);\n  const b8 = new Uint8Array(b);\n  for (let i = 0; i < a8.length; i++) {\n    if (a8[i] > b8[i]) {\n      return true;\n    }\n  }\n  return false;\n}\nexport class Certificate {\n  constructor(certificate, _rootKey, _canisterId, _blsVerify,\n  // Default to 5 minutes\n  _maxAgeInMinutes = 5, disableTimeVerification = false) {\n    this._rootKey = _rootKey;\n    this._canisterId = _canisterId;\n    this._blsVerify = _blsVerify;\n    this._maxAgeInMinutes = _maxAgeInMinutes;\n    _Certificate_disableTimeVerification.set(this, false);\n    __classPrivateFieldSet(this, _Certificate_disableTimeVerification, disableTimeVerification, \"f\");\n    this.cert = cbor.decode(new Uint8Array(certificate));\n  }\n  /**\n   * Create a new instance of a certificate, automatically verifying it. Throws a\n   * CertificateVerificationError if the certificate cannot be verified.\n   * @constructs  Certificate\n   * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n   * @param {ArrayBuffer} options.certificate The bytes of the certificate\n   * @param {ArrayBuffer} options.rootKey The root key to verify against\n   * @param {Principal} options.canisterId The effective or signing canister ID\n   * @param {number} options.maxAgeInMinutes The maximum age of the certificate in minutes. Default is 5 minutes.\n   * @throws {CertificateVerificationError}\n   */\n  static async create(options) {\n    const cert = Certificate.createUnverified(options);\n    await cert.verify();\n    return cert;\n  }\n  static createUnverified(options) {\n    let blsVerify = options.blsVerify;\n    if (!blsVerify) {\n      blsVerify = bls.blsVerify;\n    }\n    return new Certificate(options.certificate, options.rootKey, options.canisterId, blsVerify, options.maxAgeInMinutes, options.disableTimeVerification);\n  }\n  lookup(path) {\n    // constrain the type of the result, so that empty HashTree is undefined\n    return lookup_path(path, this.cert.tree);\n  }\n  lookup_label(label) {\n    return this.lookup([label]);\n  }\n  async verify() {\n    const rootHash = await reconstruct(this.cert.tree);\n    const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n    const sig = this.cert.signature;\n    const key = extractDER(derKey);\n    const msg = concat(domain_sep('ic-state-root'), rootHash);\n    let sigVer = false;\n    const lookupTime = lookupResultToBuffer(this.lookup(['time']));\n    if (!lookupTime) {\n      // Should never happen - time is always present in IC certificates\n      throw new CertificateVerificationError('Certificate does not contain a time');\n    }\n    // Certificate time verification checks\n    if (!__classPrivateFieldGet(this, _Certificate_disableTimeVerification, \"f\")) {\n      const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n      const MAX_AGE_IN_MSEC = this._maxAgeInMinutes * 60 * 1000;\n      const now = Date.now();\n      const earliestCertificateTime = now - MAX_AGE_IN_MSEC;\n      const fiveMinutesFromNow = now + FIVE_MINUTES_IN_MSEC;\n      const certTime = decodeTime(lookupTime);\n      if (certTime.getTime() < earliestCertificateTime) {\n        throw new CertificateVerificationError(`Certificate is signed more than ${this._maxAgeInMinutes} minutes in the past. Certificate time: ` + certTime.toISOString() + ' Current time: ' + new Date(now).toISOString());\n      } else if (certTime.getTime() > fiveMinutesFromNow) {\n        throw new CertificateVerificationError('Certificate is signed more than 5 minutes in the future. Certificate time: ' + certTime.toISOString() + ' Current time: ' + new Date(now).toISOString());\n      }\n    }\n    try {\n      sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));\n    } catch (err) {\n      sigVer = false;\n    }\n    if (!sigVer) {\n      throw new CertificateVerificationError('Signature verification failed');\n    }\n  }\n  async _checkDelegationAndGetKey(d) {\n    if (!d) {\n      return this._rootKey;\n    }\n    const cert = await Certificate.createUnverified({\n      certificate: d.certificate,\n      rootKey: this._rootKey,\n      canisterId: this._canisterId,\n      blsVerify: this._blsVerify,\n      // Do not check max age for delegation certificates\n      maxAgeInMinutes: Infinity\n    });\n    if (cert.cert.delegation) {\n      throw new CertificateVerificationError('Delegation certificates cannot be nested');\n    }\n    await cert.verify();\n    if (this._canisterId.toString() !== MANAGEMENT_CANISTER_ID) {\n      const canisterInRange = check_canister_ranges({\n        canisterId: this._canisterId,\n        subnetId: Principal.fromUint8Array(new Uint8Array(d.subnet_id)),\n        tree: cert.cert.tree\n      });\n      if (!canisterInRange) {\n        throw new CertificateVerificationError(`Canister ${this._canisterId} not in range of delegations for subnet 0x${toHex(d.subnet_id)}`);\n      }\n    }\n    const publicKeyLookup = lookupResultToBuffer(cert.lookup(['subnet', d.subnet_id, 'public_key']));\n    if (!publicKeyLookup) {\n      throw new Error(`Could not find subnet key for subnet 0x${toHex(d.subnet_id)}`);\n    }\n    return publicKeyLookup;\n  }\n}\n_Certificate_disableTimeVerification = new WeakMap();\nconst DER_PREFIX = fromHex('308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100');\nconst KEY_LENGTH = 96;\nfunction extractDER(buf) {\n  const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n  if (buf.byteLength !== expectedLength) {\n    throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);\n  }\n  const prefix = buf.slice(0, DER_PREFIX.byteLength);\n  if (!bufEquals(prefix, DER_PREFIX)) {\n    throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);\n  }\n  return buf.slice(DER_PREFIX.byteLength);\n}\n/**\n * utility function to constrain the type of a path\n * @param {ArrayBuffer | HashTree | undefined} result - the result of a lookup\n * @returns ArrayBuffer or Undefined\n */\nexport function lookupResultToBuffer(result) {\n  if (result.status !== LookupStatus.Found) {\n    return undefined;\n  }\n  if (result.value instanceof ArrayBuffer) {\n    return result.value;\n  }\n  if (result.value instanceof Uint8Array) {\n    return result.value.buffer;\n  }\n  return undefined;\n}\n/**\n * @param t\n */\nexport async function reconstruct(t) {\n  switch (t[0]) {\n    case NodeType.Empty:\n      return hash(domain_sep('ic-hashtree-empty'));\n    case NodeType.Pruned:\n      return t[1];\n    case NodeType.Leaf:\n      return hash(concat(domain_sep('ic-hashtree-leaf'), t[1]));\n    case NodeType.Labeled:\n      return hash(concat(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));\n    case NodeType.Fork:\n      return hash(concat(domain_sep('ic-hashtree-fork'), await reconstruct(t[1]), await reconstruct(t[2])));\n    default:\n      throw new Error('unreachable');\n  }\n}\nfunction domain_sep(s) {\n  const len = new Uint8Array([s.length]);\n  const str = new TextEncoder().encode(s);\n  return concat(len, str);\n}\nexport var LookupStatus;\n(function (LookupStatus) {\n  LookupStatus[\"Unknown\"] = \"unknown\";\n  LookupStatus[\"Absent\"] = \"absent\";\n  LookupStatus[\"Found\"] = \"found\";\n})(LookupStatus || (LookupStatus = {}));\nvar LabelLookupStatus;\n(function (LabelLookupStatus) {\n  LabelLookupStatus[\"Less\"] = \"less\";\n  LabelLookupStatus[\"Greater\"] = \"greater\";\n})(LabelLookupStatus || (LabelLookupStatus = {}));\nexport function lookup_path(path, tree) {\n  if (path.length === 0) {\n    switch (tree[0]) {\n      case NodeType.Leaf:\n        {\n          if (!tree[1]) {\n            throw new Error('Invalid tree structure for leaf');\n          }\n          if (tree[1] instanceof ArrayBuffer) {\n            return {\n              status: LookupStatus.Found,\n              value: tree[1]\n            };\n          }\n          if (tree[1] instanceof Uint8Array) {\n            return {\n              status: LookupStatus.Found,\n              value: tree[1].buffer\n            };\n          }\n          return {\n            status: LookupStatus.Found,\n            value: tree[1]\n          };\n        }\n      default:\n        {\n          return {\n            status: LookupStatus.Found,\n            value: tree\n          };\n        }\n    }\n  }\n  const label = typeof path[0] === 'string' ? new TextEncoder().encode(path[0]) : path[0];\n  const lookupResult = find_label(label, tree);\n  switch (lookupResult.status) {\n    case LookupStatus.Found:\n      {\n        return lookup_path(path.slice(1), lookupResult.value);\n      }\n    case LabelLookupStatus.Greater:\n    case LabelLookupStatus.Less:\n      {\n        return {\n          status: LookupStatus.Absent\n        };\n      }\n    default:\n      {\n        return lookupResult;\n      }\n  }\n}\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param t - the tree to flatten\n * @returns HashTree[] - the flattened tree\n */\nexport function flatten_forks(t) {\n  switch (t[0]) {\n    case NodeType.Empty:\n      return [];\n    case NodeType.Fork:\n      return flatten_forks(t[1]).concat(flatten_forks(t[2]));\n    default:\n      return [t];\n  }\n}\nexport function find_label(label, tree) {\n  switch (tree[0]) {\n    // if we have a labelled node, compare the node's label to the one we are\n    // looking for\n    case NodeType.Labeled:\n      // if the label we're searching for is greater than this node's label,\n      // we need to keep searching\n      if (isBufferGreaterThan(label, tree[1])) {\n        return {\n          status: LabelLookupStatus.Greater\n        };\n      }\n      // if the label we're searching for is equal this node's label, we can\n      // stop searching and return the found node\n      if (bufEquals(label, tree[1])) {\n        return {\n          status: LookupStatus.Found,\n          value: tree[2]\n        };\n      }\n      // if the label we're searching for is not greater than or equal to this\n      // node's label, then it's less than this node's label, and we can stop\n      // searching because we've looked too far\n      return {\n        status: LabelLookupStatus.Less\n      };\n    // if we have a fork node, we need to search both sides, starting with the left\n    case NodeType.Fork:\n      // search in the left node\n      const leftLookupResult = find_label(label, tree[1]);\n      switch (leftLookupResult.status) {\n        // if the label we're searching for is greater than the left node lookup,\n        // we need to search the right node\n        case LabelLookupStatus.Greater:\n          {\n            const rightLookupResult = find_label(label, tree[2]);\n            // if the label we're searching for is less than the right node lookup,\n            // then we can stop searching and say that the label is provably Absent\n            if (rightLookupResult.status === LabelLookupStatus.Less) {\n              return {\n                status: LookupStatus.Absent\n              };\n            }\n            // if the label we're searching for is less than or equal to the right\n            // node lookup, then we let the caller handle it\n            return rightLookupResult;\n          }\n        // if the left node returns an uncertain result, we need to search the\n        // right node\n        case LookupStatus.Unknown:\n          {\n            let rightLookupResult = find_label(label, tree[2]);\n            // if the label we're searching for is less than the right node lookup,\n            // then we also need to return an uncertain result\n            if (rightLookupResult.status === LabelLookupStatus.Less) {\n              return {\n                status: LookupStatus.Unknown\n              };\n            }\n            // if the label we're searching for is less than or equal to the right\n            // node lookup, then we let the caller handle it\n            return rightLookupResult;\n          }\n        // if the label we're searching for is not greater than the left node\n        // lookup, or the result is not uncertain, we stop searching and return\n        // whatever the result of the left node lookup was, which can be either\n        // Found or Absent\n        default:\n          {\n            return leftLookupResult;\n          }\n      }\n    // if we encounter a Pruned node, we can't know for certain if the label\n    // we're searching for is present or not\n    case NodeType.Pruned:\n      return {\n        status: LookupStatus.Unknown\n      };\n    // if the current node is Empty, or a Leaf, we can stop searching because\n    // we know for sure that the label we're searching for is not present\n    default:\n      return {\n        status: LookupStatus.Absent\n      };\n  }\n}\n/**\n * Check if a canister falls within a range of canisters\n * @param canisterId Principal\n * @param ranges [Principal, Principal][]\n * @returns\n */\nexport function check_canister_ranges(params) {\n  const {\n    canisterId,\n    subnetId,\n    tree\n  } = params;\n  const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n  if (rangeLookup.status !== LookupStatus.Found || !(rangeLookup.value instanceof ArrayBuffer)) {\n    throw new Error(`Could not find canister ranges for subnet ${subnetId}`);\n  }\n  const ranges_arr = cbor.decode(rangeLookup.value);\n  const ranges = ranges_arr.map(v => [Principal.fromUint8Array(v[0]), Principal.fromUint8Array(v[1])]);\n  const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n  return canisterInRange;\n}\n"],
  "mappings": "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",
  "names": ["len", "i", "len2", "isLE", "value", "value", "compare", "concat", "utf8ToBytes", "i", "readUIntLE", "byteLength", "readIntLE", "writeUIntLE", "writeIntLE", "alphabet", "BigNumber", "alphabet", "compare", "format", "pow", "toHex", "value", "value", "URL", "hash", "URL", "value", "c", "value", "URL", "value", "bytes", "u8", "u16", "u32", "u64", "i8", "i16", "i32", "i64", "mod", "cbor", "value", "SelfDescribeCborSerializer", "require_src", "__export", "mod", "value", "crypto", "crypto", "value", "isLE", "_32n", "sha224", "_a", "sha224", "ReplicaRejectCode", "decode", "encode", "value", "CborTag", "encode", "borc", "decode", "Principal", "decode", "encode", "concat", "bufFromBufLike", "uint8ToBuf", "value", "concat", "value", "hash", "encode", "decode", "Principal", "import_borc", "value", "borc", "request", "abytes", "concatBytes", "isBytes", "utf8ToBytes", "value", "hexes", "_0n", "_1n", "_2n", "Fp", "_1n", "_2n", "bitLen", "isLE", "_0n", "_1n", "Fp", "isLE", "_1n", "value", "abytes", "concatBytes", "utf8ToBytes", "hash", "_0n", "_1n", "window", "wbits", "Fp", "_0n", "_1n", "_2n", "_3n", "_4n", "Fp", "toBytes", "concatBytes", "isBytes", "a", "Fp", "_0n", "_1n", "_2n", "tv5", "_4n", "_3n", "c1", "c2", "value", "_0n", "_1n", "_2n", "_3n", "Fp", "Fr", "Fp2", "Fp6", "Fp12", "verify", "msg", "_0n", "_1n", "_2n", "_3n", "Fp", "Fp2", "G2psi", "G2psi2", "FpLegendre", "concatBytes", "Fp6", "Fp4Square", "Fp12", "_0n", "_1n", "_2n", "_3n", "_4n", "concatBytes", "value", "x", "request", "cbor", "SubmitRequestType", "raw_value", "ingress_as_seconds", "request", "value", "_0n", "_1n", "_2n", "_8n", "Fp", "randomBytes", "uvRatio", "adjustScalarBytes", "G", "A", "B", "F", "C", "D", "E", "H", "X3", "Y3", "T3", "Z3", "cofactor", "hash", "concatBytes", "verify", "_0n", "_1n", "validateOpts", "adjustScalarBytes", "_0n", "_1n", "_2n", "_3n", "_5n", "_8n", "pow", "Fp", "_8n", "_3n", "Fp", "_3n", "_8n", "_2n", "_5n", "_1n", "mod", "_0n", "value", "__classPrivateFieldSet", "value", "__classPrivateFieldGet", "__classPrivateFieldSet", "value", "__classPrivateFieldGet", "_a", "__classPrivateFieldSet", "value", "__classPrivateFieldGet", "RequestStatusResponseStatus", "host", "_a", "_b", "domainSeparator", "hash", "encode", "request", "decode", "fields", "_HttpAgent_requestAndRetryQuery", "_HttpAgent_requestAndRetry", "_HttpAgent_rootKeyGuard", "ProxyMessageKind", "__classPrivateFieldSet", "value", "__classPrivateFieldGet", "NodeType", "decode", "blsVerify", "LookupStatus", "LabelLookupStatus", "_a", "cert", "path", "data", "decode", "encode", "buf"]
}
